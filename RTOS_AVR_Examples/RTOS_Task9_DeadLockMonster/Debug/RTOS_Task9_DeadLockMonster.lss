
RTOS_Task9_DeadLockMonster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000029c2  00002a56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fb  00800088  00800088  00002a7e  2**0
                  ALLOC
  3 .stab         00004764  00000000  00000000  00002a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002bb3  00000000  00000000  000071e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 df 14 	jmp	0x29be	; 0x29be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	df 93       	push	r29
      a2:	cf 93       	push	r28
      a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x14>
      a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x16>
      a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x18>
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	1a 82       	std	Y+2, r1	; 0x02
      b0:	19 82       	std	Y+1, r1	; 0x01
      b2:	20 e6       	ldi	r18, 0x60	; 96
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	80 ef       	ldi	r24, 0xF0	; 240
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	b9 01       	movw	r22, r18
      bc:	45 e5       	ldi	r20, 0x55	; 85
      be:	50 e0       	ldi	r21, 0x00	; 0
      c0:	20 e0       	ldi	r18, 0x00	; 0
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	01 e0       	ldi	r16, 0x01	; 1
      c6:	fe 01       	movw	r30, r28
      c8:	31 96       	adiw	r30, 0x01	; 1
      ca:	7f 01       	movw	r14, r30
      cc:	cc 24       	eor	r12, r12
      ce:	dd 24       	eor	r13, r13
      d0:	aa 24       	eor	r10, r10
      d2:	bb 24       	eor	r11, r11
      d4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskGenericCreate>
      d8:	1c 82       	std	Y+4, r1	; 0x04
      da:	1b 82       	std	Y+3, r1	; 0x03
      dc:	2c e6       	ldi	r18, 0x6C	; 108
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	88 e4       	ldi	r24, 0x48	; 72
      e2:	91 e0       	ldi	r25, 0x01	; 1
      e4:	fe 01       	movw	r30, r28
      e6:	33 96       	adiw	r30, 0x03	; 3
      e8:	b9 01       	movw	r22, r18
      ea:	45 e5       	ldi	r20, 0x55	; 85
      ec:	50 e0       	ldi	r21, 0x00	; 0
      ee:	20 e0       	ldi	r18, 0x00	; 0
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	02 e0       	ldi	r16, 0x02	; 2
      f4:	7f 01       	movw	r14, r30
      f6:	cc 24       	eor	r12, r12
      f8:	dd 24       	eor	r13, r13
      fa:	aa 24       	eor	r10, r10
      fc:	bb 24       	eor	r11, r11
      fe:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskGenericCreate>
     102:	1e 82       	std	Y+6, r1	; 0x06
     104:	1d 82       	std	Y+5, r1	; 0x05
     106:	2a e7       	ldi	r18, 0x7A	; 122
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	80 ea       	ldi	r24, 0xA0	; 160
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	fe 01       	movw	r30, r28
     110:	35 96       	adiw	r30, 0x05	; 5
     112:	b9 01       	movw	r22, r18
     114:	45 e5       	ldi	r20, 0x55	; 85
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	02 e0       	ldi	r16, 0x02	; 2
     11e:	7f 01       	movw	r14, r30
     120:	cc 24       	eor	r12, r12
     122:	dd 24       	eor	r13, r13
     124:	aa 24       	eor	r10, r10
     126:	bb 24       	eor	r11, r11
     128:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskGenericCreate>
     12c:	0e 94 de 00 	call	0x1bc	; 0x1bc <init>
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	0e 94 54 09 	call	0x12a8	; 0x12a8 <xQueueCreate>
     138:	90 93 89 00 	sts	0x0089, r25
     13c:	80 93 88 00 	sts	0x0088, r24
     140:	80 91 88 00 	lds	r24, 0x0088
     144:	90 91 89 00 	lds	r25, 0x0089
     148:	00 97       	sbiw	r24, 0x00	; 0
     14a:	59 f0       	breq	.+22     	; 0x162 <main+0xd0>
     14c:	80 91 88 00 	lds	r24, 0x0088
     150:	90 91 89 00 	lds	r25, 0x0089
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	50 e0       	ldi	r21, 0x00	; 0
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	0e 94 54 09 	call	0x12a8	; 0x12a8 <xQueueCreate>
     16a:	90 93 8b 00 	sts	0x008B, r25
     16e:	80 93 8a 00 	sts	0x008A, r24
     172:	80 91 8a 00 	lds	r24, 0x008A
     176:	90 91 8b 00 	lds	r25, 0x008B
     17a:	00 97       	sbiw	r24, 0x00	; 0
     17c:	59 f0       	breq	.+22     	; 0x194 <main+0x102>
     17e:	80 91 8a 00 	lds	r24, 0x008A
     182:	90 91 8b 00 	lds	r25, 0x008B
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>
     194:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskStartScheduler>
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	26 96       	adiw	r28, 0x06	; 6
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	0f 91       	pop	r16
     1ae:	ff 90       	pop	r15
     1b0:	ef 90       	pop	r14
     1b2:	df 90       	pop	r13
     1b4:	cf 90       	pop	r12
     1b6:	bf 90       	pop	r11
     1b8:	af 90       	pop	r10
     1ba:	08 95       	ret

000001bc <init>:

	/*Never Enter Here */
	return 0;
}

void init(void){
     1bc:	df 93       	push	r29
     1be:	cf 93       	push	r28
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62

	DDRB = 0xFF;
     1c4:	e7 e3       	ldi	r30, 0x37	; 55
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	8f ef       	ldi	r24, 0xFF	; 255
     1ca:	80 83       	st	Z, r24

	DDRC = 0x00;
     1cc:	e4 e3       	ldi	r30, 0x34	; 52
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	10 82       	st	Z, r1

	PORTC = 0xFF;
     1d2:	e5 e3       	ldi	r30, 0x35	; 53
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	8f ef       	ldi	r24, 0xFF	; 255
     1d8:	80 83       	st	Z, r24

}
     1da:	cf 91       	pop	r28
     1dc:	df 91       	pop	r29
     1de:	08 95       	ret

000001e0 <PushButton>:
 void PushButton(void * pvparam){
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <PushButton+0x6>
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <PushButton+0x8>
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <PushButton+0xa>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	9e 83       	std	Y+6, r25	; 0x06
     1f0:	8d 83       	std	Y+5, r24	; 0x05

	 portTickType Freq = 100;
     1f2:	84 e6       	ldi	r24, 0x64	; 100
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	89 83       	std	Y+1, r24	; 0x01
	 portTickType Start = xTaskGetTickCount();
     1fa:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskGetTickCount>
     1fe:	9c 83       	std	Y+4, r25	; 0x04
     200:	8b 83       	std	Y+3, r24	; 0x03
	 while (1){
		 /* if the Push Button is Pressed */
		 if ((PINC & 0x01) == 0){
     202:	e3 e3       	ldi	r30, 0x33	; 51
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	80 81       	ld	r24, Z
     208:	88 2f       	mov	r24, r24
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	81 70       	andi	r24, 0x01	; 1
     20e:	90 70       	andi	r25, 0x00	; 0
     210:	00 97       	sbiw	r24, 0x00	; 0
     212:	b1 f5       	brne	.+108    	; 0x280 <PushButton+0xa0>

			 /* If the Resource No One is Using so Take the Semaphore  **/
			 if(pdTRUE == xSemaphoreTake(ButtonSemaphore,100)){
     214:	80 91 88 00 	lds	r24, 0x0088
     218:	90 91 89 00 	lds	r25, 0x0089
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	44 e6       	ldi	r20, 0x64	; 100
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xQueueGenericReceive>
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	49 f5       	brne	.+82     	; 0x280 <PushButton+0xa0>

				 vTaskDelay(1000);
     22e:	88 ee       	ldi	r24, 0xE8	; 232
     230:	93 e0       	ldi	r25, 0x03	; 3
     232:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <vTaskDelay>

				 while(pdFALSE == xSemaphoreTake(Button2Semaphore,100));
     236:	80 91 8a 00 	lds	r24, 0x008A
     23a:	90 91 8b 00 	lds	r25, 0x008B
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	44 e6       	ldi	r20, 0x64	; 100
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xQueueGenericReceive>
     24c:	88 23       	and	r24, r24
     24e:	99 f3       	breq	.-26     	; 0x236 <PushButton+0x56>

				 /*Change the State **/
				 ButtonState = 0;
     250:	10 92 84 00 	sts	0x0084, r1

				 /**Give the Semaphore */

				 xSemaphoreGive(Button2Semaphore);
     254:	80 91 8a 00 	lds	r24, 0x008A
     258:	90 91 8b 00 	lds	r25, 0x008B
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>

				 xSemaphoreGive(ButtonSemaphore);
     26a:	80 91 88 00 	lds	r24, 0x0088
     26e:	90 91 89 00 	lds	r25, 0x0089
     272:	60 e0       	ldi	r22, 0x00	; 0
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	40 e0       	ldi	r20, 0x00	; 0
     278:	50 e0       	ldi	r21, 0x00	; 0
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>
		 }

		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
     280:	ce 01       	movw	r24, r28
     282:	03 96       	adiw	r24, 0x03	; 3
     284:	29 81       	ldd	r18, Y+1	; 0x01
     286:	3a 81       	ldd	r19, Y+2	; 0x02
     288:	b9 01       	movw	r22, r18
     28a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <vTaskDelayUntil>
     28e:	b9 cf       	rjmp	.-142    	; 0x202 <PushButton+0x22>

00000290 <PushButton2>:
	 }

 }


 void PushButton2(void * pvparam){
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	00 d0       	rcall	.+0      	; 0x296 <PushButton2+0x6>
     296:	00 d0       	rcall	.+0      	; 0x298 <PushButton2+0x8>
     298:	00 d0       	rcall	.+0      	; 0x29a <PushButton2+0xa>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	9e 83       	std	Y+6, r25	; 0x06
     2a0:	8d 83       	std	Y+5, r24	; 0x05
	 portTickType Freq = 100;
     2a2:	84 e6       	ldi	r24, 0x64	; 100
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	9a 83       	std	Y+2, r25	; 0x02
     2a8:	89 83       	std	Y+1, r24	; 0x01
	 portTickType Start = xTaskGetTickCount();
     2aa:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskGetTickCount>
     2ae:	9c 83       	std	Y+4, r25	; 0x04
     2b0:	8b 83       	std	Y+3, r24	; 0x03
	 while (1){
		 /* if the Push Button is Pressed */
		 if ((PINC & 0x02) == 0){
     2b2:	e3 e3       	ldi	r30, 0x33	; 51
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	82 70       	andi	r24, 0x02	; 2
     2be:	90 70       	andi	r25, 0x00	; 0
     2c0:	00 97       	sbiw	r24, 0x00	; 0
     2c2:	b9 f7       	brne	.-18     	; 0x2b2 <PushButton2+0x22>

			 /* If the Resource No One is Using so Take the Semaphore  **/
			 if(pdTRUE == xSemaphoreTake(Button2Semaphore,100)){
     2c4:	80 91 8a 00 	lds	r24, 0x008A
     2c8:	90 91 8b 00 	lds	r25, 0x008B
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	44 e6       	ldi	r20, 0x64	; 100
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xQueueGenericReceive>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	49 f5       	brne	.+82     	; 0x330 <PushButton2+0xa0>

				 vTaskDelay(1000);
     2de:	88 ee       	ldi	r24, 0xE8	; 232
     2e0:	93 e0       	ldi	r25, 0x03	; 3
     2e2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <vTaskDelay>

				 while(pdFALSE == xSemaphoreTake(ButtonSemaphore,100));
     2e6:	80 91 88 00 	lds	r24, 0x0088
     2ea:	90 91 89 00 	lds	r25, 0x0089
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	44 e6       	ldi	r20, 0x64	; 100
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xQueueGenericReceive>
     2fc:	88 23       	and	r24, r24
     2fe:	99 f3       	breq	.-26     	; 0x2e6 <PushButton2+0x56>

				 /*Change the State **/
				 ButtonState2 = 0;
     300:	10 92 85 00 	sts	0x0085, r1

				 /**Give the Semaphore */

				 xSemaphoreGive(ButtonSemaphore);
     304:	80 91 88 00 	lds	r24, 0x0088
     308:	90 91 89 00 	lds	r25, 0x0089
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>

				 xSemaphoreGive(Button2Semaphore);
     31a:	80 91 8a 00 	lds	r24, 0x008A
     31e:	90 91 8b 00 	lds	r25, 0x008B
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>


		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
     330:	ce 01       	movw	r24, r28
     332:	03 96       	adiw	r24, 0x03	; 3
     334:	29 81       	ldd	r18, Y+1	; 0x01
     336:	3a 81       	ldd	r19, Y+2	; 0x02
     338:	b9 01       	movw	r22, r18
     33a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <vTaskDelayUntil>
     33e:	b9 cf       	rjmp	.-142    	; 0x2b2 <PushButton2+0x22>

00000340 <Led>:

 }
 }


 void Led(void * pvparam){
     340:	df 93       	push	r29
     342:	cf 93       	push	r28
     344:	00 d0       	rcall	.+0      	; 0x346 <Led+0x6>
     346:	00 d0       	rcall	.+0      	; 0x348 <Led+0x8>
     348:	00 d0       	rcall	.+0      	; 0x34a <Led+0xa>
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	9e 83       	std	Y+6, r25	; 0x06
     350:	8d 83       	std	Y+5, r24	; 0x05
	 portTickType Freq = 100;
     352:	84 e6       	ldi	r24, 0x64	; 100
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
	 portTickType Start = xTaskGetTickCount();
     35a:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskGetTickCount>
     35e:	9c 83       	std	Y+4, r25	; 0x04
     360:	8b 83       	std	Y+3, r24	; 0x03
	 while (1){
		 /* if the Push Button is Pressed */

			 /* If the Resource No One is Using so Take the Semaphore  **/
			 if(pdTRUE == xSemaphoreTake(ButtonSemaphore,100)){
     362:	80 91 88 00 	lds	r24, 0x0088
     366:	90 91 89 00 	lds	r25, 0x0089
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	44 e6       	ldi	r20, 0x64	; 100
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xQueueGenericReceive>
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	99 f7       	brne	.-26     	; 0x362 <Led+0x22>

				 vTaskDelay(1000);
     37c:	88 ee       	ldi	r24, 0xE8	; 232
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <vTaskDelay>

				 while(pdFALSE == xSemaphoreTake(Button2Semaphore,100));
     384:	80 91 8a 00 	lds	r24, 0x008A
     388:	90 91 8b 00 	lds	r25, 0x008B
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	44 e6       	ldi	r20, 0x64	; 100
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xQueueGenericReceive>
     39a:	88 23       	and	r24, r24
     39c:	99 f3       	breq	.-26     	; 0x384 <Led+0x44>

				 if (ButtonState == 0 && ButtonState2 == 0){
     39e:	80 91 84 00 	lds	r24, 0x0084
     3a2:	88 23       	and	r24, r24
     3a4:	91 f4       	brne	.+36     	; 0x3ca <Led+0x8a>
     3a6:	80 91 85 00 	lds	r24, 0x0085
     3aa:	88 23       	and	r24, r24
     3ac:	71 f4       	brne	.+28     	; 0x3ca <Led+0x8a>
					 PORTB ^= 0x01;
     3ae:	a8 e3       	ldi	r26, 0x38	; 56
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	e8 e3       	ldi	r30, 0x38	; 56
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	90 81       	ld	r25, Z
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	89 27       	eor	r24, r25
     3bc:	8c 93       	st	X, r24
					 ButtonState = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 93 84 00 	sts	0x0084, r24
					 ButtonState2 = 1;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 85 00 	sts	0x0085, r24
				 }

				 /**Give the Semaphore */
				 xSemaphoreGive(Button2Semaphore);
     3ca:	80 91 8a 00 	lds	r24, 0x008A
     3ce:	90 91 8b 00 	lds	r25, 0x008B
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>
				 xSemaphoreGive(ButtonSemaphore);
     3e0:	80 91 88 00 	lds	r24, 0x0088
     3e4:	90 91 89 00 	lds	r25, 0x0089
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <xQueueGenericSend>

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
     3f6:	ce 01       	movw	r24, r28
     3f8:	03 96       	adiw	r24, 0x03	; 3
     3fa:	29 81       	ldd	r18, Y+1	; 0x01
     3fc:	3a 81       	ldd	r19, Y+2	; 0x02
     3fe:	b9 01       	movw	r22, r18
     400:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <vTaskDelayUntil>
     404:	ae cf       	rjmp	.-164    	; 0x362 <Led+0x22>

00000406 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     406:	df 93       	push	r29
     408:	cf 93       	push	r28
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	27 97       	sbiw	r28, 0x07	; 7
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	9d 83       	std	Y+5, r25	; 0x05
     41c:	8c 83       	std	Y+4, r24	; 0x04
     41e:	6e 83       	std	Y+6, r22	; 0x06
     420:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     422:	8a e1       	ldi	r24, 0x1A	; 26
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 db 04 	call	0x9b6	; 0x9b6 <pvPortMalloc>
     42a:	9a 83       	std	Y+2, r25	; 0x02
     42c:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	09 f4       	brne	.+2      	; 0x438 <xCoRoutineCreate+0x32>
     436:	6f c0       	rjmp	.+222    	; 0x516 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     438:	80 91 8c 00 	lds	r24, 0x008C
     43c:	90 91 8d 00 	lds	r25, 0x008D
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	41 f4       	brne	.+16     	; 0x454 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	90 93 8d 00 	sts	0x008D, r25
     44c:	80 93 8c 00 	sts	0x008C, r24
			prvInitialiseCoRoutineLists();
     450:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     454:	8e 81       	ldd	r24, Y+6	; 0x06
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	10 f0       	brcs	.+4      	; 0x45e <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     45e:	e9 81       	ldd	r30, Y+1	; 0x01
     460:	fa 81       	ldd	r31, Y+2	; 0x02
     462:	11 8e       	std	Z+25, r1	; 0x19
     464:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     466:	e9 81       	ldd	r30, Y+1	; 0x01
     468:	fa 81       	ldd	r31, Y+2	; 0x02
     46a:	8e 81       	ldd	r24, Y+6	; 0x06
     46c:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     46e:	e9 81       	ldd	r30, Y+1	; 0x01
     470:	fa 81       	ldd	r31, Y+2	; 0x02
     472:	8f 81       	ldd	r24, Y+7	; 0x07
     474:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     476:	e9 81       	ldd	r30, Y+1	; 0x01
     478:	fa 81       	ldd	r31, Y+2	; 0x02
     47a:	8c 81       	ldd	r24, Y+4	; 0x04
     47c:	9d 81       	ldd	r25, Y+5	; 0x05
     47e:	91 83       	std	Z+1, r25	; 0x01
     480:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	02 96       	adiw	r24, 0x02	; 2
     488:	0e 94 71 05 	call	0xae2	; 0xae2 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
     490:	0c 96       	adiw	r24, 0x0c	; 12
     492:	0e 94 71 05 	call	0xae2	; 0xae2 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     496:	e9 81       	ldd	r30, Y+1	; 0x01
     498:	fa 81       	ldd	r31, Y+2	; 0x02
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	91 87       	std	Z+9, r25	; 0x09
     4a0:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	93 8b       	std	Z+19, r25	; 0x13
     4ac:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     4ae:	8e 81       	ldd	r24, Y+6	; 0x06
     4b0:	28 2f       	mov	r18, r24
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	85 e0       	ldi	r24, 0x05	; 5
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	82 1b       	sub	r24, r18
     4ba:	93 0b       	sbc	r25, r19
     4bc:	e9 81       	ldd	r30, Y+1	; 0x01
     4be:	fa 81       	ldd	r31, Y+2	; 0x02
     4c0:	95 87       	std	Z+13, r25	; 0x0d
     4c2:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     4c4:	e9 81       	ldd	r30, Y+1	; 0x01
     4c6:	fa 81       	ldd	r31, Y+2	; 0x02
     4c8:	96 89       	ldd	r25, Z+22	; 0x16
     4ca:	80 91 8e 00 	lds	r24, 0x008E
     4ce:	89 17       	cp	r24, r25
     4d0:	28 f4       	brcc	.+10     	; 0x4dc <xCoRoutineCreate+0xd6>
     4d2:	e9 81       	ldd	r30, Y+1	; 0x01
     4d4:	fa 81       	ldd	r31, Y+2	; 0x02
     4d6:	86 89       	ldd	r24, Z+22	; 0x16
     4d8:	80 93 8e 00 	sts	0x008E, r24
     4dc:	e9 81       	ldd	r30, Y+1	; 0x01
     4de:	fa 81       	ldd	r31, Y+2	; 0x02
     4e0:	86 89       	ldd	r24, Z+22	; 0x16
     4e2:	28 2f       	mov	r18, r24
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	c9 01       	movw	r24, r18
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	82 0f       	add	r24, r18
     4f6:	93 1f       	adc	r25, r19
     4f8:	ac 01       	movw	r20, r24
     4fa:	4b 56       	subi	r20, 0x6B	; 107
     4fc:	5f 4f       	sbci	r21, 0xFF	; 255
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	9c 01       	movw	r18, r24
     504:	2e 5f       	subi	r18, 0xFE	; 254
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	ca 01       	movw	r24, r20
     50a:	b9 01       	movw	r22, r18
     50c:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>

		xReturn = pdPASS;
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	8b 83       	std	Y+3, r24	; 0x03
     514:	02 c0       	rjmp	.+4      	; 0x51a <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     516:	8f ef       	ldi	r24, 0xFF	; 255
     518:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     51c:	27 96       	adiw	r28, 0x07	; 7
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	cf 91       	pop	r28
     52a:	df 91       	pop	r29
     52c:	08 95       	ret

0000052e <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	00 d0       	rcall	.+0      	; 0x534 <vCoRoutineAddToDelayedList+0x6>
     534:	00 d0       	rcall	.+0      	; 0x536 <vCoRoutineAddToDelayedList+0x8>
     536:	00 d0       	rcall	.+0      	; 0x538 <vCoRoutineAddToDelayedList+0xa>
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	9c 83       	std	Y+4, r25	; 0x04
     53e:	8b 83       	std	Y+3, r24	; 0x03
     540:	7e 83       	std	Y+6, r23	; 0x06
     542:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     544:	20 91 8f 00 	lds	r18, 0x008F
     548:	30 91 90 00 	lds	r19, 0x0090
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	82 0f       	add	r24, r18
     552:	93 1f       	adc	r25, r19
     554:	9a 83       	std	Y+2, r25	; 0x02
     556:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     558:	80 91 8c 00 	lds	r24, 0x008C
     55c:	90 91 8d 00 	lds	r25, 0x008D
     560:	02 96       	adiw	r24, 0x02	; 2
     562:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     566:	e0 91 8c 00 	lds	r30, 0x008C
     56a:	f0 91 8d 00 	lds	r31, 0x008D
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	9a 81       	ldd	r25, Y+2	; 0x02
     572:	93 83       	std	Z+3, r25	; 0x03
     574:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     576:	20 91 8f 00 	lds	r18, 0x008F
     57a:	30 91 90 00 	lds	r19, 0x0090
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	82 17       	cp	r24, r18
     584:	93 07       	cpc	r25, r19
     586:	70 f4       	brcc	.+28     	; 0x5a4 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     588:	80 91 bb 00 	lds	r24, 0x00BB
     58c:	90 91 bc 00 	lds	r25, 0x00BC
     590:	20 91 8c 00 	lds	r18, 0x008C
     594:	30 91 8d 00 	lds	r19, 0x008D
     598:	2e 5f       	subi	r18, 0xFE	; 254
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	b9 01       	movw	r22, r18
     59e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <vListInsert>
     5a2:	0d c0       	rjmp	.+26     	; 0x5be <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     5a4:	80 91 b9 00 	lds	r24, 0x00B9
     5a8:	90 91 ba 00 	lds	r25, 0x00BA
     5ac:	20 91 8c 00 	lds	r18, 0x008C
     5b0:	30 91 8d 00 	lds	r19, 0x008D
     5b4:	2e 5f       	subi	r18, 0xFE	; 254
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	b9 01       	movw	r22, r18
     5ba:	0e 94 cd 05 	call	0xb9a	; 0xb9a <vListInsert>
	}

	if( pxEventList )
     5be:	8d 81       	ldd	r24, Y+5	; 0x05
     5c0:	9e 81       	ldd	r25, Y+6	; 0x06
     5c2:	00 97       	sbiw	r24, 0x00	; 0
     5c4:	61 f0       	breq	.+24     	; 0x5de <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     5c6:	80 91 8c 00 	lds	r24, 0x008C
     5ca:	90 91 8d 00 	lds	r25, 0x008D
     5ce:	9c 01       	movw	r18, r24
     5d0:	24 5f       	subi	r18, 0xF4	; 244
     5d2:	3f 4f       	sbci	r19, 0xFF	; 255
     5d4:	8d 81       	ldd	r24, Y+5	; 0x05
     5d6:	9e 81       	ldd	r25, Y+6	; 0x06
     5d8:	b9 01       	movw	r22, r18
     5da:	0e 94 cd 05 	call	0xb9a	; 0xb9a <vListInsert>
	}
}
     5de:	26 96       	adiw	r28, 0x06	; 6
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	cf 91       	pop	r28
     5ec:	df 91       	pop	r29
     5ee:	08 95       	ret

000005f0 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <prvCheckPendingReadyList+0x6>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	3a c0       	rjmp	.+116    	; 0x670 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     5fc:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     5fe:	e0 91 c2 00 	lds	r30, 0x00C2
     602:	f0 91 c3 00 	lds	r31, 0x00C3
     606:	86 81       	ldd	r24, Z+6	; 0x06
     608:	97 81       	ldd	r25, Z+7	; 0x07
     60a:	9a 83       	std	Y+2, r25	; 0x02
     60c:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	0c 96       	adiw	r24, 0x0c	; 12
     614:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
		}
		portENABLE_INTERRUPTS();
     618:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	02 96       	adiw	r24, 0x02	; 2
     620:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     624:	e9 81       	ldd	r30, Y+1	; 0x01
     626:	fa 81       	ldd	r31, Y+2	; 0x02
     628:	96 89       	ldd	r25, Z+22	; 0x16
     62a:	80 91 8e 00 	lds	r24, 0x008E
     62e:	89 17       	cp	r24, r25
     630:	28 f4       	brcc	.+10     	; 0x63c <prvCheckPendingReadyList+0x4c>
     632:	e9 81       	ldd	r30, Y+1	; 0x01
     634:	fa 81       	ldd	r31, Y+2	; 0x02
     636:	86 89       	ldd	r24, Z+22	; 0x16
     638:	80 93 8e 00 	sts	0x008E, r24
     63c:	e9 81       	ldd	r30, Y+1	; 0x01
     63e:	fa 81       	ldd	r31, Y+2	; 0x02
     640:	86 89       	ldd	r24, Z+22	; 0x16
     642:	28 2f       	mov	r18, r24
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	c9 01       	movw	r24, r18
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	82 0f       	add	r24, r18
     656:	93 1f       	adc	r25, r19
     658:	ac 01       	movw	r20, r24
     65a:	4b 56       	subi	r20, 0x6B	; 107
     65c:	5f 4f       	sbci	r21, 0xFF	; 255
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	9c 01       	movw	r18, r24
     664:	2e 5f       	subi	r18, 0xFE	; 254
     666:	3f 4f       	sbci	r19, 0xFF	; 255
     668:	ca 01       	movw	r24, r20
     66a:	b9 01       	movw	r22, r18
     66c:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     670:	80 91 bd 00 	lds	r24, 0x00BD
     674:	88 23       	and	r24, r24
     676:	09 f0       	breq	.+2      	; 0x67a <prvCheckPendingReadyList+0x8a>
     678:	c1 cf       	rjmp	.-126    	; 0x5fc <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	cf 91       	pop	r28
     680:	df 91       	pop	r29
     682:	08 95       	ret

00000684 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     684:	df 93       	push	r29
     686:	cf 93       	push	r28
     688:	00 d0       	rcall	.+0      	; 0x68a <prvCheckDelayedList+0x6>
     68a:	00 d0       	rcall	.+0      	; 0x68c <prvCheckDelayedList+0x8>
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     690:	0e 94 a7 10 	call	0x214e	; 0x214e <xTaskGetTickCount>
     694:	20 91 91 00 	lds	r18, 0x0091
     698:	30 91 92 00 	lds	r19, 0x0092
     69c:	82 1b       	sub	r24, r18
     69e:	93 0b       	sbc	r25, r19
     6a0:	90 93 94 00 	sts	0x0094, r25
     6a4:	80 93 93 00 	sts	0x0093, r24
     6a8:	85 c0       	rjmp	.+266    	; 0x7b4 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     6aa:	80 91 8f 00 	lds	r24, 0x008F
     6ae:	90 91 90 00 	lds	r25, 0x0090
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	90 93 90 00 	sts	0x0090, r25
     6b8:	80 93 8f 00 	sts	0x008F, r24
		xPassedTicks--;
     6bc:	80 91 93 00 	lds	r24, 0x0093
     6c0:	90 91 94 00 	lds	r25, 0x0094
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	90 93 94 00 	sts	0x0094, r25
     6ca:	80 93 93 00 	sts	0x0093, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     6ce:	80 91 8f 00 	lds	r24, 0x008F
     6d2:	90 91 90 00 	lds	r25, 0x0090
     6d6:	00 97       	sbiw	r24, 0x00	; 0
     6d8:	09 f0       	breq	.+2      	; 0x6dc <prvCheckDelayedList+0x58>
     6da:	64 c0       	rjmp	.+200    	; 0x7a4 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     6dc:	80 91 b9 00 	lds	r24, 0x00B9
     6e0:	90 91 ba 00 	lds	r25, 0x00BA
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     6e8:	80 91 bb 00 	lds	r24, 0x00BB
     6ec:	90 91 bc 00 	lds	r25, 0x00BC
     6f0:	90 93 ba 00 	sts	0x00BA, r25
     6f4:	80 93 b9 00 	sts	0x00B9, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	90 93 bc 00 	sts	0x00BC, r25
     700:	80 93 bb 00 	sts	0x00BB, r24
     704:	4f c0       	rjmp	.+158    	; 0x7a4 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     706:	e0 91 b9 00 	lds	r30, 0x00B9
     70a:	f0 91 ba 00 	lds	r31, 0x00BA
     70e:	05 80       	ldd	r0, Z+5	; 0x05
     710:	f6 81       	ldd	r31, Z+6	; 0x06
     712:	e0 2d       	mov	r30, r0
     714:	86 81       	ldd	r24, Z+6	; 0x06
     716:	97 81       	ldd	r25, Z+7	; 0x07
     718:	9c 83       	std	Y+4, r25	; 0x04
     71a:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     71c:	eb 81       	ldd	r30, Y+3	; 0x03
     71e:	fc 81       	ldd	r31, Y+4	; 0x04
     720:	22 81       	ldd	r18, Z+2	; 0x02
     722:	33 81       	ldd	r19, Z+3	; 0x03
     724:	80 91 8f 00 	lds	r24, 0x008F
     728:	90 91 90 00 	lds	r25, 0x0090
     72c:	82 17       	cp	r24, r18
     72e:	93 07       	cpc	r25, r19
     730:	08 f4       	brcc	.+2      	; 0x734 <prvCheckDelayedList+0xb0>
     732:	40 c0       	rjmp	.+128    	; 0x7b4 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     734:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	9c 81       	ldd	r25, Y+4	; 0x04
     73a:	02 96       	adiw	r24, 0x02	; 2
     73c:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     740:	eb 81       	ldd	r30, Y+3	; 0x03
     742:	fc 81       	ldd	r31, Y+4	; 0x04
     744:	84 89       	ldd	r24, Z+20	; 0x14
     746:	95 89       	ldd	r25, Z+21	; 0x15
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	29 f0       	breq	.+10     	; 0x756 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     74c:	8b 81       	ldd	r24, Y+3	; 0x03
     74e:	9c 81       	ldd	r25, Y+4	; 0x04
     750:	0c 96       	adiw	r24, 0x0c	; 12
     752:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     756:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     758:	eb 81       	ldd	r30, Y+3	; 0x03
     75a:	fc 81       	ldd	r31, Y+4	; 0x04
     75c:	96 89       	ldd	r25, Z+22	; 0x16
     75e:	80 91 8e 00 	lds	r24, 0x008E
     762:	89 17       	cp	r24, r25
     764:	28 f4       	brcc	.+10     	; 0x770 <prvCheckDelayedList+0xec>
     766:	eb 81       	ldd	r30, Y+3	; 0x03
     768:	fc 81       	ldd	r31, Y+4	; 0x04
     76a:	86 89       	ldd	r24, Z+22	; 0x16
     76c:	80 93 8e 00 	sts	0x008E, r24
     770:	eb 81       	ldd	r30, Y+3	; 0x03
     772:	fc 81       	ldd	r31, Y+4	; 0x04
     774:	86 89       	ldd	r24, Z+22	; 0x16
     776:	28 2f       	mov	r18, r24
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	c9 01       	movw	r24, r18
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	ac 01       	movw	r20, r24
     78e:	4b 56       	subi	r20, 0x6B	; 107
     790:	5f 4f       	sbci	r21, 0xFF	; 255
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	9c 81       	ldd	r25, Y+4	; 0x04
     796:	9c 01       	movw	r18, r24
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	ca 01       	movw	r24, r20
     79e:	b9 01       	movw	r22, r18
     7a0:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     7a4:	e0 91 b9 00 	lds	r30, 0x00B9
     7a8:	f0 91 ba 00 	lds	r31, 0x00BA
     7ac:	80 81       	ld	r24, Z
     7ae:	88 23       	and	r24, r24
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <prvCheckDelayedList+0x130>
     7b2:	a9 cf       	rjmp	.-174    	; 0x706 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     7b4:	80 91 93 00 	lds	r24, 0x0093
     7b8:	90 91 94 00 	lds	r25, 0x0094
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	09 f0       	breq	.+2      	; 0x7c2 <prvCheckDelayedList+0x13e>
     7c0:	74 cf       	rjmp	.-280    	; 0x6aa <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     7c2:	80 91 8f 00 	lds	r24, 0x008F
     7c6:	90 91 90 00 	lds	r25, 0x0090
     7ca:	90 93 92 00 	sts	0x0092, r25
     7ce:	80 93 91 00 	sts	0x0091, r24
}
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	cf 91       	pop	r28
     7dc:	df 91       	pop	r29
     7de:	08 95       	ret

000007e0 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <vCoRoutineSchedule+0x6>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     7ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     7ee:	0e 94 42 03 	call	0x684	; 0x684 <prvCheckDelayedList>
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     7f4:	80 91 8e 00 	lds	r24, 0x008E
     7f8:	88 23       	and	r24, r24
     7fa:	09 f4       	brne	.+2      	; 0x7fe <vCoRoutineSchedule+0x1e>
     7fc:	66 c0       	rjmp	.+204    	; 0x8ca <__stack+0x6b>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     7fe:	80 91 8e 00 	lds	r24, 0x008E
     802:	81 50       	subi	r24, 0x01	; 1
     804:	80 93 8e 00 	sts	0x008E, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     808:	80 91 8e 00 	lds	r24, 0x008E
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	c9 01       	movw	r24, r18
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	fc 01       	movw	r30, r24
     824:	eb 56       	subi	r30, 0x6B	; 107
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	80 81       	ld	r24, Z
     82a:	88 23       	and	r24, r24
     82c:	19 f3       	breq	.-58     	; 0x7f4 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     82e:	80 91 8e 00 	lds	r24, 0x008E
     832:	28 2f       	mov	r18, r24
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	c9 01       	movw	r24, r18
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	82 0f       	add	r24, r18
     846:	93 1f       	adc	r25, r19
     848:	8b 56       	subi	r24, 0x6B	; 107
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01
     850:	e9 81       	ldd	r30, Y+1	; 0x01
     852:	fa 81       	ldd	r31, Y+2	; 0x02
     854:	01 80       	ldd	r0, Z+1	; 0x01
     856:	f2 81       	ldd	r31, Z+2	; 0x02
     858:	e0 2d       	mov	r30, r0
     85a:	82 81       	ldd	r24, Z+2	; 0x02
     85c:	93 81       	ldd	r25, Z+3	; 0x03
     85e:	e9 81       	ldd	r30, Y+1	; 0x01
     860:	fa 81       	ldd	r31, Y+2	; 0x02
     862:	92 83       	std	Z+2, r25	; 0x02
     864:	81 83       	std	Z+1, r24	; 0x01
     866:	e9 81       	ldd	r30, Y+1	; 0x01
     868:	fa 81       	ldd	r31, Y+2	; 0x02
     86a:	21 81       	ldd	r18, Z+1	; 0x01
     86c:	32 81       	ldd	r19, Z+2	; 0x02
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	9a 81       	ldd	r25, Y+2	; 0x02
     872:	03 96       	adiw	r24, 0x03	; 3
     874:	28 17       	cp	r18, r24
     876:	39 07       	cpc	r19, r25
     878:	59 f4       	brne	.+22     	; 0x890 <__stack+0x31>
     87a:	e9 81       	ldd	r30, Y+1	; 0x01
     87c:	fa 81       	ldd	r31, Y+2	; 0x02
     87e:	01 80       	ldd	r0, Z+1	; 0x01
     880:	f2 81       	ldd	r31, Z+2	; 0x02
     882:	e0 2d       	mov	r30, r0
     884:	82 81       	ldd	r24, Z+2	; 0x02
     886:	93 81       	ldd	r25, Z+3	; 0x03
     888:	e9 81       	ldd	r30, Y+1	; 0x01
     88a:	fa 81       	ldd	r31, Y+2	; 0x02
     88c:	92 83       	std	Z+2, r25	; 0x02
     88e:	81 83       	std	Z+1, r24	; 0x01
     890:	e9 81       	ldd	r30, Y+1	; 0x01
     892:	fa 81       	ldd	r31, Y+2	; 0x02
     894:	01 80       	ldd	r0, Z+1	; 0x01
     896:	f2 81       	ldd	r31, Z+2	; 0x02
     898:	e0 2d       	mov	r30, r0
     89a:	86 81       	ldd	r24, Z+6	; 0x06
     89c:	97 81       	ldd	r25, Z+7	; 0x07
     89e:	90 93 8d 00 	sts	0x008D, r25
     8a2:	80 93 8c 00 	sts	0x008C, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     8a6:	e0 91 8c 00 	lds	r30, 0x008C
     8aa:	f0 91 8d 00 	lds	r31, 0x008D
     8ae:	40 81       	ld	r20, Z
     8b0:	51 81       	ldd	r21, Z+1	; 0x01
     8b2:	80 91 8c 00 	lds	r24, 0x008C
     8b6:	90 91 8d 00 	lds	r25, 0x008D
     8ba:	e0 91 8c 00 	lds	r30, 0x008C
     8be:	f0 91 8d 00 	lds	r31, 0x008D
     8c2:	27 89       	ldd	r18, Z+23	; 0x17
     8c4:	62 2f       	mov	r22, r18
     8c6:	fa 01       	movw	r30, r20
     8c8:	09 95       	icall

	return;
}
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	08 95       	ret

000008d4 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     8d4:	df 93       	push	r29
     8d6:	cf 93       	push	r28
     8d8:	0f 92       	push	r0
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     8de:	19 82       	std	Y+1, r1	; 0x01
     8e0:	13 c0       	rjmp	.+38     	; 0x908 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	28 2f       	mov	r18, r24
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	c9 01       	movw	r24, r18
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	8b 56       	subi	r24, 0x6B	; 107
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	8f 5f       	subi	r24, 0xFF	; 255
     906:	89 83       	std	Y+1, r24	; 0x01
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	50 f3       	brcs	.-44     	; 0x8e2 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     90e:	87 ea       	ldi	r24, 0xA7	; 167
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     916:	80 eb       	ldi	r24, 0xB0	; 176
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     91e:	8d eb       	ldi	r24, 0xBD	; 189
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     926:	87 ea       	ldi	r24, 0xA7	; 167
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 ba 00 	sts	0x00BA, r25
     92e:	80 93 b9 00 	sts	0x00B9, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     932:	80 eb       	ldi	r24, 0xB0	; 176
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	90 93 bc 00 	sts	0x00BC, r25
     93a:	80 93 bb 00 	sts	0x00BB, r24
}
     93e:	0f 90       	pop	r0
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	08 95       	ret

00000946 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     946:	df 93       	push	r29
     948:	cf 93       	push	r28
     94a:	00 d0       	rcall	.+0      	; 0x94c <xCoRoutineRemoveFromEventList+0x6>
     94c:	00 d0       	rcall	.+0      	; 0x94e <xCoRoutineRemoveFromEventList+0x8>
     94e:	0f 92       	push	r0
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	9d 83       	std	Y+5, r25	; 0x05
     956:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     958:	ec 81       	ldd	r30, Y+4	; 0x04
     95a:	fd 81       	ldd	r31, Y+5	; 0x05
     95c:	05 80       	ldd	r0, Z+5	; 0x05
     95e:	f6 81       	ldd	r31, Z+6	; 0x06
     960:	e0 2d       	mov	r30, r0
     962:	86 81       	ldd	r24, Z+6	; 0x06
     964:	97 81       	ldd	r25, Z+7	; 0x07
     966:	9b 83       	std	Y+3, r25	; 0x03
     968:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	9b 81       	ldd	r25, Y+3	; 0x03
     96e:	0c 96       	adiw	r24, 0x0c	; 12
     970:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	9b 81       	ldd	r25, Y+3	; 0x03
     978:	9c 01       	movw	r18, r24
     97a:	24 5f       	subi	r18, 0xF4	; 244
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	8d eb       	ldi	r24, 0xBD	; 189
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	b9 01       	movw	r22, r18
     984:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     988:	ea 81       	ldd	r30, Y+2	; 0x02
     98a:	fb 81       	ldd	r31, Y+3	; 0x03
     98c:	96 89       	ldd	r25, Z+22	; 0x16
     98e:	e0 91 8c 00 	lds	r30, 0x008C
     992:	f0 91 8d 00 	lds	r31, 0x008D
     996:	86 89       	ldd	r24, Z+22	; 0x16
     998:	98 17       	cp	r25, r24
     99a:	18 f0       	brcs	.+6      	; 0x9a2 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	89 83       	std	Y+1, r24	; 0x01
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     9a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
}
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	cf 91       	pop	r28
     9b2:	df 91       	pop	r29
     9b4:	08 95       	ret

000009b6 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <pvPortMalloc+0x6>
     9bc:	00 d0       	rcall	.+0      	; 0x9be <pvPortMalloc+0x8>
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	9c 83       	std	Y+4, r25	; 0x04
     9c4:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     9c6:	1a 82       	std	Y+2, r1	; 0x02
     9c8:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     9ca:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     9ce:	80 91 c6 00 	lds	r24, 0x00C6
     9d2:	90 91 c7 00 	lds	r25, 0x00C7
     9d6:	2b 81       	ldd	r18, Y+3	; 0x03
     9d8:	3c 81       	ldd	r19, Y+4	; 0x04
     9da:	82 0f       	add	r24, r18
     9dc:	93 1f       	adc	r25, r19
     9de:	22 e0       	ldi	r18, 0x02	; 2
     9e0:	88 35       	cpi	r24, 0x58	; 88
     9e2:	92 07       	cpc	r25, r18
     9e4:	18 f5       	brcc	.+70     	; 0xa2c <pvPortMalloc+0x76>
     9e6:	20 91 c6 00 	lds	r18, 0x00C6
     9ea:	30 91 c7 00 	lds	r19, 0x00C7
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	28 0f       	add	r18, r24
     9f4:	39 1f       	adc	r19, r25
     9f6:	80 91 c6 00 	lds	r24, 0x00C6
     9fa:	90 91 c7 00 	lds	r25, 0x00C7
     9fe:	82 17       	cp	r24, r18
     a00:	93 07       	cpc	r25, r19
     a02:	a0 f4       	brcc	.+40     	; 0xa2c <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     a04:	80 91 c6 00 	lds	r24, 0x00C6
     a08:	90 91 c7 00 	lds	r25, 0x00C7
     a0c:	88 53       	subi	r24, 0x38	; 56
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	9a 83       	std	Y+2, r25	; 0x02
     a12:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     a14:	20 91 c6 00 	lds	r18, 0x00C6
     a18:	30 91 c7 00 	lds	r19, 0x00C7
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	9c 81       	ldd	r25, Y+4	; 0x04
     a20:	82 0f       	add	r24, r18
     a22:	93 1f       	adc	r25, r19
     a24:	90 93 c7 00 	sts	0x00C7, r25
     a28:	80 93 c6 00 	sts	0x00C6, r24
		}	
	}
	xTaskResumeAll();
     a2c:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	08 95       	ret

00000a42 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	00 d0       	rcall	.+0      	; 0xa48 <vPortFree+0x6>
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	cf 91       	pop	r28
     a56:	df 91       	pop	r29
     a58:	08 95       	ret

00000a5a <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     a62:	10 92 c7 00 	sts	0x00C7, r1
     a66:	10 92 c6 00 	sts	0x00C6, r1
}
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     a78:	20 91 c6 00 	lds	r18, 0x00C6
     a7c:	30 91 c7 00 	lds	r19, 0x00C7
     a80:	88 e5       	ldi	r24, 0x58	; 88
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	82 1b       	sub	r24, r18
     a86:	93 0b       	sbc	r25, r19
}
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	00 d0       	rcall	.+0      	; 0xa94 <vListInitialise+0x6>
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	9a 83       	std	Y+2, r25	; 0x02
     a9a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	03 96       	adiw	r24, 0x03	; 3
     aa2:	e9 81       	ldd	r30, Y+1	; 0x01
     aa4:	fa 81       	ldd	r31, Y+2	; 0x02
     aa6:	92 83       	std	Z+2, r25	; 0x02
     aa8:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     aaa:	e9 81       	ldd	r30, Y+1	; 0x01
     aac:	fa 81       	ldd	r31, Y+2	; 0x02
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	94 83       	std	Z+4, r25	; 0x04
     ab4:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	03 96       	adiw	r24, 0x03	; 3
     abc:	e9 81       	ldd	r30, Y+1	; 0x01
     abe:	fa 81       	ldd	r31, Y+2	; 0x02
     ac0:	96 83       	std	Z+6, r25	; 0x06
     ac2:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	9a 81       	ldd	r25, Y+2	; 0x02
     ac8:	03 96       	adiw	r24, 0x03	; 3
     aca:	e9 81       	ldd	r30, Y+1	; 0x01
     acc:	fa 81       	ldd	r31, Y+2	; 0x02
     ace:	90 87       	std	Z+8, r25	; 0x08
     ad0:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     ad2:	e9 81       	ldd	r30, Y+1	; 0x01
     ad4:	fa 81       	ldd	r31, Y+2	; 0x02
     ad6:	10 82       	st	Z, r1
}
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	cf 91       	pop	r28
     ade:	df 91       	pop	r29
     ae0:	08 95       	ret

00000ae2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     ae2:	df 93       	push	r29
     ae4:	cf 93       	push	r28
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <vListInitialiseItem+0x6>
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	9a 83       	std	Y+2, r25	; 0x02
     aee:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     af0:	e9 81       	ldd	r30, Y+1	; 0x01
     af2:	fa 81       	ldd	r31, Y+2	; 0x02
     af4:	11 86       	std	Z+9, r1	; 0x09
     af6:	10 86       	std	Z+8, r1	; 0x08
}
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	cf 91       	pop	r28
     afe:	df 91       	pop	r29
     b00:	08 95       	ret

00000b02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     b02:	df 93       	push	r29
     b04:	cf 93       	push	r28
     b06:	00 d0       	rcall	.+0      	; 0xb08 <vListInsertEnd+0x6>
     b08:	00 d0       	rcall	.+0      	; 0xb0a <vListInsertEnd+0x8>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <vListInsertEnd+0xa>
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	8b 83       	std	Y+3, r24	; 0x03
     b14:	7e 83       	std	Y+6, r23	; 0x06
     b16:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     b18:	eb 81       	ldd	r30, Y+3	; 0x03
     b1a:	fc 81       	ldd	r31, Y+4	; 0x04
     b1c:	81 81       	ldd	r24, Z+1	; 0x01
     b1e:	92 81       	ldd	r25, Z+2	; 0x02
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     b24:	e9 81       	ldd	r30, Y+1	; 0x01
     b26:	fa 81       	ldd	r31, Y+2	; 0x02
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	93 81       	ldd	r25, Z+3	; 0x03
     b2c:	ed 81       	ldd	r30, Y+5	; 0x05
     b2e:	fe 81       	ldd	r31, Y+6	; 0x06
     b30:	93 83       	std	Z+3, r25	; 0x03
     b32:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     b34:	eb 81       	ldd	r30, Y+3	; 0x03
     b36:	fc 81       	ldd	r31, Y+4	; 0x04
     b38:	81 81       	ldd	r24, Z+1	; 0x01
     b3a:	92 81       	ldd	r25, Z+2	; 0x02
     b3c:	ed 81       	ldd	r30, Y+5	; 0x05
     b3e:	fe 81       	ldd	r31, Y+6	; 0x06
     b40:	95 83       	std	Z+5, r25	; 0x05
     b42:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     b44:	e9 81       	ldd	r30, Y+1	; 0x01
     b46:	fa 81       	ldd	r31, Y+2	; 0x02
     b48:	02 80       	ldd	r0, Z+2	; 0x02
     b4a:	f3 81       	ldd	r31, Z+3	; 0x03
     b4c:	e0 2d       	mov	r30, r0
     b4e:	8d 81       	ldd	r24, Y+5	; 0x05
     b50:	9e 81       	ldd	r25, Y+6	; 0x06
     b52:	95 83       	std	Z+5, r25	; 0x05
     b54:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     b56:	8d 81       	ldd	r24, Y+5	; 0x05
     b58:	9e 81       	ldd	r25, Y+6	; 0x06
     b5a:	e9 81       	ldd	r30, Y+1	; 0x01
     b5c:	fa 81       	ldd	r31, Y+2	; 0x02
     b5e:	93 83       	std	Z+3, r25	; 0x03
     b60:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     b62:	8d 81       	ldd	r24, Y+5	; 0x05
     b64:	9e 81       	ldd	r25, Y+6	; 0x06
     b66:	eb 81       	ldd	r30, Y+3	; 0x03
     b68:	fc 81       	ldd	r31, Y+4	; 0x04
     b6a:	92 83       	std	Z+2, r25	; 0x02
     b6c:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b6e:	ed 81       	ldd	r30, Y+5	; 0x05
     b70:	fe 81       	ldd	r31, Y+6	; 0x06
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	91 87       	std	Z+9, r25	; 0x09
     b78:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     b7a:	eb 81       	ldd	r30, Y+3	; 0x03
     b7c:	fc 81       	ldd	r31, Y+4	; 0x04
     b7e:	80 81       	ld	r24, Z
     b80:	8f 5f       	subi	r24, 0xFF	; 255
     b82:	eb 81       	ldd	r30, Y+3	; 0x03
     b84:	fc 81       	ldd	r31, Y+4	; 0x04
     b86:	80 83       	st	Z, r24
}
     b88:	26 96       	adiw	r28, 0x06	; 6
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	28 97       	sbiw	r28, 0x08	; 8
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	9e 83       	std	Y+6, r25	; 0x06
     bb0:	8d 83       	std	Y+5, r24	; 0x05
     bb2:	78 87       	std	Y+8, r23	; 0x08
     bb4:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     bb6:	ef 81       	ldd	r30, Y+7	; 0x07
     bb8:	f8 85       	ldd	r31, Y+8	; 0x08
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	2f ef       	ldi	r18, 0xFF	; 255
     bc8:	8f 3f       	cpi	r24, 0xFF	; 255
     bca:	92 07       	cpc	r25, r18
     bcc:	39 f4       	brne	.+14     	; 0xbdc <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     bce:	ed 81       	ldd	r30, Y+5	; 0x05
     bd0:	fe 81       	ldd	r31, Y+6	; 0x06
     bd2:	87 81       	ldd	r24, Z+7	; 0x07
     bd4:	90 85       	ldd	r25, Z+8	; 0x08
     bd6:	9c 83       	std	Y+4, r25	; 0x04
     bd8:	8b 83       	std	Y+3, r24	; 0x03
     bda:	18 c0       	rjmp	.+48     	; 0xc0c <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     bdc:	8d 81       	ldd	r24, Y+5	; 0x05
     bde:	9e 81       	ldd	r25, Y+6	; 0x06
     be0:	03 96       	adiw	r24, 0x03	; 3
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	8b 83       	std	Y+3, r24	; 0x03
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <vListInsert+0x5a>
     be8:	eb 81       	ldd	r30, Y+3	; 0x03
     bea:	fc 81       	ldd	r31, Y+4	; 0x04
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	9c 83       	std	Y+4, r25	; 0x04
     bf2:	8b 83       	std	Y+3, r24	; 0x03
     bf4:	eb 81       	ldd	r30, Y+3	; 0x03
     bf6:	fc 81       	ldd	r31, Y+4	; 0x04
     bf8:	02 80       	ldd	r0, Z+2	; 0x02
     bfa:	f3 81       	ldd	r31, Z+3	; 0x03
     bfc:	e0 2d       	mov	r30, r0
     bfe:	20 81       	ld	r18, Z
     c00:	31 81       	ldd	r19, Z+1	; 0x01
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	82 17       	cp	r24, r18
     c08:	93 07       	cpc	r25, r19
     c0a:	70 f7       	brcc	.-36     	; 0xbe8 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     c0c:	eb 81       	ldd	r30, Y+3	; 0x03
     c0e:	fc 81       	ldd	r31, Y+4	; 0x04
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	ef 81       	ldd	r30, Y+7	; 0x07
     c16:	f8 85       	ldd	r31, Y+8	; 0x08
     c18:	93 83       	std	Z+3, r25	; 0x03
     c1a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     c1c:	ef 81       	ldd	r30, Y+7	; 0x07
     c1e:	f8 85       	ldd	r31, Y+8	; 0x08
     c20:	02 80       	ldd	r0, Z+2	; 0x02
     c22:	f3 81       	ldd	r31, Z+3	; 0x03
     c24:	e0 2d       	mov	r30, r0
     c26:	8f 81       	ldd	r24, Y+7	; 0x07
     c28:	98 85       	ldd	r25, Y+8	; 0x08
     c2a:	95 83       	std	Z+5, r25	; 0x05
     c2c:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     c2e:	ef 81       	ldd	r30, Y+7	; 0x07
     c30:	f8 85       	ldd	r31, Y+8	; 0x08
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	95 83       	std	Z+5, r25	; 0x05
     c38:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     c3a:	8f 81       	ldd	r24, Y+7	; 0x07
     c3c:	98 85       	ldd	r25, Y+8	; 0x08
     c3e:	eb 81       	ldd	r30, Y+3	; 0x03
     c40:	fc 81       	ldd	r31, Y+4	; 0x04
     c42:	93 83       	std	Z+3, r25	; 0x03
     c44:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c46:	ef 81       	ldd	r30, Y+7	; 0x07
     c48:	f8 85       	ldd	r31, Y+8	; 0x08
     c4a:	8d 81       	ldd	r24, Y+5	; 0x05
     c4c:	9e 81       	ldd	r25, Y+6	; 0x06
     c4e:	91 87       	std	Z+9, r25	; 0x09
     c50:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     c52:	ed 81       	ldd	r30, Y+5	; 0x05
     c54:	fe 81       	ldd	r31, Y+6	; 0x06
     c56:	80 81       	ld	r24, Z
     c58:	8f 5f       	subi	r24, 0xFF	; 255
     c5a:	ed 81       	ldd	r30, Y+5	; 0x05
     c5c:	fe 81       	ldd	r31, Y+6	; 0x06
     c5e:	80 83       	st	Z, r24
}
     c60:	28 96       	adiw	r28, 0x08	; 8
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <vListRemove+0x6>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <vListRemove+0x8>
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	9c 83       	std	Y+4, r25	; 0x04
     c80:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c82:	eb 81       	ldd	r30, Y+3	; 0x03
     c84:	fc 81       	ldd	r31, Y+4	; 0x04
     c86:	a2 81       	ldd	r26, Z+2	; 0x02
     c88:	b3 81       	ldd	r27, Z+3	; 0x03
     c8a:	eb 81       	ldd	r30, Y+3	; 0x03
     c8c:	fc 81       	ldd	r31, Y+4	; 0x04
     c8e:	84 81       	ldd	r24, Z+4	; 0x04
     c90:	95 81       	ldd	r25, Z+5	; 0x05
     c92:	15 96       	adiw	r26, 0x05	; 5
     c94:	9c 93       	st	X, r25
     c96:	8e 93       	st	-X, r24
     c98:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c9a:	eb 81       	ldd	r30, Y+3	; 0x03
     c9c:	fc 81       	ldd	r31, Y+4	; 0x04
     c9e:	a4 81       	ldd	r26, Z+4	; 0x04
     ca0:	b5 81       	ldd	r27, Z+5	; 0x05
     ca2:	eb 81       	ldd	r30, Y+3	; 0x03
     ca4:	fc 81       	ldd	r31, Y+4	; 0x04
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	13 96       	adiw	r26, 0x03	; 3
     cac:	9c 93       	st	X, r25
     cae:	8e 93       	st	-X, r24
     cb0:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     cb2:	eb 81       	ldd	r30, Y+3	; 0x03
     cb4:	fc 81       	ldd	r31, Y+4	; 0x04
     cb6:	80 85       	ldd	r24, Z+8	; 0x08
     cb8:	91 85       	ldd	r25, Z+9	; 0x09
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	21 81       	ldd	r18, Z+1	; 0x01
     cc4:	32 81       	ldd	r19, Z+2	; 0x02
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	41 f4       	brne	.+16     	; 0xce0 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     cd0:	eb 81       	ldd	r30, Y+3	; 0x03
     cd2:	fc 81       	ldd	r31, Y+4	; 0x04
     cd4:	84 81       	ldd	r24, Z+4	; 0x04
     cd6:	95 81       	ldd	r25, Z+5	; 0x05
     cd8:	e9 81       	ldd	r30, Y+1	; 0x01
     cda:	fa 81       	ldd	r31, Y+2	; 0x02
     cdc:	92 83       	std	Z+2, r25	; 0x02
     cde:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     ce0:	eb 81       	ldd	r30, Y+3	; 0x03
     ce2:	fc 81       	ldd	r31, Y+4	; 0x04
     ce4:	11 86       	std	Z+9, r1	; 0x09
     ce6:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	80 81       	ld	r24, Z
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	80 83       	st	Z, r24
}
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	28 97       	sbiw	r28, 0x08	; 8
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	9c 83       	std	Y+4, r25	; 0x04
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	7e 83       	std	Y+6, r23	; 0x06
     d1e:	6d 83       	std	Y+5, r22	; 0x05
     d20:	58 87       	std	Y+8, r21	; 0x08
     d22:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     d24:	eb 81       	ldd	r30, Y+3	; 0x03
     d26:	fc 81       	ldd	r31, Y+4	; 0x04
     d28:	81 e1       	ldi	r24, 0x11	; 17
     d2a:	80 83       	st	Z, r24
	pxTopOfStack--;
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	9c 81       	ldd	r25, Y+4	; 0x04
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	9c 83       	std	Y+4, r25	; 0x04
     d34:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     d36:	eb 81       	ldd	r30, Y+3	; 0x03
     d38:	fc 81       	ldd	r31, Y+4	; 0x04
     d3a:	82 e2       	ldi	r24, 0x22	; 34
     d3c:	80 83       	st	Z, r24
	pxTopOfStack--;
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	9c 81       	ldd	r25, Y+4	; 0x04
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	9c 83       	std	Y+4, r25	; 0x04
     d46:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     d48:	eb 81       	ldd	r30, Y+3	; 0x03
     d4a:	fc 81       	ldd	r31, Y+4	; 0x04
     d4c:	83 e3       	ldi	r24, 0x33	; 51
     d4e:	80 83       	st	Z, r24
	pxTopOfStack--;
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	9a 83       	std	Y+2, r25	; 0x02
     d60:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	eb 81       	ldd	r30, Y+3	; 0x03
     d66:	fc 81       	ldd	r31, Y+4	; 0x04
     d68:	80 83       	st	Z, r24
	pxTopOfStack--;
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9c 83       	std	Y+4, r25	; 0x04
     d72:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	89 2f       	mov	r24, r25
     d7a:	99 27       	eor	r25, r25
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	eb 81       	ldd	r30, Y+3	; 0x03
     d84:	fc 81       	ldd	r31, Y+4	; 0x04
     d86:	80 83       	st	Z, r24
	pxTopOfStack--;
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	9c 83       	std	Y+4, r25	; 0x04
     d90:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     d92:	eb 81       	ldd	r30, Y+3	; 0x03
     d94:	fc 81       	ldd	r31, Y+4	; 0x04
     d96:	10 82       	st	Z, r1
	pxTopOfStack--;
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	9c 83       	std	Y+4, r25	; 0x04
     da0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     da2:	eb 81       	ldd	r30, Y+3	; 0x03
     da4:	fc 81       	ldd	r31, Y+4	; 0x04
     da6:	80 e8       	ldi	r24, 0x80	; 128
     da8:	80 83       	st	Z, r24
	pxTopOfStack--;
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	9c 83       	std	Y+4, r25	; 0x04
     db2:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     db4:	eb 81       	ldd	r30, Y+3	; 0x03
     db6:	fc 81       	ldd	r31, Y+4	; 0x04
     db8:	10 82       	st	Z, r1
	pxTopOfStack--;
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     dc4:	eb 81       	ldd	r30, Y+3	; 0x03
     dc6:	fc 81       	ldd	r31, Y+4	; 0x04
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	80 83       	st	Z, r24
	pxTopOfStack--;
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	9c 83       	std	Y+4, r25	; 0x04
     dd4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     dd6:	eb 81       	ldd	r30, Y+3	; 0x03
     dd8:	fc 81       	ldd	r31, Y+4	; 0x04
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	80 83       	st	Z, r24
	pxTopOfStack--;
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	84 e0       	ldi	r24, 0x04	; 4
     dee:	80 83       	st	Z, r24
	pxTopOfStack--;
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	9c 83       	std	Y+4, r25	; 0x04
     df8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     dfa:	eb 81       	ldd	r30, Y+3	; 0x03
     dfc:	fc 81       	ldd	r31, Y+4	; 0x04
     dfe:	85 e0       	ldi	r24, 0x05	; 5
     e00:	80 83       	st	Z, r24
	pxTopOfStack--;
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	9c 81       	ldd	r25, Y+4	; 0x04
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	9c 83       	std	Y+4, r25	; 0x04
     e0a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     e0c:	eb 81       	ldd	r30, Y+3	; 0x03
     e0e:	fc 81       	ldd	r31, Y+4	; 0x04
     e10:	86 e0       	ldi	r24, 0x06	; 6
     e12:	80 83       	st	Z, r24
	pxTopOfStack--;
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	9c 81       	ldd	r25, Y+4	; 0x04
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     e1e:	eb 81       	ldd	r30, Y+3	; 0x03
     e20:	fc 81       	ldd	r31, Y+4	; 0x04
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	80 83       	st	Z, r24
	pxTopOfStack--;
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	9c 81       	ldd	r25, Y+4	; 0x04
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	9c 83       	std	Y+4, r25	; 0x04
     e2e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     e30:	eb 81       	ldd	r30, Y+3	; 0x03
     e32:	fc 81       	ldd	r31, Y+4	; 0x04
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	80 83       	st	Z, r24
	pxTopOfStack--;
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	9c 83       	std	Y+4, r25	; 0x04
     e40:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     e42:	eb 81       	ldd	r30, Y+3	; 0x03
     e44:	fc 81       	ldd	r31, Y+4	; 0x04
     e46:	89 e0       	ldi	r24, 0x09	; 9
     e48:	80 83       	st	Z, r24
	pxTopOfStack--;
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	9c 83       	std	Y+4, r25	; 0x04
     e52:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     e54:	eb 81       	ldd	r30, Y+3	; 0x03
     e56:	fc 81       	ldd	r31, Y+4	; 0x04
     e58:	80 e1       	ldi	r24, 0x10	; 16
     e5a:	80 83       	st	Z, r24
	pxTopOfStack--;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     e66:	eb 81       	ldd	r30, Y+3	; 0x03
     e68:	fc 81       	ldd	r31, Y+4	; 0x04
     e6a:	81 e1       	ldi	r24, 0x11	; 17
     e6c:	80 83       	st	Z, r24
	pxTopOfStack--;
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     e78:	eb 81       	ldd	r30, Y+3	; 0x03
     e7a:	fc 81       	ldd	r31, Y+4	; 0x04
     e7c:	82 e1       	ldi	r24, 0x12	; 18
     e7e:	80 83       	st	Z, r24
	pxTopOfStack--;
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     e8a:	eb 81       	ldd	r30, Y+3	; 0x03
     e8c:	fc 81       	ldd	r31, Y+4	; 0x04
     e8e:	83 e1       	ldi	r24, 0x13	; 19
     e90:	80 83       	st	Z, r24
	pxTopOfStack--;
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     e9c:	eb 81       	ldd	r30, Y+3	; 0x03
     e9e:	fc 81       	ldd	r31, Y+4	; 0x04
     ea0:	84 e1       	ldi	r24, 0x14	; 20
     ea2:	80 83       	st	Z, r24
	pxTopOfStack--;
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     eae:	eb 81       	ldd	r30, Y+3	; 0x03
     eb0:	fc 81       	ldd	r31, Y+4	; 0x04
     eb2:	85 e1       	ldi	r24, 0x15	; 21
     eb4:	80 83       	st	Z, r24
	pxTopOfStack--;
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     ec0:	eb 81       	ldd	r30, Y+3	; 0x03
     ec2:	fc 81       	ldd	r31, Y+4	; 0x04
     ec4:	86 e1       	ldi	r24, 0x16	; 22
     ec6:	80 83       	st	Z, r24
	pxTopOfStack--;
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	9c 83       	std	Y+4, r25	; 0x04
     ed0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     ed2:	eb 81       	ldd	r30, Y+3	; 0x03
     ed4:	fc 81       	ldd	r31, Y+4	; 0x04
     ed6:	87 e1       	ldi	r24, 0x17	; 23
     ed8:	80 83       	st	Z, r24
	pxTopOfStack--;
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     ee4:	eb 81       	ldd	r30, Y+3	; 0x03
     ee6:	fc 81       	ldd	r31, Y+4	; 0x04
     ee8:	88 e1       	ldi	r24, 0x18	; 24
     eea:	80 83       	st	Z, r24
	pxTopOfStack--;
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     ef6:	eb 81       	ldd	r30, Y+3	; 0x03
     ef8:	fc 81       	ldd	r31, Y+4	; 0x04
     efa:	89 e1       	ldi	r24, 0x19	; 25
     efc:	80 83       	st	Z, r24
	pxTopOfStack--;
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	9c 83       	std	Y+4, r25	; 0x04
     f06:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     f08:	eb 81       	ldd	r30, Y+3	; 0x03
     f0a:	fc 81       	ldd	r31, Y+4	; 0x04
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	80 83       	st	Z, r24
	pxTopOfStack--;
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     f1a:	eb 81       	ldd	r30, Y+3	; 0x03
     f1c:	fc 81       	ldd	r31, Y+4	; 0x04
     f1e:	81 e2       	ldi	r24, 0x21	; 33
     f20:	80 83       	st	Z, r24
	pxTopOfStack--;
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     f2c:	eb 81       	ldd	r30, Y+3	; 0x03
     f2e:	fc 81       	ldd	r31, Y+4	; 0x04
     f30:	82 e2       	ldi	r24, 0x22	; 34
     f32:	80 83       	st	Z, r24
	pxTopOfStack--;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9c 83       	std	Y+4, r25	; 0x04
     f3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     f3e:	eb 81       	ldd	r30, Y+3	; 0x03
     f40:	fc 81       	ldd	r31, Y+4	; 0x04
     f42:	83 e2       	ldi	r24, 0x23	; 35
     f44:	80 83       	st	Z, r24
	pxTopOfStack--;
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	9c 83       	std	Y+4, r25	; 0x04
     f4e:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
     f50:	8f 81       	ldd	r24, Y+7	; 0x07
     f52:	98 85       	ldd	r25, Y+8	; 0x08
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	eb 81       	ldd	r30, Y+3	; 0x03
     f5c:	fc 81       	ldd	r31, Y+4	; 0x04
     f5e:	80 83       	st	Z, r24
	pxTopOfStack--;
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	89 2f       	mov	r24, r25
     f70:	99 27       	eor	r25, r25
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	eb 81       	ldd	r30, Y+3	; 0x03
     f7a:	fc 81       	ldd	r31, Y+4	; 0x04
     f7c:	80 83       	st	Z, r24
	pxTopOfStack--;
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     f88:	eb 81       	ldd	r30, Y+3	; 0x03
     f8a:	fc 81       	ldd	r31, Y+4	; 0x04
     f8c:	86 e2       	ldi	r24, 0x26	; 38
     f8e:	80 83       	st	Z, r24
	pxTopOfStack--;
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     f9a:	eb 81       	ldd	r30, Y+3	; 0x03
     f9c:	fc 81       	ldd	r31, Y+4	; 0x04
     f9e:	87 e2       	ldi	r24, 0x27	; 39
     fa0:	80 83       	st	Z, r24
	pxTopOfStack--;
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	9c 83       	std	Y+4, r25	; 0x04
     faa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     fac:	eb 81       	ldd	r30, Y+3	; 0x03
     fae:	fc 81       	ldd	r31, Y+4	; 0x04
     fb0:	88 e2       	ldi	r24, 0x28	; 40
     fb2:	80 83       	st	Z, r24
	pxTopOfStack--;
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     fbe:	eb 81       	ldd	r30, Y+3	; 0x03
     fc0:	fc 81       	ldd	r31, Y+4	; 0x04
     fc2:	89 e2       	ldi	r24, 0x29	; 41
     fc4:	80 83       	st	Z, r24
	pxTopOfStack--;
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	9c 83       	std	Y+4, r25	; 0x04
     fce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     fd0:	eb 81       	ldd	r30, Y+3	; 0x03
     fd2:	fc 81       	ldd	r31, Y+4	; 0x04
     fd4:	80 e3       	ldi	r24, 0x30	; 48
     fd6:	80 83       	st	Z, r24
	pxTopOfStack--;
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     fe2:	eb 81       	ldd	r30, Y+3	; 0x03
     fe4:	fc 81       	ldd	r31, Y+4	; 0x04
     fe6:	81 e3       	ldi	r24, 0x31	; 49
     fe8:	80 83       	st	Z, r24
	pxTopOfStack--;
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
}
     ff8:	28 96       	adiw	r28, 0x08	; 8
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    1012:	0e 94 f5 08 	call	0x11ea	; 0x11ea <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    1016:	a0 91 20 03 	lds	r26, 0x0320
    101a:	b0 91 21 03 	lds	r27, 0x0321
    101e:	cd 91       	ld	r28, X+
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	dd 91       	ld	r29, X+
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	9f 90       	pop	r9
    1054:	8f 90       	pop	r8
    1056:	7f 90       	pop	r7
    1058:	6f 90       	pop	r6
    105a:	5f 90       	pop	r5
    105c:	4f 90       	pop	r4
    105e:	3f 90       	pop	r3
    1060:	2f 90       	pop	r2
    1062:	1f 90       	pop	r1
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    106a:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    106c:	81 e0       	ldi	r24, 0x01	; 1
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1082:	0f 92       	push	r0
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	0f 92       	push	r0
    108a:	1f 92       	push	r1
    108c:	11 24       	eor	r1, r1
    108e:	2f 92       	push	r2
    1090:	3f 92       	push	r3
    1092:	4f 92       	push	r4
    1094:	5f 92       	push	r5
    1096:	6f 92       	push	r6
    1098:	7f 92       	push	r7
    109a:	8f 92       	push	r8
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	a0 91 20 03 	lds	r26, 0x0320
    10ce:	b0 91 21 03 	lds	r27, 0x0321
    10d2:	0d b6       	in	r0, 0x3d	; 61
    10d4:	0d 92       	st	X+, r0
    10d6:	0e b6       	in	r0, 0x3e	; 62
    10d8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    10da:	0e 94 b1 11 	call	0x2362	; 0x2362 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    10de:	a0 91 20 03 	lds	r26, 0x0320
    10e2:	b0 91 21 03 	lds	r27, 0x0321
    10e6:	cd 91       	ld	r28, X+
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	dd 91       	ld	r29, X+
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	ff 91       	pop	r31
    10f0:	ef 91       	pop	r30
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	df 90       	pop	r13
    1114:	cf 90       	pop	r12
    1116:	bf 90       	pop	r11
    1118:	af 90       	pop	r10
    111a:	9f 90       	pop	r9
    111c:	8f 90       	pop	r8
    111e:	7f 90       	pop	r7
    1120:	6f 90       	pop	r6
    1122:	5f 90       	pop	r5
    1124:	4f 90       	pop	r4
    1126:	3f 90       	pop	r3
    1128:	2f 90       	pop	r2
    112a:	1f 90       	pop	r1
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1132:	08 95       	ret

00001134 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1134:	0f 92       	push	r0
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	0f 92       	push	r0
    113c:	1f 92       	push	r1
    113e:	11 24       	eor	r1, r1
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ef 93       	push	r30
    117a:	ff 93       	push	r31
    117c:	a0 91 20 03 	lds	r26, 0x0320
    1180:	b0 91 21 03 	lds	r27, 0x0321
    1184:	0d b6       	in	r0, 0x3d	; 61
    1186:	0d 92       	st	X+, r0
    1188:	0e b6       	in	r0, 0x3e	; 62
    118a:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    118c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <vTaskIncrementTick>
	vTaskSwitchContext();
    1190:	0e 94 b1 11 	call	0x2362	; 0x2362 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1194:	a0 91 20 03 	lds	r26, 0x0320
    1198:	b0 91 21 03 	lds	r27, 0x0321
    119c:	cd 91       	ld	r28, X+
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	dd 91       	ld	r29, X+
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	5f 90       	pop	r5
    11da:	4f 90       	pop	r4
    11dc:	3f 90       	pop	r3
    11de:	2f 90       	pop	r2
    11e0:	1f 90       	pop	r1
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    11e8:	08 95       	ret

000011ea <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <prvSetupTimerInterrupt+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <prvSetupTimerInterrupt+0x8>
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <prvSetupTimerInterrupt+0xa>
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    11f8:	80 e4       	ldi	r24, 0x40	; 64
    11fa:	9f e1       	ldi	r25, 0x1F	; 31
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	8b 83       	std	Y+3, r24	; 0x03
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	ad 83       	std	Y+5, r26	; 0x05
    1206:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	ad 81       	ldd	r26, Y+5	; 0x05
    120e:	be 81       	ldd	r27, Y+6	; 0x06
    1210:	68 94       	set
    1212:	15 f8       	bld	r1, 5
    1214:	b6 95       	lsr	r27
    1216:	a7 95       	ror	r26
    1218:	97 95       	ror	r25
    121a:	87 95       	ror	r24
    121c:	16 94       	lsr	r1
    121e:	d1 f7       	brne	.-12     	; 0x1214 <prvSetupTimerInterrupt+0x2a>
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	9c 83       	std	Y+4, r25	; 0x04
    1224:	ad 83       	std	Y+5, r26	; 0x05
    1226:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	ad 81       	ldd	r26, Y+5	; 0x05
    122e:	be 81       	ldd	r27, Y+6	; 0x06
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	a1 09       	sbc	r26, r1
    1234:	b1 09       	sbc	r27, r1
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	ad 83       	std	Y+5, r26	; 0x05
    123c:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	ad 81       	ldd	r26, Y+5	; 0x05
    1248:	be 81       	ldd	r27, Y+6	; 0x06
    124a:	89 2f       	mov	r24, r25
    124c:	9a 2f       	mov	r25, r26
    124e:	ab 2f       	mov	r26, r27
    1250:	bb 27       	eor	r27, r27
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	ad 83       	std	Y+5, r26	; 0x05
    1258:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    125e:	eb e4       	ldi	r30, 0x4B	; 75
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1266:	ea e4       	ldi	r30, 0x4A	; 74
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    126e:	8b e0       	ldi	r24, 0x0B	; 11
    1270:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1272:	ee e4       	ldi	r30, 0x4E	; 78
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    127a:	e9 e5       	ldi	r30, 0x59	; 89
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	80 61       	ori	r24, 0x10	; 16
    1286:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1288:	e9 e5       	ldi	r30, 0x59	; 89
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	80 83       	st	Z, r24
}
    1290:	26 96       	adiw	r28, 0x06	; 6
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    12a2:	0e 94 9a 08 	call	0x1134	; 0x1134 <vPortYieldFromTick>
		asm volatile ( "reti" );
    12a6:	18 95       	reti

000012a8 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	28 97       	sbiw	r28, 0x08	; 8
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	8f 83       	std	Y+7, r24	; 0x07
    12be:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    12c0:	1a 82       	std	Y+2, r1	; 0x02
    12c2:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    12c4:	8f 81       	ldd	r24, Y+7	; 0x07
    12c6:	88 23       	and	r24, r24
    12c8:	09 f4       	brne	.+2      	; 0x12cc <xQueueCreate+0x24>
    12ca:	8c c0       	rjmp	.+280    	; 0x13e4 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    12cc:	8f e1       	ldi	r24, 0x1F	; 31
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <pvPortMalloc>
    12d4:	9e 83       	std	Y+6, r25	; 0x06
    12d6:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	09 f4       	brne	.+2      	; 0x12e2 <xQueueCreate+0x3a>
    12e0:	81 c0       	rjmp	.+258    	; 0x13e4 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    12e2:	8f 81       	ldd	r24, Y+7	; 0x07
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	88 85       	ldd	r24, Y+8	; 0x08
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	ac 01       	movw	r20, r24
    12f0:	24 9f       	mul	r18, r20
    12f2:	c0 01       	movw	r24, r0
    12f4:	25 9f       	mul	r18, r21
    12f6:	90 0d       	add	r25, r0
    12f8:	34 9f       	mul	r19, r20
    12fa:	90 0d       	add	r25, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	0e 94 db 04 	call	0x9b6	; 0x9b6 <pvPortMalloc>
    130c:	ed 81       	ldd	r30, Y+5	; 0x05
    130e:	fe 81       	ldd	r31, Y+6	; 0x06
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1314:	ed 81       	ldd	r30, Y+5	; 0x05
    1316:	fe 81       	ldd	r31, Y+6	; 0x06
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	09 f4       	brne	.+2      	; 0x1322 <xQueueCreate+0x7a>
    1320:	5d c0       	rjmp	.+186    	; 0x13dc <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1322:	ed 81       	ldd	r30, Y+5	; 0x05
    1324:	fe 81       	ldd	r31, Y+6	; 0x06
    1326:	40 81       	ld	r20, Z
    1328:	51 81       	ldd	r21, Z+1	; 0x01
    132a:	8f 81       	ldd	r24, Y+7	; 0x07
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	88 85       	ldd	r24, Y+8	; 0x08
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	bc 01       	movw	r22, r24
    1338:	26 9f       	mul	r18, r22
    133a:	c0 01       	movw	r24, r0
    133c:	27 9f       	mul	r18, r23
    133e:	90 0d       	add	r25, r0
    1340:	36 9f       	mul	r19, r22
    1342:	90 0d       	add	r25, r0
    1344:	11 24       	eor	r1, r1
    1346:	84 0f       	add	r24, r20
    1348:	95 1f       	adc	r25, r21
    134a:	ed 81       	ldd	r30, Y+5	; 0x05
    134c:	fe 81       	ldd	r31, Y+6	; 0x06
    134e:	93 83       	std	Z+3, r25	; 0x03
    1350:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1352:	ed 81       	ldd	r30, Y+5	; 0x05
    1354:	fe 81       	ldd	r31, Y+6	; 0x06
    1356:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1358:	ed 81       	ldd	r30, Y+5	; 0x05
    135a:	fe 81       	ldd	r31, Y+6	; 0x06
    135c:	80 81       	ld	r24, Z
    135e:	91 81       	ldd	r25, Z+1	; 0x01
    1360:	ed 81       	ldd	r30, Y+5	; 0x05
    1362:	fe 81       	ldd	r31, Y+6	; 0x06
    1364:	95 83       	std	Z+5, r25	; 0x05
    1366:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1368:	ed 81       	ldd	r30, Y+5	; 0x05
    136a:	fe 81       	ldd	r31, Y+6	; 0x06
    136c:	40 81       	ld	r20, Z
    136e:	51 81       	ldd	r21, Z+1	; 0x01
    1370:	8f 81       	ldd	r24, Y+7	; 0x07
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9c 01       	movw	r18, r24
    1378:	21 50       	subi	r18, 0x01	; 1
    137a:	30 40       	sbci	r19, 0x00	; 0
    137c:	88 85       	ldd	r24, Y+8	; 0x08
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	bc 01       	movw	r22, r24
    1384:	26 9f       	mul	r18, r22
    1386:	c0 01       	movw	r24, r0
    1388:	27 9f       	mul	r18, r23
    138a:	90 0d       	add	r25, r0
    138c:	36 9f       	mul	r19, r22
    138e:	90 0d       	add	r25, r0
    1390:	11 24       	eor	r1, r1
    1392:	84 0f       	add	r24, r20
    1394:	95 1f       	adc	r25, r21
    1396:	ed 81       	ldd	r30, Y+5	; 0x05
    1398:	fe 81       	ldd	r31, Y+6	; 0x06
    139a:	97 83       	std	Z+7, r25	; 0x07
    139c:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    139e:	ed 81       	ldd	r30, Y+5	; 0x05
    13a0:	fe 81       	ldd	r31, Y+6	; 0x06
    13a2:	8f 81       	ldd	r24, Y+7	; 0x07
    13a4:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    13a6:	ed 81       	ldd	r30, Y+5	; 0x05
    13a8:	fe 81       	ldd	r31, Y+6	; 0x06
    13aa:	88 85       	ldd	r24, Y+8	; 0x08
    13ac:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    13ae:	ed 81       	ldd	r30, Y+5	; 0x05
    13b0:	fe 81       	ldd	r31, Y+6	; 0x06
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    13b6:	ed 81       	ldd	r30, Y+5	; 0x05
    13b8:	fe 81       	ldd	r31, Y+6	; 0x06
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	08 96       	adiw	r24, 0x08	; 8
    13c4:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	41 96       	adiw	r24, 0x11	; 17
    13ce:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	0e 94 21 05 	call	0xa42	; 0xa42 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    13e8:	28 96       	adiw	r28, 0x08	; 8
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	2c 97       	sbiw	r28, 0x0c	; 12
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	78 87       	std	Y+8, r23	; 0x08
    1414:	6f 83       	std	Y+7, r22	; 0x07
    1416:	5a 87       	std	Y+10, r21	; 0x0a
    1418:	49 87       	std	Y+9, r20	; 0x09
    141a:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    141c:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1424:	ed 81       	ldd	r30, Y+5	; 0x05
    1426:	fe 81       	ldd	r31, Y+6	; 0x06
    1428:	92 8d       	ldd	r25, Z+26	; 0x1a
    142a:	ed 81       	ldd	r30, Y+5	; 0x05
    142c:	fe 81       	ldd	r31, Y+6	; 0x06
    142e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1430:	98 17       	cp	r25, r24
    1432:	d8 f4       	brcc	.+54     	; 0x146a <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	2f 81       	ldd	r18, Y+7	; 0x07
    143a:	38 85       	ldd	r19, Y+8	; 0x08
    143c:	b9 01       	movw	r22, r18
    143e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1440:	0e 94 38 0c 	call	0x1870	; 0x1870 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1444:	ed 81       	ldd	r30, Y+5	; 0x05
    1446:	fe 81       	ldd	r31, Y+6	; 0x06
    1448:	81 89       	ldd	r24, Z+17	; 0x11
    144a:	88 23       	and	r24, r24
    144c:	49 f0       	breq	.+18     	; 0x1460 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	41 96       	adiw	r24, 0x11	; 17
    1454:	0e 94 4d 12 	call	0x249a	; 0x249a <xTaskRemoveFromEventList>
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	11 f4       	brne	.+4      	; 0x1460 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    145c:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	8c 87       	std	Y+12, r24	; 0x0c
    1468:	5c c0       	rjmp	.+184    	; 0x1522 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	21 f4       	brne	.+8      	; 0x147a <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1476:	1c 86       	std	Y+12, r1	; 0x0c
    1478:	54 c0       	rjmp	.+168    	; 0x1522 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	88 23       	and	r24, r24
    147e:	31 f4       	brne	.+12     	; 0x148c <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1480:	ce 01       	movw	r24, r28
    1482:	02 96       	adiw	r24, 0x02	; 2
    1484:	0e 94 b5 12 	call	0x256a	; 0x256a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1490:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	0f 92       	push	r0
    149a:	ed 81       	ldd	r30, Y+5	; 0x05
    149c:	fe 81       	ldd	r31, Y+6	; 0x06
    149e:	85 8d       	ldd	r24, Z+29	; 0x1d
    14a0:	8f 3f       	cpi	r24, 0xFF	; 255
    14a2:	19 f4       	brne	.+6      	; 0x14aa <xQueueGenericSend+0xb0>
    14a4:	ed 81       	ldd	r30, Y+5	; 0x05
    14a6:	fe 81       	ldd	r31, Y+6	; 0x06
    14a8:	15 8e       	std	Z+29, r1	; 0x1d
    14aa:	ed 81       	ldd	r30, Y+5	; 0x05
    14ac:	fe 81       	ldd	r31, Y+6	; 0x06
    14ae:	86 8d       	ldd	r24, Z+30	; 0x1e
    14b0:	8f 3f       	cpi	r24, 0xFF	; 255
    14b2:	19 f4       	brne	.+6      	; 0x14ba <xQueueGenericSend+0xc0>
    14b4:	ed 81       	ldd	r30, Y+5	; 0x05
    14b6:	fe 81       	ldd	r31, Y+6	; 0x06
    14b8:	16 8e       	std	Z+30, r1	; 0x1e
    14ba:	0f 90       	pop	r0
    14bc:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    14be:	ce 01       	movw	r24, r28
    14c0:	02 96       	adiw	r24, 0x02	; 2
    14c2:	9e 01       	movw	r18, r28
    14c4:	27 5f       	subi	r18, 0xF7	; 247
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	b9 01       	movw	r22, r18
    14ca:	0e 94 ce 12 	call	0x259c	; 0x259c <xTaskCheckForTimeOut>
    14ce:	88 23       	and	r24, r24
    14d0:	09 f5       	brne	.+66     	; 0x1514 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <prvIsQueueFull>
    14da:	88 23       	and	r24, r24
    14dc:	a1 f0       	breq	.+40     	; 0x1506 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	08 96       	adiw	r24, 0x08	; 8
    14e4:	29 85       	ldd	r18, Y+9	; 0x09
    14e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e8:	b9 01       	movw	r22, r18
    14ea:	0e 94 17 12 	call	0x242e	; 0x242e <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    14f6:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
    14fa:	88 23       	and	r24, r24
    14fc:	09 f0       	breq	.+2      	; 0x1500 <xQueueGenericSend+0x106>
    14fe:	8f cf       	rjmp	.-226    	; 0x141e <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1500:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
    1504:	8c cf       	rjmp	.-232    	; 0x141e <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    150e:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
    1512:	85 cf       	rjmp	.-246    	; 0x141e <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    151c:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1520:	1c 86       	std	Y+12, r1	; 0x0c
    1522:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1524:	2c 96       	adiw	r28, 0x0c	; 12
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	29 97       	sbiw	r28, 0x09	; 9
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	8b 83       	std	Y+3, r24	; 0x03
    154e:	7e 83       	std	Y+6, r23	; 0x06
    1550:	6d 83       	std	Y+5, r22	; 0x05
    1552:	58 87       	std	Y+8, r21	; 0x08
    1554:	4f 83       	std	Y+7, r20	; 0x07
    1556:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1558:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    155a:	eb 81       	ldd	r30, Y+3	; 0x03
    155c:	fc 81       	ldd	r31, Y+4	; 0x04
    155e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1560:	eb 81       	ldd	r30, Y+3	; 0x03
    1562:	fc 81       	ldd	r31, Y+4	; 0x04
    1564:	83 8d       	ldd	r24, Z+27	; 0x1b
    1566:	98 17       	cp	r25, r24
    1568:	40 f5       	brcc	.+80     	; 0x15ba <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	2d 81       	ldd	r18, Y+5	; 0x05
    1570:	3e 81       	ldd	r19, Y+6	; 0x06
    1572:	b9 01       	movw	r22, r18
    1574:	49 85       	ldd	r20, Y+9	; 0x09
    1576:	0e 94 38 0c 	call	0x1870	; 0x1870 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    157a:	eb 81       	ldd	r30, Y+3	; 0x03
    157c:	fc 81       	ldd	r31, Y+4	; 0x04
    157e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1580:	8f 3f       	cpi	r24, 0xFF	; 255
    1582:	89 f4       	brne	.+34     	; 0x15a6 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1584:	eb 81       	ldd	r30, Y+3	; 0x03
    1586:	fc 81       	ldd	r31, Y+4	; 0x04
    1588:	81 89       	ldd	r24, Z+17	; 0x11
    158a:	88 23       	and	r24, r24
    158c:	99 f0       	breq	.+38     	; 0x15b4 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	41 96       	adiw	r24, 0x11	; 17
    1594:	0e 94 4d 12 	call	0x249a	; 0x249a <xTaskRemoveFromEventList>
    1598:	88 23       	and	r24, r24
    159a:	61 f0       	breq	.+24     	; 0x15b4 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    159c:	ef 81       	ldd	r30, Y+7	; 0x07
    159e:	f8 85       	ldd	r31, Y+8	; 0x08
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 83       	st	Z, r24
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	eb 81       	ldd	r30, Y+3	; 0x03
    15b0:	fc 81       	ldd	r31, Y+4	; 0x04
    15b2:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    15ba:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15be:	29 96       	adiw	r28, 0x09	; 9
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2e 97       	sbiw	r28, 0x0e	; 14
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	98 87       	std	Y+8, r25	; 0x08
    15e6:	8f 83       	std	Y+7, r24	; 0x07
    15e8:	7a 87       	std	Y+10, r23	; 0x0a
    15ea:	69 87       	std	Y+9, r22	; 0x09
    15ec:	5c 87       	std	Y+12, r21	; 0x0c
    15ee:	4b 87       	std	Y+11, r20	; 0x0b
    15f0:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    15f2:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    15fa:	ef 81       	ldd	r30, Y+7	; 0x07
    15fc:	f8 85       	ldd	r31, Y+8	; 0x08
    15fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1600:	88 23       	and	r24, r24
    1602:	09 f4       	brne	.+2      	; 0x1606 <xQueueGenericReceive+0x36>
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1606:	ef 81       	ldd	r30, Y+7	; 0x07
    1608:	f8 85       	ldd	r31, Y+8	; 0x08
    160a:	86 81       	ldd	r24, Z+6	; 0x06
    160c:	97 81       	ldd	r25, Z+7	; 0x07
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	98 85       	ldd	r25, Y+8	; 0x08
    1616:	29 85       	ldd	r18, Y+9	; 0x09
    1618:	3a 85       	ldd	r19, Y+10	; 0x0a
    161a:	b9 01       	movw	r22, r18
    161c:	0e 94 cd 0c 	call	0x199a	; 0x199a <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	88 23       	and	r24, r24
    1624:	b1 f4       	brne	.+44     	; 0x1652 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1626:	ef 81       	ldd	r30, Y+7	; 0x07
    1628:	f8 85       	ldd	r31, Y+8	; 0x08
    162a:	82 8d       	ldd	r24, Z+26	; 0x1a
    162c:	81 50       	subi	r24, 0x01	; 1
    162e:	ef 81       	ldd	r30, Y+7	; 0x07
    1630:	f8 85       	ldd	r31, Y+8	; 0x08
    1632:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1634:	ef 81       	ldd	r30, Y+7	; 0x07
    1636:	f8 85       	ldd	r31, Y+8	; 0x08
    1638:	80 85       	ldd	r24, Z+8	; 0x08
    163a:	88 23       	and	r24, r24
    163c:	f1 f0       	breq	.+60     	; 0x167a <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    163e:	8f 81       	ldd	r24, Y+7	; 0x07
    1640:	98 85       	ldd	r25, Y+8	; 0x08
    1642:	08 96       	adiw	r24, 0x08	; 8
    1644:	0e 94 4d 12 	call	0x249a	; 0x249a <xTaskRemoveFromEventList>
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	b9 f4       	brne	.+46     	; 0x167a <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    164c:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1652:	ef 81       	ldd	r30, Y+7	; 0x07
    1654:	f8 85       	ldd	r31, Y+8	; 0x08
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	97 83       	std	Z+7, r25	; 0x07
    165c:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    165e:	ef 81       	ldd	r30, Y+7	; 0x07
    1660:	f8 85       	ldd	r31, Y+8	; 0x08
    1662:	81 89       	ldd	r24, Z+17	; 0x11
    1664:	88 23       	and	r24, r24
    1666:	49 f0       	breq	.+18     	; 0x167a <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	41 96       	adiw	r24, 0x11	; 17
    166e:	0e 94 4d 12 	call	0x249a	; 0x249a <xTaskRemoveFromEventList>
    1672:	88 23       	and	r24, r24
    1674:	11 f0       	breq	.+4      	; 0x167a <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1676:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	8e 87       	std	Y+14, r24	; 0x0e
    1682:	5c c0       	rjmp	.+184    	; 0x173c <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1684:	8b 85       	ldd	r24, Y+11	; 0x0b
    1686:	9c 85       	ldd	r25, Y+12	; 0x0c
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	21 f4       	brne	.+8      	; 0x1694 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1690:	1e 86       	std	Y+14, r1	; 0x0e
    1692:	54 c0       	rjmp	.+168    	; 0x173c <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	88 23       	and	r24, r24
    1698:	31 f4       	brne	.+12     	; 0x16a6 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    169a:	ce 01       	movw	r24, r28
    169c:	04 96       	adiw	r24, 0x04	; 4
    169e:	0e 94 b5 12 	call	0x256a	; 0x256a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    16aa:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	0f 92       	push	r0
    16b4:	ef 81       	ldd	r30, Y+7	; 0x07
    16b6:	f8 85       	ldd	r31, Y+8	; 0x08
    16b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    16ba:	8f 3f       	cpi	r24, 0xFF	; 255
    16bc:	19 f4       	brne	.+6      	; 0x16c4 <xQueueGenericReceive+0xf4>
    16be:	ef 81       	ldd	r30, Y+7	; 0x07
    16c0:	f8 85       	ldd	r31, Y+8	; 0x08
    16c2:	15 8e       	std	Z+29, r1	; 0x1d
    16c4:	ef 81       	ldd	r30, Y+7	; 0x07
    16c6:	f8 85       	ldd	r31, Y+8	; 0x08
    16c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    16ca:	8f 3f       	cpi	r24, 0xFF	; 255
    16cc:	19 f4       	brne	.+6      	; 0x16d4 <xQueueGenericReceive+0x104>
    16ce:	ef 81       	ldd	r30, Y+7	; 0x07
    16d0:	f8 85       	ldd	r31, Y+8	; 0x08
    16d2:	16 8e       	std	Z+30, r1	; 0x1e
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    16d8:	ce 01       	movw	r24, r28
    16da:	04 96       	adiw	r24, 0x04	; 4
    16dc:	9e 01       	movw	r18, r28
    16de:	25 5f       	subi	r18, 0xF5	; 245
    16e0:	3f 4f       	sbci	r19, 0xFF	; 255
    16e2:	b9 01       	movw	r22, r18
    16e4:	0e 94 ce 12 	call	0x259c	; 0x259c <xTaskCheckForTimeOut>
    16e8:	88 23       	and	r24, r24
    16ea:	09 f5       	brne	.+66     	; 0x172e <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    16ec:	8f 81       	ldd	r24, Y+7	; 0x07
    16ee:	98 85       	ldd	r25, Y+8	; 0x08
    16f0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <prvIsQueueEmpty>
    16f4:	88 23       	and	r24, r24
    16f6:	a1 f0       	breq	.+40     	; 0x1720 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    16f8:	8f 81       	ldd	r24, Y+7	; 0x07
    16fa:	98 85       	ldd	r25, Y+8	; 0x08
    16fc:	41 96       	adiw	r24, 0x11	; 17
    16fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    1700:	3c 85       	ldd	r19, Y+12	; 0x0c
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 17 12 	call	0x242e	; 0x242e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
    170a:	98 85       	ldd	r25, Y+8	; 0x08
    170c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1710:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
    1714:	88 23       	and	r24, r24
    1716:	09 f0       	breq	.+2      	; 0x171a <xQueueGenericReceive+0x14a>
    1718:	6d cf       	rjmp	.-294    	; 0x15f4 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    171a:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
    171e:	6a cf       	rjmp	.-300    	; 0x15f4 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1720:	8f 81       	ldd	r24, Y+7	; 0x07
    1722:	98 85       	ldd	r25, Y+8	; 0x08
    1724:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1728:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
    172c:	63 cf       	rjmp	.-314    	; 0x15f4 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    172e:	8f 81       	ldd	r24, Y+7	; 0x07
    1730:	98 85       	ldd	r25, Y+8	; 0x08
    1732:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1736:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    173a:	1e 86       	std	Y+14, r1	; 0x0e
    173c:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    173e:	2e 96       	adiw	r28, 0x0e	; 14
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	28 97       	sbiw	r28, 0x08	; 8
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	7e 83       	std	Y+6, r23	; 0x06
    176a:	6d 83       	std	Y+5, r22	; 0x05
    176c:	58 87       	std	Y+8, r21	; 0x08
    176e:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1770:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1772:	eb 81       	ldd	r30, Y+3	; 0x03
    1774:	fc 81       	ldd	r31, Y+4	; 0x04
    1776:	82 8d       	ldd	r24, Z+26	; 0x1a
    1778:	88 23       	and	r24, r24
    177a:	71 f1       	breq	.+92     	; 0x17d8 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	2d 81       	ldd	r18, Y+5	; 0x05
    1782:	3e 81       	ldd	r19, Y+6	; 0x06
    1784:	b9 01       	movw	r22, r18
    1786:	0e 94 cd 0c 	call	0x199a	; 0x199a <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    178a:	eb 81       	ldd	r30, Y+3	; 0x03
    178c:	fc 81       	ldd	r31, Y+4	; 0x04
    178e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1790:	81 50       	subi	r24, 0x01	; 1
    1792:	eb 81       	ldd	r30, Y+3	; 0x03
    1794:	fc 81       	ldd	r31, Y+4	; 0x04
    1796:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1798:	eb 81       	ldd	r30, Y+3	; 0x03
    179a:	fc 81       	ldd	r31, Y+4	; 0x04
    179c:	85 8d       	ldd	r24, Z+29	; 0x1d
    179e:	8f 3f       	cpi	r24, 0xFF	; 255
    17a0:	89 f4       	brne	.+34     	; 0x17c4 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17a2:	eb 81       	ldd	r30, Y+3	; 0x03
    17a4:	fc 81       	ldd	r31, Y+4	; 0x04
    17a6:	80 85       	ldd	r24, Z+8	; 0x08
    17a8:	88 23       	and	r24, r24
    17aa:	99 f0       	breq	.+38     	; 0x17d2 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	08 96       	adiw	r24, 0x08	; 8
    17b2:	0e 94 4d 12 	call	0x249a	; 0x249a <xTaskRemoveFromEventList>
    17b6:	88 23       	and	r24, r24
    17b8:	61 f0       	breq	.+24     	; 0x17d2 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    17ba:	ef 81       	ldd	r30, Y+7	; 0x07
    17bc:	f8 85       	ldd	r31, Y+8	; 0x08
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 83       	st	Z, r24
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    17c4:	eb 81       	ldd	r30, Y+3	; 0x03
    17c6:	fc 81       	ldd	r31, Y+4	; 0x04
    17c8:	85 8d       	ldd	r24, Z+29	; 0x1d
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	eb 81       	ldd	r30, Y+3	; 0x03
    17ce:	fc 81       	ldd	r31, Y+4	; 0x04
    17d0:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	8a 83       	std	Y+2, r24	; 0x02
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    17d8:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17dc:	28 96       	adiw	r28, 0x08	; 8
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <uxQueueMessagesWaiting+0x6>
    17f4:	0f 92       	push	r0
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	9b 83       	std	Y+3, r25	; 0x03
    17fc:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1804:	ea 81       	ldd	r30, Y+2	; 0x02
    1806:	fb 81       	ldd	r31, Y+3	; 0x03
    1808:	82 8d       	ldd	r24, Z+26	; 0x1a
    180a:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <uxQueueMessagesWaitingFromISR+0x6>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	9b 83       	std	Y+3, r25	; 0x03
    182c:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    182e:	ea 81       	ldd	r30, Y+2	; 0x02
    1830:	fb 81       	ldd	r31, Y+3	; 0x03
    1832:	82 8d       	ldd	r24, Z+26	; 0x1a
    1834:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <vQueueDelete+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1852:	e9 81       	ldd	r30, Y+1	; 0x01
    1854:	fa 81       	ldd	r31, Y+2	; 0x02
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	0e 94 21 05 	call	0xa42	; 0xa42 <vPortFree>
	vPortFree( pxQueue );
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	0e 94 21 05 	call	0xa42	; 0xa42 <vPortFree>
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	00 d0       	rcall	.+0      	; 0x1876 <prvCopyDataToQueue+0x6>
    1876:	00 d0       	rcall	.+0      	; 0x1878 <prvCopyDataToQueue+0x8>
    1878:	0f 92       	push	r0
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    1882:	7c 83       	std	Y+4, r23	; 0x04
    1884:	6b 83       	std	Y+3, r22	; 0x03
    1886:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1888:	e9 81       	ldd	r30, Y+1	; 0x01
    188a:	fa 81       	ldd	r31, Y+2	; 0x02
    188c:	84 8d       	ldd	r24, Z+28	; 0x1c
    188e:	88 23       	and	r24, r24
    1890:	09 f4       	brne	.+2      	; 0x1894 <prvCopyDataToQueue+0x24>
    1892:	74 c0       	rjmp	.+232    	; 0x197c <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	88 23       	and	r24, r24
    1898:	99 f5       	brne	.+102    	; 0x1900 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    189a:	e9 81       	ldd	r30, Y+1	; 0x01
    189c:	fa 81       	ldd	r31, Y+2	; 0x02
    189e:	64 81       	ldd	r22, Z+4	; 0x04
    18a0:	75 81       	ldd	r23, Z+5	; 0x05
    18a2:	e9 81       	ldd	r30, Y+1	; 0x01
    18a4:	fa 81       	ldd	r31, Y+2	; 0x02
    18a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    18a8:	48 2f       	mov	r20, r24
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	2b 81       	ldd	r18, Y+3	; 0x03
    18ae:	3c 81       	ldd	r19, Y+4	; 0x04
    18b0:	cb 01       	movw	r24, r22
    18b2:	b9 01       	movw	r22, r18
    18b4:	0e 94 c0 14 	call	0x2980	; 0x2980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    18b8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ba:	fa 81       	ldd	r31, Y+2	; 0x02
    18bc:	24 81       	ldd	r18, Z+4	; 0x04
    18be:	35 81       	ldd	r19, Z+5	; 0x05
    18c0:	e9 81       	ldd	r30, Y+1	; 0x01
    18c2:	fa 81       	ldd	r31, Y+2	; 0x02
    18c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	e9 81       	ldd	r30, Y+1	; 0x01
    18d0:	fa 81       	ldd	r31, Y+2	; 0x02
    18d2:	95 83       	std	Z+5, r25	; 0x05
    18d4:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    18d6:	e9 81       	ldd	r30, Y+1	; 0x01
    18d8:	fa 81       	ldd	r31, Y+2	; 0x02
    18da:	24 81       	ldd	r18, Z+4	; 0x04
    18dc:	35 81       	ldd	r19, Z+5	; 0x05
    18de:	e9 81       	ldd	r30, Y+1	; 0x01
    18e0:	fa 81       	ldd	r31, Y+2	; 0x02
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	28 17       	cp	r18, r24
    18e8:	39 07       	cpc	r19, r25
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <prvCopyDataToQueue+0x7e>
    18ec:	47 c0       	rjmp	.+142    	; 0x197c <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    18ee:	e9 81       	ldd	r30, Y+1	; 0x01
    18f0:	fa 81       	ldd	r31, Y+2	; 0x02
    18f2:	80 81       	ld	r24, Z
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	e9 81       	ldd	r30, Y+1	; 0x01
    18f8:	fa 81       	ldd	r31, Y+2	; 0x02
    18fa:	95 83       	std	Z+5, r25	; 0x05
    18fc:	84 83       	std	Z+4, r24	; 0x04
    18fe:	3e c0       	rjmp	.+124    	; 0x197c <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1900:	e9 81       	ldd	r30, Y+1	; 0x01
    1902:	fa 81       	ldd	r31, Y+2	; 0x02
    1904:	66 81       	ldd	r22, Z+6	; 0x06
    1906:	77 81       	ldd	r23, Z+7	; 0x07
    1908:	e9 81       	ldd	r30, Y+1	; 0x01
    190a:	fa 81       	ldd	r31, Y+2	; 0x02
    190c:	84 8d       	ldd	r24, Z+28	; 0x1c
    190e:	48 2f       	mov	r20, r24
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	2b 81       	ldd	r18, Y+3	; 0x03
    1914:	3c 81       	ldd	r19, Y+4	; 0x04
    1916:	cb 01       	movw	r24, r22
    1918:	b9 01       	movw	r22, r18
    191a:	0e 94 c0 14 	call	0x2980	; 0x2980 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	26 81       	ldd	r18, Z+6	; 0x06
    1924:	37 81       	ldd	r19, Z+7	; 0x07
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	84 8d       	ldd	r24, Z+28	; 0x1c
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	90 95       	com	r25
    1932:	81 95       	neg	r24
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	82 0f       	add	r24, r18
    1938:	93 1f       	adc	r25, r19
    193a:	e9 81       	ldd	r30, Y+1	; 0x01
    193c:	fa 81       	ldd	r31, Y+2	; 0x02
    193e:	97 83       	std	Z+7, r25	; 0x07
    1940:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	26 81       	ldd	r18, Z+6	; 0x06
    1948:	37 81       	ldd	r19, Z+7	; 0x07
    194a:	e9 81       	ldd	r30, Y+1	; 0x01
    194c:	fa 81       	ldd	r31, Y+2	; 0x02
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	28 17       	cp	r18, r24
    1954:	39 07       	cpc	r19, r25
    1956:	90 f4       	brcc	.+36     	; 0x197c <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1958:	e9 81       	ldd	r30, Y+1	; 0x01
    195a:	fa 81       	ldd	r31, Y+2	; 0x02
    195c:	22 81       	ldd	r18, Z+2	; 0x02
    195e:	33 81       	ldd	r19, Z+3	; 0x03
    1960:	e9 81       	ldd	r30, Y+1	; 0x01
    1962:	fa 81       	ldd	r31, Y+2	; 0x02
    1964:	84 8d       	ldd	r24, Z+28	; 0x1c
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	90 95       	com	r25
    196c:	81 95       	neg	r24
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	82 0f       	add	r24, r18
    1972:	93 1f       	adc	r25, r19
    1974:	e9 81       	ldd	r30, Y+1	; 0x01
    1976:	fa 81       	ldd	r31, Y+2	; 0x02
    1978:	97 83       	std	Z+7, r25	; 0x07
    197a:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    197c:	e9 81       	ldd	r30, Y+1	; 0x01
    197e:	fa 81       	ldd	r31, Y+2	; 0x02
    1980:	82 8d       	ldd	r24, Z+26	; 0x1a
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	e9 81       	ldd	r30, Y+1	; 0x01
    1986:	fa 81       	ldd	r31, Y+2	; 0x02
    1988:	82 8f       	std	Z+26, r24	; 0x1a
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <prvCopyDataFromQueue+0x6>
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <prvCopyDataFromQueue+0x8>
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	7c 83       	std	Y+4, r23	; 0x04
    19ac:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    19ae:	e9 81       	ldd	r30, Y+1	; 0x01
    19b0:	fa 81       	ldd	r31, Y+2	; 0x02
    19b2:	80 81       	ld	r24, Z
    19b4:	91 81       	ldd	r25, Z+1	; 0x01
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	89 f1       	breq	.+98     	; 0x1a1c <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    19ba:	e9 81       	ldd	r30, Y+1	; 0x01
    19bc:	fa 81       	ldd	r31, Y+2	; 0x02
    19be:	26 81       	ldd	r18, Z+6	; 0x06
    19c0:	37 81       	ldd	r19, Z+7	; 0x07
    19c2:	e9 81       	ldd	r30, Y+1	; 0x01
    19c4:	fa 81       	ldd	r31, Y+2	; 0x02
    19c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	82 0f       	add	r24, r18
    19ce:	93 1f       	adc	r25, r19
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	97 83       	std	Z+7, r25	; 0x07
    19d6:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    19d8:	e9 81       	ldd	r30, Y+1	; 0x01
    19da:	fa 81       	ldd	r31, Y+2	; 0x02
    19dc:	26 81       	ldd	r18, Z+6	; 0x06
    19de:	37 81       	ldd	r19, Z+7	; 0x07
    19e0:	e9 81       	ldd	r30, Y+1	; 0x01
    19e2:	fa 81       	ldd	r31, Y+2	; 0x02
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	28 17       	cp	r18, r24
    19ea:	39 07       	cpc	r19, r25
    19ec:	40 f0       	brcs	.+16     	; 0x19fe <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    19ee:	e9 81       	ldd	r30, Y+1	; 0x01
    19f0:	fa 81       	ldd	r31, Y+2	; 0x02
    19f2:	80 81       	ld	r24, Z
    19f4:	91 81       	ldd	r25, Z+1	; 0x01
    19f6:	e9 81       	ldd	r30, Y+1	; 0x01
    19f8:	fa 81       	ldd	r31, Y+2	; 0x02
    19fa:	97 83       	std	Z+7, r25	; 0x07
    19fc:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	46 81       	ldd	r20, Z+6	; 0x06
    1a04:	57 81       	ldd	r21, Z+7	; 0x07
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	ba 01       	movw	r22, r20
    1a16:	a9 01       	movw	r20, r18
    1a18:	0e 94 c0 14 	call	0x2980	; 0x2980 <memcpy>
	}
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <prvUnlockQueue+0x6>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	9a 83       	std	Y+2, r25	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	0f 92       	push	r0
    1a3e:	15 c0       	rjmp	.+42     	; 0x1a6a <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a40:	e9 81       	ldd	r30, Y+1	; 0x01
    1a42:	fa 81       	ldd	r31, Y+2	; 0x02
    1a44:	81 89       	ldd	r24, Z+17	; 0x11
    1a46:	88 23       	and	r24, r24
    1a48:	a9 f0       	breq	.+42     	; 0x1a74 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	41 96       	adiw	r24, 0x11	; 17
    1a50:	0e 94 4d 12 	call	0x249a	; 0x249a <xTaskRemoveFromEventList>
    1a54:	88 23       	and	r24, r24
    1a56:	11 f0       	breq	.+4      	; 0x1a5c <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    1a58:	0e 94 2b 13 	call	0x2656	; 0x2656 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    1a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a60:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a62:	81 50       	subi	r24, 0x01	; 1
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a70:	18 16       	cp	r1, r24
    1a72:	34 f3       	brlt	.-52     	; 0x1a40 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1a74:	e9 81       	ldd	r30, Y+1	; 0x01
    1a76:	fa 81       	ldd	r31, Y+2	; 0x02
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	0f 92       	push	r0
    1a86:	15 c0       	rjmp	.+42     	; 0x1ab2 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a88:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8c:	80 85       	ldd	r24, Z+8	; 0x08
    1a8e:	88 23       	and	r24, r24
    1a90:	a9 f0       	breq	.+42     	; 0x1abc <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	08 96       	adiw	r24, 0x08	; 8
    1a98:	0e 94 4d 12 	call	0x249a	; 0x249a <xTaskRemoveFromEventList>
    1a9c:	88 23       	and	r24, r24
    1a9e:	11 f0       	breq	.+4      	; 0x1aa4 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    1aa0:	0e 94 2b 13 	call	0x2656	; 0x2656 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	e9 81       	ldd	r30, Y+1	; 0x01
    1aae:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab0:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ab8:	18 16       	cp	r1, r24
    1aba:	34 f3       	brlt	.-52     	; 0x1a88 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1abc:	e9 81       	ldd	r30, Y+1	; 0x01
    1abe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <prvIsQueueEmpty+0x6>
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	9b 83       	std	Y+3, r25	; 0x03
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    1aea:	fb 81       	ldd	r31, Y+3	; 0x03
    1aec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	88 23       	and	r24, r24
    1af2:	11 f4       	brne	.+4      	; 0x1af8 <prvIsQueueEmpty+0x26>
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1af8:	0f 90       	pop	r0
    1afa:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <xQueueIsQueueEmptyFromISR+0x6>
    1b10:	0f 92       	push	r0
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	9b 83       	std	Y+3, r25	; 0x03
    1b18:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    1b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    1b1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b20:	19 82       	std	Y+1, r1	; 0x01
    1b22:	88 23       	and	r24, r24
    1b24:	11 f4       	brne	.+4      	; 0x1b2a <xQueueIsQueueEmptyFromISR+0x20>
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <prvIsQueueFull+0x6>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9b 83       	std	Y+3, r25	; 0x03
    1b46:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1b50:	fb 81       	ldd	r31, Y+3	; 0x03
    1b52:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	98 17       	cp	r25, r24
    1b5e:	11 f4       	brne	.+4      	; 0x1b64 <prvIsQueueFull+0x2c>
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1b64:	0f 90       	pop	r0
    1b66:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <xQueueIsQueueFullFromISR+0x6>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	9b 83       	std	Y+3, r25	; 0x03
    1b84:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1b86:	ea 81       	ldd	r30, Y+2	; 0x02
    1b88:	fb 81       	ldd	r31, Y+3	; 0x03
    1b8a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b8c:	ea 81       	ldd	r30, Y+2	; 0x02
    1b8e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b90:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b92:	19 82       	std	Y+1, r1	; 0x01
    1b94:	98 17       	cp	r25, r24
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <xQueueIsQueueFullFromISR+0x26>
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	64 97       	sbiw	r28, 0x14	; 20
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	9f 83       	std	Y+7, r25	; 0x07
    1bd0:	8e 83       	std	Y+6, r24	; 0x06
    1bd2:	79 87       	std	Y+9, r23	; 0x09
    1bd4:	68 87       	std	Y+8, r22	; 0x08
    1bd6:	5b 87       	std	Y+11, r21	; 0x0b
    1bd8:	4a 87       	std	Y+10, r20	; 0x0a
    1bda:	3d 87       	std	Y+13, r19	; 0x0d
    1bdc:	2c 87       	std	Y+12, r18	; 0x0c
    1bde:	0e 87       	std	Y+14, r16	; 0x0e
    1be0:	f8 8a       	std	Y+16, r15	; 0x10
    1be2:	ef 86       	std	Y+15, r14	; 0x0f
    1be4:	da 8a       	std	Y+18, r13	; 0x12
    1be6:	c9 8a       	std	Y+17, r12	; 0x11
    1be8:	bc 8a       	std	Y+20, r11	; 0x14
    1bea:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1bec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bf0:	29 89       	ldd	r18, Y+17	; 0x11
    1bf2:	3a 89       	ldd	r19, Y+18	; 0x12
    1bf4:	b9 01       	movw	r22, r18
    1bf6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <prvAllocateTCBAndStack>
    1bfa:	9c 83       	std	Y+4, r25	; 0x04
    1bfc:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <xTaskGenericCreate+0x5e>
    1c06:	99 c0       	rjmp	.+306    	; 0x1d3a <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1c08:	eb 81       	ldd	r30, Y+3	; 0x03
    1c0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c0c:	27 89       	ldd	r18, Z+23	; 0x17
    1c0e:	30 8d       	ldd	r19, Z+24	; 0x18
    1c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	28 85       	ldd	r18, Y+8	; 0x08
    1c24:	39 85       	ldd	r19, Y+9	; 0x09
    1c26:	eb 89       	ldd	r30, Y+19	; 0x13
    1c28:	fc 89       	ldd	r31, Y+20	; 0x14
    1c2a:	aa 85       	ldd	r26, Y+10	; 0x0a
    1c2c:	bb 85       	ldd	r27, Y+11	; 0x0b
    1c2e:	b9 01       	movw	r22, r18
    1c30:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c32:	9f 01       	movw	r18, r30
    1c34:	8d 01       	movw	r16, r26
    1c36:	0e 94 3f 13 	call	0x267e	; 0x267e <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c40:	3f 81       	ldd	r19, Y+7	; 0x07
    1c42:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c44:	5d 85       	ldd	r21, Y+13	; 0x0d
    1c46:	b9 01       	movw	r22, r18
    1c48:	0e 94 82 06 	call	0xd04	; 0xd04 <pxPortInitialiseStack>
    1c4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c56:	98 89       	ldd	r25, Y+16	; 0x10
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	31 f0       	breq	.+12     	; 0x1c68 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1c5c:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c5e:	f8 89       	ldd	r31, Y+16	; 0x10
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1c6e:	80 91 23 03 	lds	r24, 0x0323
    1c72:	8f 5f       	subi	r24, 0xFF	; 255
    1c74:	80 93 23 03 	sts	0x0323, r24
			if( pxCurrentTCB == NULL )
    1c78:	80 91 20 03 	lds	r24, 0x0320
    1c7c:	90 91 21 03 	lds	r25, 0x0321
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f4       	brne	.+26     	; 0x1c9e <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	90 93 21 03 	sts	0x0321, r25
    1c8c:	80 93 20 03 	sts	0x0320, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1c90:	80 91 23 03 	lds	r24, 0x0323
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	a9 f4       	brne	.+42     	; 0x1cc2 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1c98:	0e 94 96 13 	call	0x272c	; 0x272c <prvInitialiseTaskLists>
    1c9c:	12 c0       	rjmp	.+36     	; 0x1cc2 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1c9e:	80 91 28 03 	lds	r24, 0x0328
    1ca2:	88 23       	and	r24, r24
    1ca4:	71 f4       	brne	.+28     	; 0x1cc2 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1ca6:	e0 91 20 03 	lds	r30, 0x0320
    1caa:	f0 91 21 03 	lds	r31, 0x0321
    1cae:	96 89       	ldd	r25, Z+22	; 0x16
    1cb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cb2:	89 17       	cp	r24, r25
    1cb4:	30 f0       	brcs	.+12     	; 0x1cc2 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	90 93 21 03 	sts	0x0321, r25
    1cbe:	80 93 20 03 	sts	0x0320, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1cc2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc6:	96 89       	ldd	r25, Z+22	; 0x16
    1cc8:	80 91 26 03 	lds	r24, 0x0326
    1ccc:	89 17       	cp	r24, r25
    1cce:	28 f4       	brcc	.+10     	; 0x1cda <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd4:	86 89       	ldd	r24, Z+22	; 0x16
    1cd6:	80 93 26 03 	sts	0x0326, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1cda:	80 91 2d 03 	lds	r24, 0x032D
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	80 93 2d 03 	sts	0x032D, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    1ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce8:	96 89       	ldd	r25, Z+22	; 0x16
    1cea:	80 91 27 03 	lds	r24, 0x0327
    1cee:	89 17       	cp	r24, r25
    1cf0:	28 f4       	brcc	.+10     	; 0x1cfc <xTaskGenericCreate+0x152>
    1cf2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf6:	86 89       	ldd	r24, Z+22	; 0x16
    1cf8:	80 93 27 03 	sts	0x0327, r24
    1cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1d00:	86 89       	ldd	r24, Z+22	; 0x16
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	c9 01       	movw	r24, r18
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	82 0f       	add	r24, r18
    1d16:	93 1f       	adc	r25, r19
    1d18:	ac 01       	movw	r20, r24
    1d1a:	42 5d       	subi	r20, 0xD2	; 210
    1d1c:	5c 4f       	sbci	r21, 0xFC	; 252
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	9c 01       	movw	r18, r24
    1d24:	2e 5f       	subi	r18, 0xFE	; 254
    1d26:	3f 4f       	sbci	r19, 0xFF	; 255
    1d28:	ca 01       	movw	r24, r20
    1d2a:	b9 01       	movw	r22, r18
    1d2c:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>

			xReturn = pdPASS;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	71 f4       	brne	.+28     	; 0x1d60 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    1d44:	80 91 28 03 	lds	r24, 0x0328
    1d48:	88 23       	and	r24, r24
    1d4a:	51 f0       	breq	.+20     	; 0x1d60 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1d4c:	e0 91 20 03 	lds	r30, 0x0320
    1d50:	f0 91 21 03 	lds	r31, 0x0321
    1d54:	96 89       	ldd	r25, Z+22	; 0x16
    1d56:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d58:	98 17       	cp	r25, r24
    1d5a:	10 f4       	brcc	.+4      	; 0x1d60 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    1d5c:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
			}
		}
	}

	return xReturn;
    1d60:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d62:	64 96       	adiw	r28, 0x14	; 20
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	ff 90       	pop	r15
    1d78:	ef 90       	pop	r14
    1d7a:	df 90       	pop	r13
    1d7c:	cf 90       	pop	r12
    1d7e:	bf 90       	pop	r11
    1d80:	af 90       	pop	r10
    1d82:	08 95       	ret

00001d84 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <vTaskDelete+0x6>
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <vTaskDelete+0x8>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <vTaskDelete+0xa>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    1d9c:	20 91 20 03 	lds	r18, 0x0320
    1da0:	30 91 21 03 	lds	r19, 0x0321
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	82 17       	cp	r24, r18
    1daa:	93 07       	cpc	r25, r19
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    1dae:	1c 82       	std	Y+4, r1	; 0x04
    1db0:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	9c 81       	ldd	r25, Y+4	; 0x04
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <vTaskDelete+0x44>
    1dba:	80 91 20 03 	lds	r24, 0x0320
    1dbe:	90 91 21 03 	lds	r25, 0x0321
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <vTaskDelete+0x4c>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	02 96       	adiw	r24, 0x02	; 2
    1dde:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1de2:	e9 81       	ldd	r30, Y+1	; 0x01
    1de4:	fa 81       	ldd	r31, Y+2	; 0x02
    1de6:	84 89       	ldd	r24, Z+20	; 0x14
    1de8:	95 89       	ldd	r25, Z+21	; 0x15
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	29 f0       	breq	.+10     	; 0x1df8 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	9a 81       	ldd	r25, Y+2	; 0x02
    1df2:	0c 96       	adiw	r24, 0x0c	; 12
    1df4:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	2e 5f       	subi	r18, 0xFE	; 254
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	8a e7       	ldi	r24, 0x7A	; 122
    1e04:	93 e0       	ldi	r25, 0x03	; 3
    1e06:	b9 01       	movw	r22, r18
    1e08:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1e0c:	80 91 22 03 	lds	r24, 0x0322
    1e10:	8f 5f       	subi	r24, 0xFF	; 255
    1e12:	80 93 22 03 	sts	0x0322, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1e16:	80 91 2d 03 	lds	r24, 0x032D
    1e1a:	8f 5f       	subi	r24, 0xFF	; 255
    1e1c:	80 93 2d 03 	sts	0x032D, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1e24:	80 91 28 03 	lds	r24, 0x0328
    1e28:	88 23       	and	r24, r24
    1e2a:	31 f0       	breq	.+12     	; 0x1e38 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	11 f4       	brne	.+4      	; 0x1e38 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    1e34:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
			}
		}
	}
    1e38:	26 96       	adiw	r28, 0x06	; 6
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	28 97       	sbiw	r28, 0x08	; 8
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	78 87       	std	Y+8, r23	; 0x08
    1e64:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1e66:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1e68:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1e6c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e6e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e70:	20 81       	ld	r18, Z
    1e72:	31 81       	ldd	r19, Z+1	; 0x01
    1e74:	8f 81       	ldd	r24, Y+7	; 0x07
    1e76:	98 85       	ldd	r25, Y+8	; 0x08
    1e78:	82 0f       	add	r24, r18
    1e7a:	93 1f       	adc	r25, r19
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    1e80:	ed 81       	ldd	r30, Y+5	; 0x05
    1e82:	fe 81       	ldd	r31, Y+6	; 0x06
    1e84:	20 81       	ld	r18, Z
    1e86:	31 81       	ldd	r19, Z+1	; 0x01
    1e88:	80 91 24 03 	lds	r24, 0x0324
    1e8c:	90 91 25 03 	lds	r25, 0x0325
    1e90:	82 17       	cp	r24, r18
    1e92:	93 07       	cpc	r25, r19
    1e94:	a8 f4       	brcc	.+42     	; 0x1ec0 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1e96:	ed 81       	ldd	r30, Y+5	; 0x05
    1e98:	fe 81       	ldd	r31, Y+6	; 0x06
    1e9a:	20 81       	ld	r18, Z
    1e9c:	31 81       	ldd	r19, Z+1	; 0x01
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	82 17       	cp	r24, r18
    1ea4:	93 07       	cpc	r25, r19
    1ea6:	00 f5       	brcc	.+64     	; 0x1ee8 <vTaskDelayUntil+0x9e>
    1ea8:	20 91 24 03 	lds	r18, 0x0324
    1eac:	30 91 25 03 	lds	r19, 0x0325
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	28 17       	cp	r18, r24
    1eb6:	39 07       	cpc	r19, r25
    1eb8:	b8 f4       	brcc	.+46     	; 0x1ee8 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1ec0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ec2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ec4:	20 81       	ld	r18, Z
    1ec6:	31 81       	ldd	r19, Z+1	; 0x01
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	82 17       	cp	r24, r18
    1ece:	93 07       	cpc	r25, r19
    1ed0:	48 f0       	brcs	.+18     	; 0x1ee4 <vTaskDelayUntil+0x9a>
    1ed2:	20 91 24 03 	lds	r18, 0x0324
    1ed6:	30 91 25 03 	lds	r19, 0x0325
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	28 17       	cp	r18, r24
    1ee0:	39 07       	cpc	r19, r25
    1ee2:	10 f4       	brcc	.+4      	; 0x1ee8 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1ee8:	ed 81       	ldd	r30, Y+5	; 0x05
    1eea:	fe 81       	ldd	r31, Y+6	; 0x06
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	88 23       	and	r24, r24
    1ef8:	59 f0       	breq	.+22     	; 0x1f10 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1efa:	80 91 20 03 	lds	r24, 0x0320
    1efe:	90 91 21 03 	lds	r25, 0x0321
    1f02:	02 96       	adiw	r24, 0x02	; 2
    1f04:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	0e 94 11 14 	call	0x2822	; 0x2822 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1f10:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
    1f14:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	88 23       	and	r24, r24
    1f1a:	11 f4       	brne	.+4      	; 0x1f20 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    1f1c:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
		}
	}
    1f20:	28 96       	adiw	r28, 0x08	; 8
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <vTaskDelay+0x6>
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <vTaskDelay+0x8>
    1f3a:	0f 92       	push	r0
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9d 83       	std	Y+5, r25	; 0x05
    1f42:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1f44:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	d1 f0       	breq	.+52     	; 0x1f82 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    1f4e:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1f52:	20 91 24 03 	lds	r18, 0x0324
    1f56:	30 91 25 03 	lds	r19, 0x0325
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	82 0f       	add	r24, r18
    1f60:	93 1f       	adc	r25, r19
    1f62:	9b 83       	std	Y+3, r25	; 0x03
    1f64:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1f66:	80 91 20 03 	lds	r24, 0x0320
    1f6a:	90 91 21 03 	lds	r25, 0x0321
    1f6e:	02 96       	adiw	r24, 0x02	; 2
    1f70:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	0e 94 11 14 	call	0x2822	; 0x2822 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1f7c:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>
    1f80:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	88 23       	and	r24, r24
    1f86:	11 f4       	brne	.+4      	; 0x1f8c <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    1f88:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
		}
	}
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1f9c:	af 92       	push	r10
    1f9e:	bf 92       	push	r11
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	0f 92       	push	r0
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1fb4:	2f e7       	ldi	r18, 0x7F	; 127
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	85 e3       	ldi	r24, 0x35	; 53
    1fba:	93 e1       	ldi	r25, 0x13	; 19
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	45 e5       	ldi	r20, 0x55	; 85
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	00 e0       	ldi	r16, 0x00	; 0
    1fc8:	ee 24       	eor	r14, r14
    1fca:	ff 24       	eor	r15, r15
    1fcc:	cc 24       	eor	r12, r12
    1fce:	dd 24       	eor	r13, r13
    1fd0:	aa 24       	eor	r10, r10
    1fd2:	bb 24       	eor	r11, r11
    1fd4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <xTaskGenericCreate>
    1fd8:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	51 f4       	brne	.+20     	; 0x1ff4 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1fe0:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 28 03 	sts	0x0328, r24
		xTickCount = ( portTickType ) 0U;
    1fe8:	10 92 25 03 	sts	0x0325, r1
    1fec:	10 92 24 03 	sts	0x0324, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1ff0:	0e 94 05 08 	call	0x100a	; 0x100a <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	df 90       	pop	r13
    2002:	cf 90       	pop	r12
    2004:	bf 90       	pop	r11
    2006:	af 90       	pop	r10
    2008:	08 95       	ret

0000200a <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    2012:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    2014:	10 92 28 03 	sts	0x0328, r1
	vPortEndScheduler();
    2018:	0e 94 3a 08 	call	0x1074	; 0x1074 <vPortEndScheduler>
}
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    202a:	80 91 29 03 	lds	r24, 0x0329
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	80 93 29 03 	sts	0x0329, r24
}
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	00 d0       	rcall	.+0      	; 0x2040 <xTaskResumeAll+0x6>
    2040:	00 d0       	rcall	.+0      	; 0x2042 <xTaskResumeAll+0x8>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2046:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    204e:	80 91 29 03 	lds	r24, 0x0329
    2052:	81 50       	subi	r24, 0x01	; 1
    2054:	80 93 29 03 	sts	0x0329, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2058:	80 91 29 03 	lds	r24, 0x0329
    205c:	88 23       	and	r24, r24
    205e:	09 f0       	breq	.+2      	; 0x2062 <xTaskResumeAll+0x28>
    2060:	6c c0       	rjmp	.+216    	; 0x213a <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2062:	80 91 23 03 	lds	r24, 0x0323
    2066:	88 23       	and	r24, r24
    2068:	09 f4       	brne	.+2      	; 0x206c <xTaskResumeAll+0x32>
    206a:	67 c0       	rjmp	.+206    	; 0x213a <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    206c:	19 82       	std	Y+1, r1	; 0x01
    206e:	41 c0       	rjmp	.+130    	; 0x20f2 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2070:	e0 91 76 03 	lds	r30, 0x0376
    2074:	f0 91 77 03 	lds	r31, 0x0377
    2078:	86 81       	ldd	r24, Z+6	; 0x06
    207a:	97 81       	ldd	r25, Z+7	; 0x07
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	0c 96       	adiw	r24, 0x0c	; 12
    2086:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	02 96       	adiw	r24, 0x02	; 2
    2090:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2094:	eb 81       	ldd	r30, Y+3	; 0x03
    2096:	fc 81       	ldd	r31, Y+4	; 0x04
    2098:	96 89       	ldd	r25, Z+22	; 0x16
    209a:	80 91 27 03 	lds	r24, 0x0327
    209e:	89 17       	cp	r24, r25
    20a0:	28 f4       	brcc	.+10     	; 0x20ac <xTaskResumeAll+0x72>
    20a2:	eb 81       	ldd	r30, Y+3	; 0x03
    20a4:	fc 81       	ldd	r31, Y+4	; 0x04
    20a6:	86 89       	ldd	r24, Z+22	; 0x16
    20a8:	80 93 27 03 	sts	0x0327, r24
    20ac:	eb 81       	ldd	r30, Y+3	; 0x03
    20ae:	fc 81       	ldd	r31, Y+4	; 0x04
    20b0:	86 89       	ldd	r24, Z+22	; 0x16
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	c9 01       	movw	r24, r18
    20b8:	88 0f       	add	r24, r24
    20ba:	99 1f       	adc	r25, r25
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	82 0f       	add	r24, r18
    20c6:	93 1f       	adc	r25, r19
    20c8:	82 5d       	subi	r24, 0xD2	; 210
    20ca:	9c 4f       	sbci	r25, 0xFC	; 252
    20cc:	2b 81       	ldd	r18, Y+3	; 0x03
    20ce:	3c 81       	ldd	r19, Y+4	; 0x04
    20d0:	2e 5f       	subi	r18, 0xFE	; 254
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	b9 01       	movw	r22, r18
    20d6:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    20da:	eb 81       	ldd	r30, Y+3	; 0x03
    20dc:	fc 81       	ldd	r31, Y+4	; 0x04
    20de:	96 89       	ldd	r25, Z+22	; 0x16
    20e0:	e0 91 20 03 	lds	r30, 0x0320
    20e4:	f0 91 21 03 	lds	r31, 0x0321
    20e8:	86 89       	ldd	r24, Z+22	; 0x16
    20ea:	98 17       	cp	r25, r24
    20ec:	10 f0       	brcs	.+4      	; 0x20f2 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    20f2:	80 91 71 03 	lds	r24, 0x0371
    20f6:	88 23       	and	r24, r24
    20f8:	09 f0       	breq	.+2      	; 0x20fc <xTaskResumeAll+0xc2>
    20fa:	ba cf       	rjmp	.-140    	; 0x2070 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    20fc:	80 91 2a 03 	lds	r24, 0x032A
    2100:	88 23       	and	r24, r24
    2102:	71 f0       	breq	.+28     	; 0x2120 <xTaskResumeAll+0xe6>
    2104:	07 c0       	rjmp	.+14     	; 0x2114 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2106:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <vTaskIncrementTick>
						--uxMissedTicks;
    210a:	80 91 2a 03 	lds	r24, 0x032A
    210e:	81 50       	subi	r24, 0x01	; 1
    2110:	80 93 2a 03 	sts	0x032A, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2114:	80 91 2a 03 	lds	r24, 0x032A
    2118:	88 23       	and	r24, r24
    211a:	a9 f7       	brne	.-22     	; 0x2106 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	21 f0       	breq	.+8      	; 0x212e <xTaskResumeAll+0xf4>
    2126:	80 91 2b 03 	lds	r24, 0x032B
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	31 f4       	brne	.+12     	; 0x213a <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2132:	10 92 2b 03 	sts	0x032B, r1
					portYIELD_WITHIN_API();
    2136:	0e 94 41 08 	call	0x1082	; 0x1082 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    213a:	0f 90       	pop	r0
    213c:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <xTaskGetTickCount+0x6>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    215e:	80 91 24 03 	lds	r24, 0x0324
    2162:	90 91 25 03 	lds	r25, 0x0325
    2166:	9a 83       	std	Y+2, r25	; 0x02
    2168:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	00 d0       	rcall	.+0      	; 0x2182 <xTaskGetTickCountFromISR+0x6>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2188:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    218a:	80 91 24 03 	lds	r24, 0x0324
    218e:	90 91 25 03 	lds	r25, 0x0325
    2192:	9b 83       	std	Y+3, r25	; 0x03
    2194:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	9b 81       	ldd	r25, Y+3	; 0x03
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    21ae:	80 91 23 03 	lds	r24, 0x0323
}
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <vTaskIncrementTick+0x6>
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <vTaskIncrementTick+0x8>
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <vTaskIncrementTick+0xa>
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    21c6:	80 91 29 03 	lds	r24, 0x0329
    21ca:	88 23       	and	r24, r24
    21cc:	09 f0       	breq	.+2      	; 0x21d0 <vTaskIncrementTick+0x18>
    21ce:	bb c0       	rjmp	.+374    	; 0x2346 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    21d0:	80 91 24 03 	lds	r24, 0x0324
    21d4:	90 91 25 03 	lds	r25, 0x0325
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	90 93 25 03 	sts	0x0325, r25
    21de:	80 93 24 03 	sts	0x0324, r24
		if( xTickCount == ( portTickType ) 0U )
    21e2:	80 91 24 03 	lds	r24, 0x0324
    21e6:	90 91 25 03 	lds	r25, 0x0325
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	d1 f5       	brne	.+116    	; 0x2262 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    21ee:	80 91 6d 03 	lds	r24, 0x036D
    21f2:	90 91 6e 03 	lds	r25, 0x036E
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    21fa:	80 91 6f 03 	lds	r24, 0x036F
    21fe:	90 91 70 03 	lds	r25, 0x0370
    2202:	90 93 6e 03 	sts	0x036E, r25
    2206:	80 93 6d 03 	sts	0x036D, r24
			pxOverflowDelayedTaskList = pxTemp;
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	90 93 70 03 	sts	0x0370, r25
    2212:	80 93 6f 03 	sts	0x036F, r24
			xNumOfOverflows++;
    2216:	80 91 2c 03 	lds	r24, 0x032C
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	80 93 2c 03 	sts	0x032C, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2220:	e0 91 6d 03 	lds	r30, 0x036D
    2224:	f0 91 6e 03 	lds	r31, 0x036E
    2228:	80 81       	ld	r24, Z
    222a:	88 23       	and	r24, r24
    222c:	39 f4       	brne	.+14     	; 0x223c <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    222e:	8f ef       	ldi	r24, 0xFF	; 255
    2230:	9f ef       	ldi	r25, 0xFF	; 255
    2232:	90 93 87 00 	sts	0x0087, r25
    2236:	80 93 86 00 	sts	0x0086, r24
    223a:	13 c0       	rjmp	.+38     	; 0x2262 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    223c:	e0 91 6d 03 	lds	r30, 0x036D
    2240:	f0 91 6e 03 	lds	r31, 0x036E
    2244:	05 80       	ldd	r0, Z+5	; 0x05
    2246:	f6 81       	ldd	r31, Z+6	; 0x06
    2248:	e0 2d       	mov	r30, r0
    224a:	86 81       	ldd	r24, Z+6	; 0x06
    224c:	97 81       	ldd	r25, Z+7	; 0x07
    224e:	9e 83       	std	Y+6, r25	; 0x06
    2250:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2252:	ed 81       	ldd	r30, Y+5	; 0x05
    2254:	fe 81       	ldd	r31, Y+6	; 0x06
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	90 93 87 00 	sts	0x0087, r25
    225e:	80 93 86 00 	sts	0x0086, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2262:	20 91 24 03 	lds	r18, 0x0324
    2266:	30 91 25 03 	lds	r19, 0x0325
    226a:	80 91 86 00 	lds	r24, 0x0086
    226e:	90 91 87 00 	lds	r25, 0x0087
    2272:	28 17       	cp	r18, r24
    2274:	39 07       	cpc	r19, r25
    2276:	08 f4       	brcc	.+2      	; 0x227a <vTaskIncrementTick+0xc2>
    2278:	6b c0       	rjmp	.+214    	; 0x2350 <vTaskIncrementTick+0x198>
    227a:	e0 91 6d 03 	lds	r30, 0x036D
    227e:	f0 91 6e 03 	lds	r31, 0x036E
    2282:	80 81       	ld	r24, Z
    2284:	88 23       	and	r24, r24
    2286:	39 f4       	brne	.+14     	; 0x2296 <vTaskIncrementTick+0xde>
    2288:	8f ef       	ldi	r24, 0xFF	; 255
    228a:	9f ef       	ldi	r25, 0xFF	; 255
    228c:	90 93 87 00 	sts	0x0087, r25
    2290:	80 93 86 00 	sts	0x0086, r24
    2294:	5d c0       	rjmp	.+186    	; 0x2350 <vTaskIncrementTick+0x198>
    2296:	e0 91 6d 03 	lds	r30, 0x036D
    229a:	f0 91 6e 03 	lds	r31, 0x036E
    229e:	05 80       	ldd	r0, Z+5	; 0x05
    22a0:	f6 81       	ldd	r31, Z+6	; 0x06
    22a2:	e0 2d       	mov	r30, r0
    22a4:	86 81       	ldd	r24, Z+6	; 0x06
    22a6:	97 81       	ldd	r25, Z+7	; 0x07
    22a8:	9e 83       	std	Y+6, r25	; 0x06
    22aa:	8d 83       	std	Y+5, r24	; 0x05
    22ac:	ed 81       	ldd	r30, Y+5	; 0x05
    22ae:	fe 81       	ldd	r31, Y+6	; 0x06
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	20 91 24 03 	lds	r18, 0x0324
    22bc:	30 91 25 03 	lds	r19, 0x0325
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	28 17       	cp	r18, r24
    22c6:	39 07       	cpc	r19, r25
    22c8:	38 f4       	brcc	.+14     	; 0x22d8 <vTaskIncrementTick+0x120>
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	9a 81       	ldd	r25, Y+2	; 0x02
    22ce:	90 93 87 00 	sts	0x0087, r25
    22d2:	80 93 86 00 	sts	0x0086, r24
    22d6:	3c c0       	rjmp	.+120    	; 0x2350 <vTaskIncrementTick+0x198>
    22d8:	8d 81       	ldd	r24, Y+5	; 0x05
    22da:	9e 81       	ldd	r25, Y+6	; 0x06
    22dc:	02 96       	adiw	r24, 0x02	; 2
    22de:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
    22e2:	ed 81       	ldd	r30, Y+5	; 0x05
    22e4:	fe 81       	ldd	r31, Y+6	; 0x06
    22e6:	84 89       	ldd	r24, Z+20	; 0x14
    22e8:	95 89       	ldd	r25, Z+21	; 0x15
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	29 f0       	breq	.+10     	; 0x22f8 <vTaskIncrementTick+0x140>
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	0c 96       	adiw	r24, 0x0c	; 12
    22f4:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
    22f8:	ed 81       	ldd	r30, Y+5	; 0x05
    22fa:	fe 81       	ldd	r31, Y+6	; 0x06
    22fc:	96 89       	ldd	r25, Z+22	; 0x16
    22fe:	80 91 27 03 	lds	r24, 0x0327
    2302:	89 17       	cp	r24, r25
    2304:	28 f4       	brcc	.+10     	; 0x2310 <vTaskIncrementTick+0x158>
    2306:	ed 81       	ldd	r30, Y+5	; 0x05
    2308:	fe 81       	ldd	r31, Y+6	; 0x06
    230a:	86 89       	ldd	r24, Z+22	; 0x16
    230c:	80 93 27 03 	sts	0x0327, r24
    2310:	ed 81       	ldd	r30, Y+5	; 0x05
    2312:	fe 81       	ldd	r31, Y+6	; 0x06
    2314:	86 89       	ldd	r24, Z+22	; 0x16
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	c9 01       	movw	r24, r18
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	88 0f       	add	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	82 0f       	add	r24, r18
    232a:	93 1f       	adc	r25, r19
    232c:	ac 01       	movw	r20, r24
    232e:	42 5d       	subi	r20, 0xD2	; 210
    2330:	5c 4f       	sbci	r21, 0xFC	; 252
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	9c 01       	movw	r18, r24
    2338:	2e 5f       	subi	r18, 0xFE	; 254
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	ca 01       	movw	r24, r20
    233e:	b9 01       	movw	r22, r18
    2340:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>
    2344:	9a cf       	rjmp	.-204    	; 0x227a <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    2346:	80 91 2a 03 	lds	r24, 0x032A
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	80 93 2a 03 	sts	0x032A, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2350:	26 96       	adiw	r28, 0x06	; 6
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <vTaskSwitchContext+0x6>
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    236c:	80 91 29 03 	lds	r24, 0x0329
    2370:	88 23       	and	r24, r24
    2372:	49 f0       	breq	.+18     	; 0x2386 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	80 93 2b 03 	sts	0x032B, r24
    237a:	54 c0       	rjmp	.+168    	; 0x2424 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    237c:	80 91 27 03 	lds	r24, 0x0327
    2380:	81 50       	subi	r24, 0x01	; 1
    2382:	80 93 27 03 	sts	0x0327, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2386:	80 91 27 03 	lds	r24, 0x0327
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	c9 01       	movw	r24, r18
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	82 0f       	add	r24, r18
    239e:	93 1f       	adc	r25, r19
    23a0:	fc 01       	movw	r30, r24
    23a2:	e2 5d       	subi	r30, 0xD2	; 210
    23a4:	fc 4f       	sbci	r31, 0xFC	; 252
    23a6:	80 81       	ld	r24, Z
    23a8:	88 23       	and	r24, r24
    23aa:	41 f3       	breq	.-48     	; 0x237c <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    23ac:	80 91 27 03 	lds	r24, 0x0327
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	c9 01       	movw	r24, r18
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	82 0f       	add	r24, r18
    23c4:	93 1f       	adc	r25, r19
    23c6:	82 5d       	subi	r24, 0xD2	; 210
    23c8:	9c 4f       	sbci	r25, 0xFC	; 252
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	e9 81       	ldd	r30, Y+1	; 0x01
    23d0:	fa 81       	ldd	r31, Y+2	; 0x02
    23d2:	01 80       	ldd	r0, Z+1	; 0x01
    23d4:	f2 81       	ldd	r31, Z+2	; 0x02
    23d6:	e0 2d       	mov	r30, r0
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	e9 81       	ldd	r30, Y+1	; 0x01
    23de:	fa 81       	ldd	r31, Y+2	; 0x02
    23e0:	92 83       	std	Z+2, r25	; 0x02
    23e2:	81 83       	std	Z+1, r24	; 0x01
    23e4:	e9 81       	ldd	r30, Y+1	; 0x01
    23e6:	fa 81       	ldd	r31, Y+2	; 0x02
    23e8:	21 81       	ldd	r18, Z+1	; 0x01
    23ea:	32 81       	ldd	r19, Z+2	; 0x02
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	03 96       	adiw	r24, 0x03	; 3
    23f2:	28 17       	cp	r18, r24
    23f4:	39 07       	cpc	r19, r25
    23f6:	59 f4       	brne	.+22     	; 0x240e <vTaskSwitchContext+0xac>
    23f8:	e9 81       	ldd	r30, Y+1	; 0x01
    23fa:	fa 81       	ldd	r31, Y+2	; 0x02
    23fc:	01 80       	ldd	r0, Z+1	; 0x01
    23fe:	f2 81       	ldd	r31, Z+2	; 0x02
    2400:	e0 2d       	mov	r30, r0
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	e9 81       	ldd	r30, Y+1	; 0x01
    2408:	fa 81       	ldd	r31, Y+2	; 0x02
    240a:	92 83       	std	Z+2, r25	; 0x02
    240c:	81 83       	std	Z+1, r24	; 0x01
    240e:	e9 81       	ldd	r30, Y+1	; 0x01
    2410:	fa 81       	ldd	r31, Y+2	; 0x02
    2412:	01 80       	ldd	r0, Z+1	; 0x01
    2414:	f2 81       	ldd	r31, Z+2	; 0x02
    2416:	e0 2d       	mov	r30, r0
    2418:	86 81       	ldd	r24, Z+6	; 0x06
    241a:	97 81       	ldd	r25, Z+7	; 0x07
    241c:	90 93 21 03 	sts	0x0321, r25
    2420:	80 93 20 03 	sts	0x0320, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	00 d0       	rcall	.+0      	; 0x2434 <vTaskPlaceOnEventList+0x6>
    2434:	00 d0       	rcall	.+0      	; 0x2436 <vTaskPlaceOnEventList+0x8>
    2436:	00 d0       	rcall	.+0      	; 0x2438 <vTaskPlaceOnEventList+0xa>
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
    2440:	7e 83       	std	Y+6, r23	; 0x06
    2442:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    2444:	4b 81       	ldd	r20, Y+3	; 0x03
    2446:	5c 81       	ldd	r21, Y+4	; 0x04
    2448:	80 91 20 03 	lds	r24, 0x0320
    244c:	90 91 21 03 	lds	r25, 0x0321
    2450:	9c 01       	movw	r18, r24
    2452:	24 5f       	subi	r18, 0xF4	; 244
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
    2456:	ca 01       	movw	r24, r20
    2458:	b9 01       	movw	r22, r18
    245a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    245e:	80 91 20 03 	lds	r24, 0x0320
    2462:	90 91 21 03 	lds	r25, 0x0321
    2466:	02 96       	adiw	r24, 0x02	; 2
    2468:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    246c:	20 91 24 03 	lds	r18, 0x0324
    2470:	30 91 25 03 	lds	r19, 0x0325
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	82 0f       	add	r24, r18
    247a:	93 1f       	adc	r25, r19
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	0e 94 11 14 	call	0x2822	; 0x2822 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    2488:	26 96       	adiw	r28, 0x06	; 6
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <xTaskRemoveFromEventList+0x6>
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <xTaskRemoveFromEventList+0x8>
    24a2:	0f 92       	push	r0
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	9d 83       	std	Y+5, r25	; 0x05
    24aa:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    24ac:	ec 81       	ldd	r30, Y+4	; 0x04
    24ae:	fd 81       	ldd	r31, Y+5	; 0x05
    24b0:	05 80       	ldd	r0, Z+5	; 0x05
    24b2:	f6 81       	ldd	r31, Z+6	; 0x06
    24b4:	e0 2d       	mov	r30, r0
    24b6:	86 81       	ldd	r24, Z+6	; 0x06
    24b8:	97 81       	ldd	r25, Z+7	; 0x07
    24ba:	9b 83       	std	Y+3, r25	; 0x03
    24bc:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	9b 81       	ldd	r25, Y+3	; 0x03
    24c2:	0c 96       	adiw	r24, 0x0c	; 12
    24c4:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    24c8:	80 91 29 03 	lds	r24, 0x0329
    24cc:	88 23       	and	r24, r24
    24ce:	61 f5       	brne	.+88     	; 0x2528 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	9b 81       	ldd	r25, Y+3	; 0x03
    24d4:	02 96       	adiw	r24, 0x02	; 2
    24d6:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    24da:	ea 81       	ldd	r30, Y+2	; 0x02
    24dc:	fb 81       	ldd	r31, Y+3	; 0x03
    24de:	96 89       	ldd	r25, Z+22	; 0x16
    24e0:	80 91 27 03 	lds	r24, 0x0327
    24e4:	89 17       	cp	r24, r25
    24e6:	28 f4       	brcc	.+10     	; 0x24f2 <xTaskRemoveFromEventList+0x58>
    24e8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ea:	fb 81       	ldd	r31, Y+3	; 0x03
    24ec:	86 89       	ldd	r24, Z+22	; 0x16
    24ee:	80 93 27 03 	sts	0x0327, r24
    24f2:	ea 81       	ldd	r30, Y+2	; 0x02
    24f4:	fb 81       	ldd	r31, Y+3	; 0x03
    24f6:	86 89       	ldd	r24, Z+22	; 0x16
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	c9 01       	movw	r24, r18
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	82 0f       	add	r24, r18
    250c:	93 1f       	adc	r25, r19
    250e:	ac 01       	movw	r20, r24
    2510:	42 5d       	subi	r20, 0xD2	; 210
    2512:	5c 4f       	sbci	r21, 0xFC	; 252
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	9c 01       	movw	r18, r24
    251a:	2e 5f       	subi	r18, 0xFE	; 254
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	ca 01       	movw	r24, r20
    2520:	b9 01       	movw	r22, r18
    2522:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>
    2526:	0a c0       	rjmp	.+20     	; 0x253c <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	9c 01       	movw	r18, r24
    252e:	24 5f       	subi	r18, 0xF4	; 244
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	81 e7       	ldi	r24, 0x71	; 113
    2534:	93 e0       	ldi	r25, 0x03	; 3
    2536:	b9 01       	movw	r22, r18
    2538:	0e 94 81 05 	call	0xb02	; 0xb02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    253c:	ea 81       	ldd	r30, Y+2	; 0x02
    253e:	fb 81       	ldd	r31, Y+3	; 0x03
    2540:	96 89       	ldd	r25, Z+22	; 0x16
    2542:	e0 91 20 03 	lds	r30, 0x0320
    2546:	f0 91 21 03 	lds	r31, 0x0321
    254a:	86 89       	ldd	r24, Z+22	; 0x16
    254c:	98 17       	cp	r25, r24
    254e:	18 f0       	brcs	.+6      	; 0x2556 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	01 c0       	rjmp	.+2      	; 0x2558 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    2556:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2558:	89 81       	ldd	r24, Y+1	; 0x01
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <vTaskSetTimeOutState+0x6>
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2578:	80 91 2c 03 	lds	r24, 0x032C
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2582:	80 91 24 03 	lds	r24, 0x0324
    2586:	90 91 25 03 	lds	r25, 0x0325
    258a:	e9 81       	ldd	r30, Y+1	; 0x01
    258c:	fa 81       	ldd	r31, Y+2	; 0x02
    258e:	92 83       	std	Z+2, r25	; 0x02
    2590:	81 83       	std	Z+1, r24	; 0x01
}
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <xTaskCheckForTimeOut+0x6>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <xTaskCheckForTimeOut+0x8>
    25a4:	0f 92       	push	r0
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	9b 83       	std	Y+3, r25	; 0x03
    25ac:	8a 83       	std	Y+2, r24	; 0x02
    25ae:	7d 83       	std	Y+5, r23	; 0x05
    25b0:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    25b8:	ea 81       	ldd	r30, Y+2	; 0x02
    25ba:	fb 81       	ldd	r31, Y+3	; 0x03
    25bc:	90 81       	ld	r25, Z
    25be:	80 91 2c 03 	lds	r24, 0x032C
    25c2:	98 17       	cp	r25, r24
    25c4:	71 f0       	breq	.+28     	; 0x25e2 <xTaskCheckForTimeOut+0x46>
    25c6:	ea 81       	ldd	r30, Y+2	; 0x02
    25c8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ca:	21 81       	ldd	r18, Z+1	; 0x01
    25cc:	32 81       	ldd	r19, Z+2	; 0x02
    25ce:	80 91 24 03 	lds	r24, 0x0324
    25d2:	90 91 25 03 	lds	r25, 0x0325
    25d6:	82 17       	cp	r24, r18
    25d8:	93 07       	cpc	r25, r19
    25da:	18 f0       	brcs	.+6      	; 0x25e2 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	2f c0       	rjmp	.+94     	; 0x2640 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    25e2:	20 91 24 03 	lds	r18, 0x0324
    25e6:	30 91 25 03 	lds	r19, 0x0325
    25ea:	ea 81       	ldd	r30, Y+2	; 0x02
    25ec:	fb 81       	ldd	r31, Y+3	; 0x03
    25ee:	81 81       	ldd	r24, Z+1	; 0x01
    25f0:	92 81       	ldd	r25, Z+2	; 0x02
    25f2:	28 1b       	sub	r18, r24
    25f4:	39 0b       	sbc	r19, r25
    25f6:	ec 81       	ldd	r30, Y+4	; 0x04
    25f8:	fd 81       	ldd	r31, Y+5	; 0x05
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	28 17       	cp	r18, r24
    2600:	39 07       	cpc	r19, r25
    2602:	e0 f4       	brcc	.+56     	; 0x263c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2604:	ec 81       	ldd	r30, Y+4	; 0x04
    2606:	fd 81       	ldd	r31, Y+5	; 0x05
    2608:	40 81       	ld	r20, Z
    260a:	51 81       	ldd	r21, Z+1	; 0x01
    260c:	ea 81       	ldd	r30, Y+2	; 0x02
    260e:	fb 81       	ldd	r31, Y+3	; 0x03
    2610:	21 81       	ldd	r18, Z+1	; 0x01
    2612:	32 81       	ldd	r19, Z+2	; 0x02
    2614:	80 91 24 03 	lds	r24, 0x0324
    2618:	90 91 25 03 	lds	r25, 0x0325
    261c:	b9 01       	movw	r22, r18
    261e:	68 1b       	sub	r22, r24
    2620:	79 0b       	sbc	r23, r25
    2622:	cb 01       	movw	r24, r22
    2624:	84 0f       	add	r24, r20
    2626:	95 1f       	adc	r25, r21
    2628:	ec 81       	ldd	r30, Y+4	; 0x04
    262a:	fd 81       	ldd	r31, Y+5	; 0x05
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	0e 94 b5 12 	call	0x256a	; 0x256a <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2638:	19 82       	std	Y+1, r1	; 0x01
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2640:	0f 90       	pop	r0
    2642:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2644:	89 81       	ldd	r24, Y+1	; 0x01
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	80 93 2b 03 	sts	0x032B, r24
}
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	00 d0       	rcall	.+0      	; 0x2670 <prvIdleTask+0x6>
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    2678:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <prvCheckTasksWaitingTermination>
    267c:	fd cf       	rjmp	.-6      	; 0x2678 <prvIdleTask+0xe>

0000267e <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	29 97       	sbiw	r28, 0x09	; 9
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	7c 83       	std	Y+4, r23	; 0x04
    269c:	6b 83       	std	Y+3, r22	; 0x03
    269e:	4d 83       	std	Y+5, r20	; 0x05
    26a0:	3f 83       	std	Y+7, r19	; 0x07
    26a2:	2e 83       	std	Y+6, r18	; 0x06
    26a4:	19 87       	std	Y+9, r17	; 0x09
    26a6:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	49 96       	adiw	r24, 0x19	; 25
    26ae:	2b 81       	ldd	r18, Y+3	; 0x03
    26b0:	3c 81       	ldd	r19, Y+4	; 0x04
    26b2:	b9 01       	movw	r22, r18
    26b4:	48 e0       	ldi	r20, 0x08	; 8
    26b6:	50 e0       	ldi	r21, 0x00	; 0
    26b8:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    26bc:	e9 81       	ldd	r30, Y+1	; 0x01
    26be:	fa 81       	ldd	r31, Y+2	; 0x02
    26c0:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	85 30       	cpi	r24, 0x05	; 5
    26c6:	10 f0       	brcs	.+4      	; 0x26cc <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    26c8:	84 e0       	ldi	r24, 0x04	; 4
    26ca:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	02 96       	adiw	r24, 0x02	; 2
    26da:	0e 94 71 05 	call	0xae2	; 0xae2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	0c 96       	adiw	r24, 0x0c	; 12
    26e4:	0e 94 71 05 	call	0xae2	; 0xae2 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    26e8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ea:	fa 81       	ldd	r31, Y+2	; 0x02
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	91 87       	std	Z+9, r25	; 0x09
    26f2:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	85 e0       	ldi	r24, 0x05	; 5
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	82 1b       	sub	r24, r18
    2700:	93 0b       	sbc	r25, r19
    2702:	e9 81       	ldd	r30, Y+1	; 0x01
    2704:	fa 81       	ldd	r31, Y+2	; 0x02
    2706:	95 87       	std	Z+13, r25	; 0x0d
    2708:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    270a:	e9 81       	ldd	r30, Y+1	; 0x01
    270c:	fa 81       	ldd	r31, Y+2	; 0x02
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	93 8b       	std	Z+19, r25	; 0x13
    2714:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    2716:	29 96       	adiw	r28, 0x09	; 9
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	08 95       	ret

0000272c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	0f 92       	push	r0
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    2736:	19 82       	std	Y+1, r1	; 0x01
    2738:	13 c0       	rjmp	.+38     	; 0x2760 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	c9 01       	movw	r24, r18
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	82 0f       	add	r24, r18
    2750:	93 1f       	adc	r25, r19
    2752:	82 5d       	subi	r24, 0xD2	; 210
    2754:	9c 4f       	sbci	r25, 0xFC	; 252
    2756:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	8f 5f       	subi	r24, 0xFF	; 255
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	85 30       	cpi	r24, 0x05	; 5
    2764:	50 f3       	brcs	.-44     	; 0x273a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2766:	8b e5       	ldi	r24, 0x5B	; 91
    2768:	93 e0       	ldi	r25, 0x03	; 3
    276a:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    276e:	84 e6       	ldi	r24, 0x64	; 100
    2770:	93 e0       	ldi	r25, 0x03	; 3
    2772:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2776:	81 e7       	ldi	r24, 0x71	; 113
    2778:	93 e0       	ldi	r25, 0x03	; 3
    277a:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    277e:	8a e7       	ldi	r24, 0x7A	; 122
    2780:	93 e0       	ldi	r25, 0x03	; 3
    2782:	0e 94 47 05 	call	0xa8e	; 0xa8e <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2786:	8b e5       	ldi	r24, 0x5B	; 91
    2788:	93 e0       	ldi	r25, 0x03	; 3
    278a:	90 93 6e 03 	sts	0x036E, r25
    278e:	80 93 6d 03 	sts	0x036D, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    2792:	84 e6       	ldi	r24, 0x64	; 100
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	90 93 70 03 	sts	0x0370, r25
    279a:	80 93 6f 03 	sts	0x036F, r24
}
    279e:	0f 90       	pop	r0
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <prvCheckTasksWaitingTermination+0x6>
    27ac:	0f 92       	push	r0
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    27b2:	80 91 22 03 	lds	r24, 0x0322
    27b6:	88 23       	and	r24, r24
    27b8:	71 f1       	breq	.+92     	; 0x2816 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    27ba:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    27be:	80 91 7a 03 	lds	r24, 0x037A
    27c2:	1b 82       	std	Y+3, r1	; 0x03
    27c4:	88 23       	and	r24, r24
    27c6:	11 f4       	brne	.+4      	; 0x27cc <prvCheckTasksWaitingTermination+0x26>
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    27cc:	0e 94 1d 10 	call	0x203a	; 0x203a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	88 23       	and	r24, r24
    27d4:	01 f5       	brne	.+64     	; 0x2816 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    27dc:	e0 91 7f 03 	lds	r30, 0x037F
    27e0:	f0 91 80 03 	lds	r31, 0x0380
    27e4:	86 81       	ldd	r24, Z+6	; 0x06
    27e6:	97 81       	ldd	r25, Z+7	; 0x07
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	02 96       	adiw	r24, 0x02	; 2
    27f2:	0e 94 39 06 	call	0xc72	; 0xc72 <vListRemove>
					--uxCurrentNumberOfTasks;
    27f6:	80 91 23 03 	lds	r24, 0x0323
    27fa:	81 50       	subi	r24, 0x01	; 1
    27fc:	80 93 23 03 	sts	0x0323, r24
					--uxTasksDeleted;
    2800:	80 91 22 03 	lds	r24, 0x0322
    2804:	81 50       	subi	r24, 0x01	; 1
    2806:	80 93 22 03 	sts	0x0322, r24
				}
				taskEXIT_CRITICAL();
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	0e 94 aa 14 	call	0x2954	; 0x2954 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	00 d0       	rcall	.+0      	; 0x2828 <prvAddCurrentTaskToDelayedList+0x6>
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2830:	e0 91 20 03 	lds	r30, 0x0320
    2834:	f0 91 21 03 	lds	r31, 0x0321
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	93 83       	std	Z+3, r25	; 0x03
    283e:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    2840:	20 91 24 03 	lds	r18, 0x0324
    2844:	30 91 25 03 	lds	r19, 0x0325
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	82 17       	cp	r24, r18
    284e:	93 07       	cpc	r25, r19
    2850:	70 f4       	brcc	.+28     	; 0x286e <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2852:	80 91 6f 03 	lds	r24, 0x036F
    2856:	90 91 70 03 	lds	r25, 0x0370
    285a:	20 91 20 03 	lds	r18, 0x0320
    285e:	30 91 21 03 	lds	r19, 0x0321
    2862:	2e 5f       	subi	r18, 0xFE	; 254
    2864:	3f 4f       	sbci	r19, 0xFF	; 255
    2866:	b9 01       	movw	r22, r18
    2868:	0e 94 cd 05 	call	0xb9a	; 0xb9a <vListInsert>
    286c:	1e c0       	rjmp	.+60     	; 0x28aa <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    286e:	40 91 6d 03 	lds	r20, 0x036D
    2872:	50 91 6e 03 	lds	r21, 0x036E
    2876:	80 91 20 03 	lds	r24, 0x0320
    287a:	90 91 21 03 	lds	r25, 0x0321
    287e:	9c 01       	movw	r18, r24
    2880:	2e 5f       	subi	r18, 0xFE	; 254
    2882:	3f 4f       	sbci	r19, 0xFF	; 255
    2884:	ca 01       	movw	r24, r20
    2886:	b9 01       	movw	r22, r18
    2888:	0e 94 cd 05 	call	0xb9a	; 0xb9a <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    288c:	20 91 86 00 	lds	r18, 0x0086
    2890:	30 91 87 00 	lds	r19, 0x0087
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	82 17       	cp	r24, r18
    289a:	93 07       	cpc	r25, r19
    289c:	30 f4       	brcc	.+12     	; 0x28aa <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	9a 81       	ldd	r25, Y+2	; 0x02
    28a2:	90 93 87 00 	sts	0x0087, r25
    28a6:	80 93 86 00 	sts	0x0086, r24
		}
	}
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	28 97       	sbiw	r28, 0x08	; 8
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	8b 83       	std	Y+3, r24	; 0x03
    28cc:	7e 83       	std	Y+6, r23	; 0x06
    28ce:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    28d0:	81 e2       	ldi	r24, 0x21	; 33
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <pvPortMalloc>
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	69 f1       	breq	.+90     	; 0x293e <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	39 f4       	brne	.+14     	; 0x28fa <prvAllocateTCBAndStack+0x46>
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <pvPortMalloc>
    28f4:	98 87       	std	Y+8, r25	; 0x08
    28f6:	8f 83       	std	Y+7, r24	; 0x07
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <prvAllocateTCBAndStack+0x4e>
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	98 87       	std	Y+8, r25	; 0x08
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	8f 81       	ldd	r24, Y+7	; 0x07
    2908:	98 85       	ldd	r25, Y+8	; 0x08
    290a:	90 8f       	std	Z+24, r25	; 0x18
    290c:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	87 89       	ldd	r24, Z+23	; 0x17
    2914:	90 8d       	ldd	r25, Z+24	; 0x18
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	39 f4       	brne	.+14     	; 0x2928 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	9a 81       	ldd	r25, Y+2	; 0x02
    291e:	0e 94 21 05 	call	0xa42	; 0xa42 <vPortFree>
			pxNewTCB = NULL;
    2922:	1a 82       	std	Y+2, r1	; 0x02
    2924:	19 82       	std	Y+1, r1	; 0x01
    2926:	0b c0       	rjmp	.+22     	; 0x293e <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    2928:	e9 81       	ldd	r30, Y+1	; 0x01
    292a:	fa 81       	ldd	r31, Y+2	; 0x02
    292c:	87 89       	ldd	r24, Z+23	; 0x17
    292e:	90 8d       	ldd	r25, Z+24	; 0x18
    2930:	2b 81       	ldd	r18, Y+3	; 0x03
    2932:	3c 81       	ldd	r19, Y+4	; 0x04
    2934:	65 ea       	ldi	r22, 0xA5	; 165
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	a9 01       	movw	r20, r18
    293a:	0e 94 c9 14 	call	0x2992	; 0x2992 <memset>
		}
	}

	return pxNewTCB;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2942:	28 96       	adiw	r28, 0x08	; 8
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <prvDeleteTCB+0x6>
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    2962:	e9 81       	ldd	r30, Y+1	; 0x01
    2964:	fa 81       	ldd	r31, Y+2	; 0x02
    2966:	87 89       	ldd	r24, Z+23	; 0x17
    2968:	90 8d       	ldd	r25, Z+24	; 0x18
    296a:	0e 94 21 05 	call	0xa42	; 0xa42 <vPortFree>
		vPortFree( pxTCB );
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	0e 94 21 05 	call	0xa42	; 0xa42 <vPortFree>
	}
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <memcpy>:
    2980:	fb 01       	movw	r30, r22
    2982:	dc 01       	movw	r26, r24
    2984:	02 c0       	rjmp	.+4      	; 0x298a <memcpy+0xa>
    2986:	01 90       	ld	r0, Z+
    2988:	0d 92       	st	X+, r0
    298a:	41 50       	subi	r20, 0x01	; 1
    298c:	50 40       	sbci	r21, 0x00	; 0
    298e:	d8 f7       	brcc	.-10     	; 0x2986 <memcpy+0x6>
    2990:	08 95       	ret

00002992 <memset>:
    2992:	dc 01       	movw	r26, r24
    2994:	01 c0       	rjmp	.+2      	; 0x2998 <memset+0x6>
    2996:	6d 93       	st	X+, r22
    2998:	41 50       	subi	r20, 0x01	; 1
    299a:	50 40       	sbci	r21, 0x00	; 0
    299c:	e0 f7       	brcc	.-8      	; 0x2996 <memset+0x4>
    299e:	08 95       	ret

000029a0 <strncpy>:
    29a0:	fb 01       	movw	r30, r22
    29a2:	dc 01       	movw	r26, r24
    29a4:	41 50       	subi	r20, 0x01	; 1
    29a6:	50 40       	sbci	r21, 0x00	; 0
    29a8:	48 f0       	brcs	.+18     	; 0x29bc <strncpy+0x1c>
    29aa:	01 90       	ld	r0, Z+
    29ac:	0d 92       	st	X+, r0
    29ae:	00 20       	and	r0, r0
    29b0:	c9 f7       	brne	.-14     	; 0x29a4 <strncpy+0x4>
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <strncpy+0x16>
    29b4:	1d 92       	st	X+, r1
    29b6:	41 50       	subi	r20, 0x01	; 1
    29b8:	50 40       	sbci	r21, 0x00	; 0
    29ba:	e0 f7       	brcc	.-8      	; 0x29b4 <strncpy+0x14>
    29bc:	08 95       	ret

000029be <_exit>:
    29be:	f8 94       	cli

000029c0 <__stop_program>:
    29c0:	ff cf       	rjmp	.-2      	; 0x29c0 <__stop_program>
