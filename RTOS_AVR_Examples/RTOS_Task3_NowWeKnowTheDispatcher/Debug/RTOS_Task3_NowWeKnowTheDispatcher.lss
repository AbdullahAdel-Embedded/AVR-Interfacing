
RTOS_Task3_NowWeKnowTheDispatcher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000274e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000274e  000027e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fc  00800074  00800074  000027f6  2**0
                  ALLOC
  3 .stab         000043bc  00000000  00000000  000027f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002975  00000000  00000000  00006bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 17 08 	jmp	0x102e	; 0x102e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 a5 13 	jmp	0x274a	; 0x274a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	df 93       	push	r29
      a2:	cf 93       	push	r28
      a4:	cd b7       	in	r28, 0x3d	; 61
      a6:	de b7       	in	r29, 0x3e	; 62
      a8:	ea e3       	ldi	r30, 0x3A	; 58
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	80 83       	st	Z, r24
      b0:	e7 e3       	ldi	r30, 0x37	; 55
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	10 82       	st	Z, r1
      b6:	a8 e3       	ldi	r26, 0x38	; 56
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e8 e3       	ldi	r30, 0x38	; 56
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	81 60       	ori	r24, 0x01	; 1
      c2:	8c 93       	st	X, r24
      c4:	20 e6       	ldi	r18, 0x60	; 96
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	86 e9       	ldi	r24, 0x96	; 150
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	e4 e7       	ldi	r30, 0x74	; 116
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	b9 01       	movw	r22, r18
      d2:	45 e5       	ldi	r20, 0x55	; 85
      d4:	50 e0       	ldi	r21, 0x00	; 0
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	03 e0       	ldi	r16, 0x03	; 3
      dc:	7f 01       	movw	r14, r30
      de:	cc 24       	eor	r12, r12
      e0:	dd 24       	eor	r13, r13
      e2:	aa 24       	eor	r10, r10
      e4:	bb 24       	eor	r11, r11
      e6:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xTaskGenericCreate>
      ea:	26 e6       	ldi	r18, 0x66	; 102
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	80 eb       	ldi	r24, 0xB0	; 176
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	e6 e7       	ldi	r30, 0x76	; 118
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	b9 01       	movw	r22, r18
      f8:	45 e5       	ldi	r20, 0x55	; 85
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	02 e0       	ldi	r16, 0x02	; 2
     102:	7f 01       	movw	r14, r30
     104:	cc 24       	eor	r12, r12
     106:	dd 24       	eor	r13, r13
     108:	aa 24       	eor	r10, r10
     10a:	bb 24       	eor	r11, r11
     10c:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xTaskGenericCreate>
     110:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <vTaskStartScheduler>
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	cf 91       	pop	r28
     11a:	df 91       	pop	r29
     11c:	0f 91       	pop	r16
     11e:	ff 90       	pop	r15
     120:	ef 90       	pop	r14
     122:	df 90       	pop	r13
     124:	cf 90       	pop	r12
     126:	bf 90       	pop	r11
     128:	af 90       	pop	r10
     12a:	08 95       	ret

0000012c <LedIntro_code>:
	return 0;
}

/*Task1 Code */
void LedIntro_code(void*pvParamter)
{
     12c:	df 93       	push	r29
     12e:	cf 93       	push	r28
     130:	00 d0       	rcall	.+0      	; 0x132 <LedIntro_code+0x6>
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01

	while(1){
		vTaskDelay(200);
     13a:	88 ec       	ldi	r24, 0xC8	; 200
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <vTaskDelay>
		if (flag == 1)
     142:	80 91 78 00 	lds	r24, 0x0078
     146:	81 30       	cpi	r24, 0x01	; 1
     148:	c1 f7       	brne	.-16     	; 0x13a <LedIntro_code+0xe>
		{

			PORTA ^= 0x01;
     14a:	ab e3       	ldi	r26, 0x3B	; 59
     14c:	b0 e0       	ldi	r27, 0x00	; 0
     14e:	eb e3       	ldi	r30, 0x3B	; 59
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	90 81       	ld	r25, Z
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	89 27       	eor	r24, r25
     158:	8c 93       	st	X, r24
			/*Send Task in Blocked Queue for 2000 Ticks */
			flag = 0;
     15a:	10 92 78 00 	sts	0x0078, r1
     15e:	ed cf       	rjmp	.-38     	; 0x13a <LedIntro_code+0xe>

00000160 <ButtonIntro_code>:


}

void ButtonIntro_code (void * pvParamter)
{
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	00 d0       	rcall	.+0      	; 0x166 <ButtonIntro_code+0x6>
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	9a 83       	std	Y+2, r25	; 0x02
     16c:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		vTaskDelay(100);
     16e:	84 e6       	ldi	r24, 0x64	; 100
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <vTaskDelay>
		if ( ( (PINB >> 1) & 0x01 ) == 0 )
     176:	e6 e3       	ldi	r30, 0x36	; 54
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	80 81       	ld	r24, Z
     17c:	86 95       	lsr	r24
     17e:	88 2f       	mov	r24, r24
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	81 70       	andi	r24, 0x01	; 1
     184:	90 70       	andi	r25, 0x00	; 0
     186:	00 97       	sbiw	r24, 0x00	; 0
     188:	91 f7       	brne	.-28     	; 0x16e <ButtonIntro_code+0xe>
		{
			flag = 1 ;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 78 00 	sts	0x0078, r24
     190:	ee cf       	rjmp	.-36     	; 0x16e <ButtonIntro_code+0xe>

00000192 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     192:	df 93       	push	r29
     194:	cf 93       	push	r28
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	27 97       	sbiw	r28, 0x07	; 7
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	9d 83       	std	Y+5, r25	; 0x05
     1a8:	8c 83       	std	Y+4, r24	; 0x04
     1aa:	6e 83       	std	Y+6, r22	; 0x06
     1ac:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     1ae:	8a e1       	ldi	r24, 0x1A	; 26
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 a1 03 	call	0x742	; 0x742 <pvPortMalloc>
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <xCoRoutineCreate+0x32>
     1c2:	6f c0       	rjmp	.+222    	; 0x2a2 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     1c4:	80 91 79 00 	lds	r24, 0x0079
     1c8:	90 91 7a 00 	lds	r25, 0x007A
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	41 f4       	brne	.+16     	; 0x1e0 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	90 93 7a 00 	sts	0x007A, r25
     1d8:	80 93 79 00 	sts	0x0079, r24
			prvInitialiseCoRoutineLists();
     1dc:	0e 94 30 03 	call	0x660	; 0x660 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     1e0:	8e 81       	ldd	r24, Y+6	; 0x06
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	10 f0       	brcs	.+4      	; 0x1ea <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     1ea:	e9 81       	ldd	r30, Y+1	; 0x01
     1ec:	fa 81       	ldd	r31, Y+2	; 0x02
     1ee:	11 8e       	std	Z+25, r1	; 0x19
     1f0:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     1f2:	e9 81       	ldd	r30, Y+1	; 0x01
     1f4:	fa 81       	ldd	r31, Y+2	; 0x02
     1f6:	8e 81       	ldd	r24, Y+6	; 0x06
     1f8:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     1fa:	e9 81       	ldd	r30, Y+1	; 0x01
     1fc:	fa 81       	ldd	r31, Y+2	; 0x02
     1fe:	8f 81       	ldd	r24, Y+7	; 0x07
     200:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     202:	e9 81       	ldd	r30, Y+1	; 0x01
     204:	fa 81       	ldd	r31, Y+2	; 0x02
     206:	8c 81       	ldd	r24, Y+4	; 0x04
     208:	9d 81       	ldd	r25, Y+5	; 0x05
     20a:	91 83       	std	Z+1, r25	; 0x01
     20c:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	9a 81       	ldd	r25, Y+2	; 0x02
     212:	02 96       	adiw	r24, 0x02	; 2
     214:	0e 94 37 04 	call	0x86e	; 0x86e <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	9a 81       	ldd	r25, Y+2	; 0x02
     21c:	0c 96       	adiw	r24, 0x0c	; 12
     21e:	0e 94 37 04 	call	0x86e	; 0x86e <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     222:	e9 81       	ldd	r30, Y+1	; 0x01
     224:	fa 81       	ldd	r31, Y+2	; 0x02
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	9a 81       	ldd	r25, Y+2	; 0x02
     22a:	91 87       	std	Z+9, r25	; 0x09
     22c:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     22e:	e9 81       	ldd	r30, Y+1	; 0x01
     230:	fa 81       	ldd	r31, Y+2	; 0x02
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	9a 81       	ldd	r25, Y+2	; 0x02
     236:	93 8b       	std	Z+19, r25	; 0x13
     238:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     23a:	8e 81       	ldd	r24, Y+6	; 0x06
     23c:	28 2f       	mov	r18, r24
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	85 e0       	ldi	r24, 0x05	; 5
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	82 1b       	sub	r24, r18
     246:	93 0b       	sbc	r25, r19
     248:	e9 81       	ldd	r30, Y+1	; 0x01
     24a:	fa 81       	ldd	r31, Y+2	; 0x02
     24c:	95 87       	std	Z+13, r25	; 0x0d
     24e:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     250:	e9 81       	ldd	r30, Y+1	; 0x01
     252:	fa 81       	ldd	r31, Y+2	; 0x02
     254:	96 89       	ldd	r25, Z+22	; 0x16
     256:	80 91 7b 00 	lds	r24, 0x007B
     25a:	89 17       	cp	r24, r25
     25c:	28 f4       	brcc	.+10     	; 0x268 <xCoRoutineCreate+0xd6>
     25e:	e9 81       	ldd	r30, Y+1	; 0x01
     260:	fa 81       	ldd	r31, Y+2	; 0x02
     262:	86 89       	ldd	r24, Z+22	; 0x16
     264:	80 93 7b 00 	sts	0x007B, r24
     268:	e9 81       	ldd	r30, Y+1	; 0x01
     26a:	fa 81       	ldd	r31, Y+2	; 0x02
     26c:	86 89       	ldd	r24, Z+22	; 0x16
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	c9 01       	movw	r24, r18
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	88 0f       	add	r24, r24
     27e:	99 1f       	adc	r25, r25
     280:	82 0f       	add	r24, r18
     282:	93 1f       	adc	r25, r19
     284:	ac 01       	movw	r20, r24
     286:	4e 57       	subi	r20, 0x7E	; 126
     288:	5f 4f       	sbci	r21, 0xFF	; 255
     28a:	89 81       	ldd	r24, Y+1	; 0x01
     28c:	9a 81       	ldd	r25, Y+2	; 0x02
     28e:	9c 01       	movw	r18, r24
     290:	2e 5f       	subi	r18, 0xFE	; 254
     292:	3f 4f       	sbci	r19, 0xFF	; 255
     294:	ca 01       	movw	r24, r20
     296:	b9 01       	movw	r22, r18
     298:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>

		xReturn = pdPASS;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	8b 83       	std	Y+3, r24	; 0x03
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     2a8:	27 96       	adiw	r28, 0x07	; 7
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	cf 91       	pop	r28
     2b6:	df 91       	pop	r29
     2b8:	08 95       	ret

000002ba <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <vCoRoutineAddToDelayedList+0x6>
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <vCoRoutineAddToDelayedList+0x8>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <vCoRoutineAddToDelayedList+0xa>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
     2c8:	9c 83       	std	Y+4, r25	; 0x04
     2ca:	8b 83       	std	Y+3, r24	; 0x03
     2cc:	7e 83       	std	Y+6, r23	; 0x06
     2ce:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     2d0:	20 91 7c 00 	lds	r18, 0x007C
     2d4:	30 91 7d 00 	lds	r19, 0x007D
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	9c 81       	ldd	r25, Y+4	; 0x04
     2dc:	82 0f       	add	r24, r18
     2de:	93 1f       	adc	r25, r19
     2e0:	9a 83       	std	Y+2, r25	; 0x02
     2e2:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     2e4:	80 91 79 00 	lds	r24, 0x0079
     2e8:	90 91 7a 00 	lds	r25, 0x007A
     2ec:	02 96       	adiw	r24, 0x02	; 2
     2ee:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     2f2:	e0 91 79 00 	lds	r30, 0x0079
     2f6:	f0 91 7a 00 	lds	r31, 0x007A
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	93 83       	std	Z+3, r25	; 0x03
     300:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     302:	20 91 7c 00 	lds	r18, 0x007C
     306:	30 91 7d 00 	lds	r19, 0x007D
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	9a 81       	ldd	r25, Y+2	; 0x02
     30e:	82 17       	cp	r24, r18
     310:	93 07       	cpc	r25, r19
     312:	70 f4       	brcc	.+28     	; 0x330 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     314:	80 91 a8 00 	lds	r24, 0x00A8
     318:	90 91 a9 00 	lds	r25, 0x00A9
     31c:	20 91 79 00 	lds	r18, 0x0079
     320:	30 91 7a 00 	lds	r19, 0x007A
     324:	2e 5f       	subi	r18, 0xFE	; 254
     326:	3f 4f       	sbci	r19, 0xFF	; 255
     328:	b9 01       	movw	r22, r18
     32a:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
     32e:	0d c0       	rjmp	.+26     	; 0x34a <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     330:	80 91 a6 00 	lds	r24, 0x00A6
     334:	90 91 a7 00 	lds	r25, 0x00A7
     338:	20 91 79 00 	lds	r18, 0x0079
     33c:	30 91 7a 00 	lds	r19, 0x007A
     340:	2e 5f       	subi	r18, 0xFE	; 254
     342:	3f 4f       	sbci	r19, 0xFF	; 255
     344:	b9 01       	movw	r22, r18
     346:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
	}

	if( pxEventList )
     34a:	8d 81       	ldd	r24, Y+5	; 0x05
     34c:	9e 81       	ldd	r25, Y+6	; 0x06
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	61 f0       	breq	.+24     	; 0x36a <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     352:	80 91 79 00 	lds	r24, 0x0079
     356:	90 91 7a 00 	lds	r25, 0x007A
     35a:	9c 01       	movw	r18, r24
     35c:	24 5f       	subi	r18, 0xF4	; 244
     35e:	3f 4f       	sbci	r19, 0xFF	; 255
     360:	8d 81       	ldd	r24, Y+5	; 0x05
     362:	9e 81       	ldd	r25, Y+6	; 0x06
     364:	b9 01       	movw	r22, r18
     366:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
	}
}
     36a:	26 96       	adiw	r28, 0x06	; 6
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	cf 91       	pop	r28
     378:	df 91       	pop	r29
     37a:	08 95       	ret

0000037c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     37c:	df 93       	push	r29
     37e:	cf 93       	push	r28
     380:	00 d0       	rcall	.+0      	; 0x382 <prvCheckPendingReadyList+0x6>
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	3a c0       	rjmp	.+116    	; 0x3fc <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     388:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     38a:	e0 91 af 00 	lds	r30, 0x00AF
     38e:	f0 91 b0 00 	lds	r31, 0x00B0
     392:	86 81       	ldd	r24, Z+6	; 0x06
     394:	97 81       	ldd	r25, Z+7	; 0x07
     396:	9a 83       	std	Y+2, r25	; 0x02
     398:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	0c 96       	adiw	r24, 0x0c	; 12
     3a0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
		}
		portENABLE_INTERRUPTS();
     3a4:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	9a 81       	ldd	r25, Y+2	; 0x02
     3aa:	02 96       	adiw	r24, 0x02	; 2
     3ac:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     3b0:	e9 81       	ldd	r30, Y+1	; 0x01
     3b2:	fa 81       	ldd	r31, Y+2	; 0x02
     3b4:	96 89       	ldd	r25, Z+22	; 0x16
     3b6:	80 91 7b 00 	lds	r24, 0x007B
     3ba:	89 17       	cp	r24, r25
     3bc:	28 f4       	brcc	.+10     	; 0x3c8 <prvCheckPendingReadyList+0x4c>
     3be:	e9 81       	ldd	r30, Y+1	; 0x01
     3c0:	fa 81       	ldd	r31, Y+2	; 0x02
     3c2:	86 89       	ldd	r24, Z+22	; 0x16
     3c4:	80 93 7b 00 	sts	0x007B, r24
     3c8:	e9 81       	ldd	r30, Y+1	; 0x01
     3ca:	fa 81       	ldd	r31, Y+2	; 0x02
     3cc:	86 89       	ldd	r24, Z+22	; 0x16
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	c9 01       	movw	r24, r18
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	88 0f       	add	r24, r24
     3da:	99 1f       	adc	r25, r25
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	82 0f       	add	r24, r18
     3e2:	93 1f       	adc	r25, r19
     3e4:	ac 01       	movw	r20, r24
     3e6:	4e 57       	subi	r20, 0x7E	; 126
     3e8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	9c 01       	movw	r18, r24
     3f0:	2e 5f       	subi	r18, 0xFE	; 254
     3f2:	3f 4f       	sbci	r19, 0xFF	; 255
     3f4:	ca 01       	movw	r24, r20
     3f6:	b9 01       	movw	r22, r18
     3f8:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     3fc:	80 91 aa 00 	lds	r24, 0x00AA
     400:	88 23       	and	r24, r24
     402:	09 f0       	breq	.+2      	; 0x406 <prvCheckPendingReadyList+0x8a>
     404:	c1 cf       	rjmp	.-126    	; 0x388 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	00 d0       	rcall	.+0      	; 0x416 <prvCheckDelayedList+0x6>
     416:	00 d0       	rcall	.+0      	; 0x418 <prvCheckDelayedList+0x8>
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     41c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <xTaskGetTickCount>
     420:	20 91 7e 00 	lds	r18, 0x007E
     424:	30 91 7f 00 	lds	r19, 0x007F
     428:	82 1b       	sub	r24, r18
     42a:	93 0b       	sbc	r25, r19
     42c:	90 93 81 00 	sts	0x0081, r25
     430:	80 93 80 00 	sts	0x0080, r24
     434:	85 c0       	rjmp	.+266    	; 0x540 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     436:	80 91 7c 00 	lds	r24, 0x007C
     43a:	90 91 7d 00 	lds	r25, 0x007D
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	90 93 7d 00 	sts	0x007D, r25
     444:	80 93 7c 00 	sts	0x007C, r24
		xPassedTicks--;
     448:	80 91 80 00 	lds	r24, 0x0080
     44c:	90 91 81 00 	lds	r25, 0x0081
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	90 93 81 00 	sts	0x0081, r25
     456:	80 93 80 00 	sts	0x0080, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     45a:	80 91 7c 00 	lds	r24, 0x007C
     45e:	90 91 7d 00 	lds	r25, 0x007D
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	09 f0       	breq	.+2      	; 0x468 <prvCheckDelayedList+0x58>
     466:	64 c0       	rjmp	.+200    	; 0x530 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     468:	80 91 a6 00 	lds	r24, 0x00A6
     46c:	90 91 a7 00 	lds	r25, 0x00A7
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     474:	80 91 a8 00 	lds	r24, 0x00A8
     478:	90 91 a9 00 	lds	r25, 0x00A9
     47c:	90 93 a7 00 	sts	0x00A7, r25
     480:	80 93 a6 00 	sts	0x00A6, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	90 93 a9 00 	sts	0x00A9, r25
     48c:	80 93 a8 00 	sts	0x00A8, r24
     490:	4f c0       	rjmp	.+158    	; 0x530 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     492:	e0 91 a6 00 	lds	r30, 0x00A6
     496:	f0 91 a7 00 	lds	r31, 0x00A7
     49a:	05 80       	ldd	r0, Z+5	; 0x05
     49c:	f6 81       	ldd	r31, Z+6	; 0x06
     49e:	e0 2d       	mov	r30, r0
     4a0:	86 81       	ldd	r24, Z+6	; 0x06
     4a2:	97 81       	ldd	r25, Z+7	; 0x07
     4a4:	9c 83       	std	Y+4, r25	; 0x04
     4a6:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     4a8:	eb 81       	ldd	r30, Y+3	; 0x03
     4aa:	fc 81       	ldd	r31, Y+4	; 0x04
     4ac:	22 81       	ldd	r18, Z+2	; 0x02
     4ae:	33 81       	ldd	r19, Z+3	; 0x03
     4b0:	80 91 7c 00 	lds	r24, 0x007C
     4b4:	90 91 7d 00 	lds	r25, 0x007D
     4b8:	82 17       	cp	r24, r18
     4ba:	93 07       	cpc	r25, r19
     4bc:	08 f4       	brcc	.+2      	; 0x4c0 <prvCheckDelayedList+0xb0>
     4be:	40 c0       	rjmp	.+128    	; 0x540 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     4c0:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	9c 81       	ldd	r25, Y+4	; 0x04
     4c6:	02 96       	adiw	r24, 0x02	; 2
     4c8:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     4cc:	eb 81       	ldd	r30, Y+3	; 0x03
     4ce:	fc 81       	ldd	r31, Y+4	; 0x04
     4d0:	84 89       	ldd	r24, Z+20	; 0x14
     4d2:	95 89       	ldd	r25, Z+21	; 0x15
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
     4d8:	8b 81       	ldd	r24, Y+3	; 0x03
     4da:	9c 81       	ldd	r25, Y+4	; 0x04
     4dc:	0c 96       	adiw	r24, 0x0c	; 12
     4de:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     4e2:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     4e4:	eb 81       	ldd	r30, Y+3	; 0x03
     4e6:	fc 81       	ldd	r31, Y+4	; 0x04
     4e8:	96 89       	ldd	r25, Z+22	; 0x16
     4ea:	80 91 7b 00 	lds	r24, 0x007B
     4ee:	89 17       	cp	r24, r25
     4f0:	28 f4       	brcc	.+10     	; 0x4fc <prvCheckDelayedList+0xec>
     4f2:	eb 81       	ldd	r30, Y+3	; 0x03
     4f4:	fc 81       	ldd	r31, Y+4	; 0x04
     4f6:	86 89       	ldd	r24, Z+22	; 0x16
     4f8:	80 93 7b 00 	sts	0x007B, r24
     4fc:	eb 81       	ldd	r30, Y+3	; 0x03
     4fe:	fc 81       	ldd	r31, Y+4	; 0x04
     500:	86 89       	ldd	r24, Z+22	; 0x16
     502:	28 2f       	mov	r18, r24
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	c9 01       	movw	r24, r18
     508:	88 0f       	add	r24, r24
     50a:	99 1f       	adc	r25, r25
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	82 0f       	add	r24, r18
     516:	93 1f       	adc	r25, r19
     518:	ac 01       	movw	r20, r24
     51a:	4e 57       	subi	r20, 0x7E	; 126
     51c:	5f 4f       	sbci	r21, 0xFF	; 255
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	9c 81       	ldd	r25, Y+4	; 0x04
     522:	9c 01       	movw	r18, r24
     524:	2e 5f       	subi	r18, 0xFE	; 254
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	ca 01       	movw	r24, r20
     52a:	b9 01       	movw	r22, r18
     52c:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     530:	e0 91 a6 00 	lds	r30, 0x00A6
     534:	f0 91 a7 00 	lds	r31, 0x00A7
     538:	80 81       	ld	r24, Z
     53a:	88 23       	and	r24, r24
     53c:	09 f0       	breq	.+2      	; 0x540 <prvCheckDelayedList+0x130>
     53e:	a9 cf       	rjmp	.-174    	; 0x492 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     540:	80 91 80 00 	lds	r24, 0x0080
     544:	90 91 81 00 	lds	r25, 0x0081
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	09 f0       	breq	.+2      	; 0x54e <prvCheckDelayedList+0x13e>
     54c:	74 cf       	rjmp	.-280    	; 0x436 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     54e:	80 91 7c 00 	lds	r24, 0x007C
     552:	90 91 7d 00 	lds	r25, 0x007D
     556:	90 93 7f 00 	sts	0x007F, r25
     55a:	80 93 7e 00 	sts	0x007E, r24
}
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	cf 91       	pop	r28
     568:	df 91       	pop	r29
     56a:	08 95       	ret

0000056c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	00 d0       	rcall	.+0      	; 0x572 <vCoRoutineSchedule+0x6>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     576:	0e 94 be 01 	call	0x37c	; 0x37c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     57a:	0e 94 08 02 	call	0x410	; 0x410 <prvCheckDelayedList>
     57e:	0a c0       	rjmp	.+20     	; 0x594 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     580:	80 91 7b 00 	lds	r24, 0x007B
     584:	88 23       	and	r24, r24
     586:	09 f4       	brne	.+2      	; 0x58a <vCoRoutineSchedule+0x1e>
     588:	66 c0       	rjmp	.+204    	; 0x656 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     58a:	80 91 7b 00 	lds	r24, 0x007B
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	80 93 7b 00 	sts	0x007B, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     594:	80 91 7b 00 	lds	r24, 0x007B
     598:	28 2f       	mov	r18, r24
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	c9 01       	movw	r24, r18
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	88 0f       	add	r24, r24
     5a8:	99 1f       	adc	r25, r25
     5aa:	82 0f       	add	r24, r18
     5ac:	93 1f       	adc	r25, r19
     5ae:	fc 01       	movw	r30, r24
     5b0:	ee 57       	subi	r30, 0x7E	; 126
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	80 81       	ld	r24, Z
     5b6:	88 23       	and	r24, r24
     5b8:	19 f3       	breq	.-58     	; 0x580 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     5ba:	80 91 7b 00 	lds	r24, 0x007B
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	c9 01       	movw	r24, r18
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	82 0f       	add	r24, r18
     5d2:	93 1f       	adc	r25, r19
     5d4:	8e 57       	subi	r24, 0x7E	; 126
     5d6:	9f 4f       	sbci	r25, 0xFF	; 255
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
     5dc:	e9 81       	ldd	r30, Y+1	; 0x01
     5de:	fa 81       	ldd	r31, Y+2	; 0x02
     5e0:	01 80       	ldd	r0, Z+1	; 0x01
     5e2:	f2 81       	ldd	r31, Z+2	; 0x02
     5e4:	e0 2d       	mov	r30, r0
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	93 81       	ldd	r25, Z+3	; 0x03
     5ea:	e9 81       	ldd	r30, Y+1	; 0x01
     5ec:	fa 81       	ldd	r31, Y+2	; 0x02
     5ee:	92 83       	std	Z+2, r25	; 0x02
     5f0:	81 83       	std	Z+1, r24	; 0x01
     5f2:	e9 81       	ldd	r30, Y+1	; 0x01
     5f4:	fa 81       	ldd	r31, Y+2	; 0x02
     5f6:	21 81       	ldd	r18, Z+1	; 0x01
     5f8:	32 81       	ldd	r19, Z+2	; 0x02
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	9a 81       	ldd	r25, Y+2	; 0x02
     5fe:	03 96       	adiw	r24, 0x03	; 3
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	59 f4       	brne	.+22     	; 0x61c <vCoRoutineSchedule+0xb0>
     606:	e9 81       	ldd	r30, Y+1	; 0x01
     608:	fa 81       	ldd	r31, Y+2	; 0x02
     60a:	01 80       	ldd	r0, Z+1	; 0x01
     60c:	f2 81       	ldd	r31, Z+2	; 0x02
     60e:	e0 2d       	mov	r30, r0
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	93 81       	ldd	r25, Z+3	; 0x03
     614:	e9 81       	ldd	r30, Y+1	; 0x01
     616:	fa 81       	ldd	r31, Y+2	; 0x02
     618:	92 83       	std	Z+2, r25	; 0x02
     61a:	81 83       	std	Z+1, r24	; 0x01
     61c:	e9 81       	ldd	r30, Y+1	; 0x01
     61e:	fa 81       	ldd	r31, Y+2	; 0x02
     620:	01 80       	ldd	r0, Z+1	; 0x01
     622:	f2 81       	ldd	r31, Z+2	; 0x02
     624:	e0 2d       	mov	r30, r0
     626:	86 81       	ldd	r24, Z+6	; 0x06
     628:	97 81       	ldd	r25, Z+7	; 0x07
     62a:	90 93 7a 00 	sts	0x007A, r25
     62e:	80 93 79 00 	sts	0x0079, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     632:	e0 91 79 00 	lds	r30, 0x0079
     636:	f0 91 7a 00 	lds	r31, 0x007A
     63a:	40 81       	ld	r20, Z
     63c:	51 81       	ldd	r21, Z+1	; 0x01
     63e:	80 91 79 00 	lds	r24, 0x0079
     642:	90 91 7a 00 	lds	r25, 0x007A
     646:	e0 91 79 00 	lds	r30, 0x0079
     64a:	f0 91 7a 00 	lds	r31, 0x007A
     64e:	27 89       	ldd	r18, Z+23	; 0x17
     650:	62 2f       	mov	r22, r18
     652:	fa 01       	movw	r30, r20
     654:	09 95       	icall

	return;
}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	cf 91       	pop	r28
     65c:	df 91       	pop	r29
     65e:	08 95       	ret

00000660 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	0f 92       	push	r0
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     66a:	19 82       	std	Y+1, r1	; 0x01
     66c:	13 c0       	rjmp	.+38     	; 0x694 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	28 2f       	mov	r18, r24
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	c9 01       	movw	r24, r18
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	82 0f       	add	r24, r18
     684:	93 1f       	adc	r25, r19
     686:	8e 57       	subi	r24, 0x7E	; 126
     688:	9f 4f       	sbci	r25, 0xFF	; 255
     68a:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	89 83       	std	Y+1, r24	; 0x01
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	50 f3       	brcs	.-44     	; 0x66e <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     69a:	84 e9       	ldi	r24, 0x94	; 148
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     6a2:	8d e9       	ldi	r24, 0x9D	; 157
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     6aa:	8a ea       	ldi	r24, 0xAA	; 170
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     6b2:	84 e9       	ldi	r24, 0x94	; 148
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	90 93 a7 00 	sts	0x00A7, r25
     6ba:	80 93 a6 00 	sts	0x00A6, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     6be:	8d e9       	ldi	r24, 0x9D	; 157
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	90 93 a9 00 	sts	0x00A9, r25
     6c6:	80 93 a8 00 	sts	0x00A8, r24
}
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <xCoRoutineRemoveFromEventList+0x6>
     6d8:	00 d0       	rcall	.+0      	; 0x6da <xCoRoutineRemoveFromEventList+0x8>
     6da:	0f 92       	push	r0
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	9d 83       	std	Y+5, r25	; 0x05
     6e2:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     6e4:	ec 81       	ldd	r30, Y+4	; 0x04
     6e6:	fd 81       	ldd	r31, Y+5	; 0x05
     6e8:	05 80       	ldd	r0, Z+5	; 0x05
     6ea:	f6 81       	ldd	r31, Z+6	; 0x06
     6ec:	e0 2d       	mov	r30, r0
     6ee:	86 81       	ldd	r24, Z+6	; 0x06
     6f0:	97 81       	ldd	r25, Z+7	; 0x07
     6f2:	9b 83       	std	Y+3, r25	; 0x03
     6f4:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	9b 81       	ldd	r25, Y+3	; 0x03
     6fa:	0c 96       	adiw	r24, 0x0c	; 12
     6fc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     700:	8a 81       	ldd	r24, Y+2	; 0x02
     702:	9b 81       	ldd	r25, Y+3	; 0x03
     704:	9c 01       	movw	r18, r24
     706:	24 5f       	subi	r18, 0xF4	; 244
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	8a ea       	ldi	r24, 0xAA	; 170
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	b9 01       	movw	r22, r18
     710:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     714:	ea 81       	ldd	r30, Y+2	; 0x02
     716:	fb 81       	ldd	r31, Y+3	; 0x03
     718:	96 89       	ldd	r25, Z+22	; 0x16
     71a:	e0 91 79 00 	lds	r30, 0x0079
     71e:	f0 91 7a 00 	lds	r31, 0x007A
     722:	86 89       	ldd	r24, Z+22	; 0x16
     724:	98 17       	cp	r25, r24
     726:	18 f0       	brcs	.+6      	; 0x72e <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	01 c0       	rjmp	.+2      	; 0x730 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
     72e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
     730:	89 81       	ldd	r24, Y+1	; 0x01
}
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	08 95       	ret

00000742 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     742:	df 93       	push	r29
     744:	cf 93       	push	r28
     746:	00 d0       	rcall	.+0      	; 0x748 <pvPortMalloc+0x6>
     748:	00 d0       	rcall	.+0      	; 0x74a <pvPortMalloc+0x8>
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	9c 83       	std	Y+4, r25	; 0x04
     750:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
     752:	1a 82       	std	Y+2, r1	; 0x02
     754:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     756:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     75a:	80 91 b3 00 	lds	r24, 0x00B3
     75e:	90 91 b4 00 	lds	r25, 0x00B4
     762:	2b 81       	ldd	r18, Y+3	; 0x03
     764:	3c 81       	ldd	r19, Y+4	; 0x04
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	22 e0       	ldi	r18, 0x02	; 2
     76c:	88 35       	cpi	r24, 0x58	; 88
     76e:	92 07       	cpc	r25, r18
     770:	18 f5       	brcc	.+70     	; 0x7b8 <pvPortMalloc+0x76>
     772:	20 91 b3 00 	lds	r18, 0x00B3
     776:	30 91 b4 00 	lds	r19, 0x00B4
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	9c 81       	ldd	r25, Y+4	; 0x04
     77e:	28 0f       	add	r18, r24
     780:	39 1f       	adc	r19, r25
     782:	80 91 b3 00 	lds	r24, 0x00B3
     786:	90 91 b4 00 	lds	r25, 0x00B4
     78a:	82 17       	cp	r24, r18
     78c:	93 07       	cpc	r25, r19
     78e:	a0 f4       	brcc	.+40     	; 0x7b8 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     790:	80 91 b3 00 	lds	r24, 0x00B3
     794:	90 91 b4 00 	lds	r25, 0x00B4
     798:	8b 54       	subi	r24, 0x4B	; 75
     79a:	9f 4f       	sbci	r25, 0xFF	; 255
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
     7a0:	20 91 b3 00 	lds	r18, 0x00B3
     7a4:	30 91 b4 00 	lds	r19, 0x00B4
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	9c 81       	ldd	r25, Y+4	; 0x04
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	90 93 b4 00 	sts	0x00B4, r25
     7b4:	80 93 b3 00 	sts	0x00B3, r24
		}	
	}
	xTaskResumeAll();
     7b8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	cf 91       	pop	r28
     7ca:	df 91       	pop	r29
     7cc:	08 95       	ret

000007ce <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <vPortFree+0x6>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	cf 91       	pop	r28
     7e2:	df 91       	pop	r29
     7e4:	08 95       	ret

000007e6 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     7e6:	df 93       	push	r29
     7e8:	cf 93       	push	r28
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     7ee:	10 92 b4 00 	sts	0x00B4, r1
     7f2:	10 92 b3 00 	sts	0x00B3, r1
}
     7f6:	cf 91       	pop	r28
     7f8:	df 91       	pop	r29
     7fa:	08 95       	ret

000007fc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     804:	20 91 b3 00 	lds	r18, 0x00B3
     808:	30 91 b4 00 	lds	r19, 0x00B4
     80c:	88 e5       	ldi	r24, 0x58	; 88
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	82 1b       	sub	r24, r18
     812:	93 0b       	sbc	r25, r19
}
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	00 d0       	rcall	.+0      	; 0x820 <vListInitialise+0x6>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	9a 83       	std	Y+2, r25	; 0x02
     826:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	03 96       	adiw	r24, 0x03	; 3
     82e:	e9 81       	ldd	r30, Y+1	; 0x01
     830:	fa 81       	ldd	r31, Y+2	; 0x02
     832:	92 83       	std	Z+2, r25	; 0x02
     834:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     836:	e9 81       	ldd	r30, Y+1	; 0x01
     838:	fa 81       	ldd	r31, Y+2	; 0x02
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	9f ef       	ldi	r25, 0xFF	; 255
     83e:	94 83       	std	Z+4, r25	; 0x04
     840:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	03 96       	adiw	r24, 0x03	; 3
     848:	e9 81       	ldd	r30, Y+1	; 0x01
     84a:	fa 81       	ldd	r31, Y+2	; 0x02
     84c:	96 83       	std	Z+6, r25	; 0x06
     84e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	03 96       	adiw	r24, 0x03	; 3
     856:	e9 81       	ldd	r30, Y+1	; 0x01
     858:	fa 81       	ldd	r31, Y+2	; 0x02
     85a:	90 87       	std	Z+8, r25	; 0x08
     85c:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     85e:	e9 81       	ldd	r30, Y+1	; 0x01
     860:	fa 81       	ldd	r31, Y+2	; 0x02
     862:	10 82       	st	Z, r1
}
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	08 95       	ret

0000086e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	00 d0       	rcall	.+0      	; 0x874 <vListInitialiseItem+0x6>
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     87c:	e9 81       	ldd	r30, Y+1	; 0x01
     87e:	fa 81       	ldd	r31, Y+2	; 0x02
     880:	11 86       	std	Z+9, r1	; 0x09
     882:	10 86       	std	Z+8, r1	; 0x08
}
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	08 95       	ret

0000088e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	00 d0       	rcall	.+0      	; 0x894 <vListInsertEnd+0x6>
     894:	00 d0       	rcall	.+0      	; 0x896 <vListInsertEnd+0x8>
     896:	00 d0       	rcall	.+0      	; 0x898 <vListInsertEnd+0xa>
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	9c 83       	std	Y+4, r25	; 0x04
     89e:	8b 83       	std	Y+3, r24	; 0x03
     8a0:	7e 83       	std	Y+6, r23	; 0x06
     8a2:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     8a4:	eb 81       	ldd	r30, Y+3	; 0x03
     8a6:	fc 81       	ldd	r31, Y+4	; 0x04
     8a8:	81 81       	ldd	r24, Z+1	; 0x01
     8aa:	92 81       	ldd	r25, Z+2	; 0x02
     8ac:	9a 83       	std	Y+2, r25	; 0x02
     8ae:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
     8b0:	e9 81       	ldd	r30, Y+1	; 0x01
     8b2:	fa 81       	ldd	r31, Y+2	; 0x02
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	93 81       	ldd	r25, Z+3	; 0x03
     8b8:	ed 81       	ldd	r30, Y+5	; 0x05
     8ba:	fe 81       	ldd	r31, Y+6	; 0x06
     8bc:	93 83       	std	Z+3, r25	; 0x03
     8be:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     8c0:	eb 81       	ldd	r30, Y+3	; 0x03
     8c2:	fc 81       	ldd	r31, Y+4	; 0x04
     8c4:	81 81       	ldd	r24, Z+1	; 0x01
     8c6:	92 81       	ldd	r25, Z+2	; 0x02
     8c8:	ed 81       	ldd	r30, Y+5	; 0x05
     8ca:	fe 81       	ldd	r31, Y+6	; 0x06
     8cc:	95 83       	std	Z+5, r25	; 0x05
     8ce:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     8d0:	e9 81       	ldd	r30, Y+1	; 0x01
     8d2:	fa 81       	ldd	r31, Y+2	; 0x02
     8d4:	02 80       	ldd	r0, Z+2	; 0x02
     8d6:	f3 81       	ldd	r31, Z+3	; 0x03
     8d8:	e0 2d       	mov	r30, r0
     8da:	8d 81       	ldd	r24, Y+5	; 0x05
     8dc:	9e 81       	ldd	r25, Y+6	; 0x06
     8de:	95 83       	std	Z+5, r25	; 0x05
     8e0:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     8e2:	8d 81       	ldd	r24, Y+5	; 0x05
     8e4:	9e 81       	ldd	r25, Y+6	; 0x06
     8e6:	e9 81       	ldd	r30, Y+1	; 0x01
     8e8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ea:	93 83       	std	Z+3, r25	; 0x03
     8ec:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     8ee:	8d 81       	ldd	r24, Y+5	; 0x05
     8f0:	9e 81       	ldd	r25, Y+6	; 0x06
     8f2:	eb 81       	ldd	r30, Y+3	; 0x03
     8f4:	fc 81       	ldd	r31, Y+4	; 0x04
     8f6:	92 83       	std	Z+2, r25	; 0x02
     8f8:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     8fa:	ed 81       	ldd	r30, Y+5	; 0x05
     8fc:	fe 81       	ldd	r31, Y+6	; 0x06
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	9c 81       	ldd	r25, Y+4	; 0x04
     902:	91 87       	std	Z+9, r25	; 0x09
     904:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     906:	eb 81       	ldd	r30, Y+3	; 0x03
     908:	fc 81       	ldd	r31, Y+4	; 0x04
     90a:	80 81       	ld	r24, Z
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	eb 81       	ldd	r30, Y+3	; 0x03
     910:	fc 81       	ldd	r31, Y+4	; 0x04
     912:	80 83       	st	Z, r24
}
     914:	26 96       	adiw	r28, 0x06	; 6
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	cf 91       	pop	r28
     922:	df 91       	pop	r29
     924:	08 95       	ret

00000926 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     926:	df 93       	push	r29
     928:	cf 93       	push	r28
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	28 97       	sbiw	r28, 0x08	; 8
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	9e 83       	std	Y+6, r25	; 0x06
     93c:	8d 83       	std	Y+5, r24	; 0x05
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     942:	ef 81       	ldd	r30, Y+7	; 0x07
     944:	f8 85       	ldd	r31, Y+8	; 0x08
     946:	80 81       	ld	r24, Z
     948:	91 81       	ldd	r25, Z+1	; 0x01
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	9a 81       	ldd	r25, Y+2	; 0x02
     952:	2f ef       	ldi	r18, 0xFF	; 255
     954:	8f 3f       	cpi	r24, 0xFF	; 255
     956:	92 07       	cpc	r25, r18
     958:	39 f4       	brne	.+14     	; 0x968 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     95a:	ed 81       	ldd	r30, Y+5	; 0x05
     95c:	fe 81       	ldd	r31, Y+6	; 0x06
     95e:	87 81       	ldd	r24, Z+7	; 0x07
     960:	90 85       	ldd	r25, Z+8	; 0x08
     962:	9c 83       	std	Y+4, r25	; 0x04
     964:	8b 83       	std	Y+3, r24	; 0x03
     966:	18 c0       	rjmp	.+48     	; 0x998 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     968:	8d 81       	ldd	r24, Y+5	; 0x05
     96a:	9e 81       	ldd	r25, Y+6	; 0x06
     96c:	03 96       	adiw	r24, 0x03	; 3
     96e:	9c 83       	std	Y+4, r25	; 0x04
     970:	8b 83       	std	Y+3, r24	; 0x03
     972:	06 c0       	rjmp	.+12     	; 0x980 <vListInsert+0x5a>
     974:	eb 81       	ldd	r30, Y+3	; 0x03
     976:	fc 81       	ldd	r31, Y+4	; 0x04
     978:	82 81       	ldd	r24, Z+2	; 0x02
     97a:	93 81       	ldd	r25, Z+3	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	8b 83       	std	Y+3, r24	; 0x03
     980:	eb 81       	ldd	r30, Y+3	; 0x03
     982:	fc 81       	ldd	r31, Y+4	; 0x04
     984:	02 80       	ldd	r0, Z+2	; 0x02
     986:	f3 81       	ldd	r31, Z+3	; 0x03
     988:	e0 2d       	mov	r30, r0
     98a:	20 81       	ld	r18, Z
     98c:	31 81       	ldd	r19, Z+1	; 0x01
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	82 17       	cp	r24, r18
     994:	93 07       	cpc	r25, r19
     996:	70 f7       	brcc	.-36     	; 0x974 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     998:	eb 81       	ldd	r30, Y+3	; 0x03
     99a:	fc 81       	ldd	r31, Y+4	; 0x04
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	93 81       	ldd	r25, Z+3	; 0x03
     9a0:	ef 81       	ldd	r30, Y+7	; 0x07
     9a2:	f8 85       	ldd	r31, Y+8	; 0x08
     9a4:	93 83       	std	Z+3, r25	; 0x03
     9a6:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     9a8:	ef 81       	ldd	r30, Y+7	; 0x07
     9aa:	f8 85       	ldd	r31, Y+8	; 0x08
     9ac:	02 80       	ldd	r0, Z+2	; 0x02
     9ae:	f3 81       	ldd	r31, Z+3	; 0x03
     9b0:	e0 2d       	mov	r30, r0
     9b2:	8f 81       	ldd	r24, Y+7	; 0x07
     9b4:	98 85       	ldd	r25, Y+8	; 0x08
     9b6:	95 83       	std	Z+5, r25	; 0x05
     9b8:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     9ba:	ef 81       	ldd	r30, Y+7	; 0x07
     9bc:	f8 85       	ldd	r31, Y+8	; 0x08
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	9c 81       	ldd	r25, Y+4	; 0x04
     9c2:	95 83       	std	Z+5, r25	; 0x05
     9c4:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     9c6:	8f 81       	ldd	r24, Y+7	; 0x07
     9c8:	98 85       	ldd	r25, Y+8	; 0x08
     9ca:	eb 81       	ldd	r30, Y+3	; 0x03
     9cc:	fc 81       	ldd	r31, Y+4	; 0x04
     9ce:	93 83       	std	Z+3, r25	; 0x03
     9d0:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     9d2:	ef 81       	ldd	r30, Y+7	; 0x07
     9d4:	f8 85       	ldd	r31, Y+8	; 0x08
     9d6:	8d 81       	ldd	r24, Y+5	; 0x05
     9d8:	9e 81       	ldd	r25, Y+6	; 0x06
     9da:	91 87       	std	Z+9, r25	; 0x09
     9dc:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     9de:	ed 81       	ldd	r30, Y+5	; 0x05
     9e0:	fe 81       	ldd	r31, Y+6	; 0x06
     9e2:	80 81       	ld	r24, Z
     9e4:	8f 5f       	subi	r24, 0xFF	; 255
     9e6:	ed 81       	ldd	r30, Y+5	; 0x05
     9e8:	fe 81       	ldd	r31, Y+6	; 0x06
     9ea:	80 83       	st	Z, r24
}
     9ec:	28 96       	adiw	r28, 0x08	; 8
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	cf 91       	pop	r28
     9fa:	df 91       	pop	r29
     9fc:	08 95       	ret

000009fe <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	00 d0       	rcall	.+0      	; 0xa04 <vListRemove+0x6>
     a04:	00 d0       	rcall	.+0      	; 0xa06 <vListRemove+0x8>
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	9c 83       	std	Y+4, r25	; 0x04
     a0c:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a0e:	eb 81       	ldd	r30, Y+3	; 0x03
     a10:	fc 81       	ldd	r31, Y+4	; 0x04
     a12:	a2 81       	ldd	r26, Z+2	; 0x02
     a14:	b3 81       	ldd	r27, Z+3	; 0x03
     a16:	eb 81       	ldd	r30, Y+3	; 0x03
     a18:	fc 81       	ldd	r31, Y+4	; 0x04
     a1a:	84 81       	ldd	r24, Z+4	; 0x04
     a1c:	95 81       	ldd	r25, Z+5	; 0x05
     a1e:	15 96       	adiw	r26, 0x05	; 5
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a26:	eb 81       	ldd	r30, Y+3	; 0x03
     a28:	fc 81       	ldd	r31, Y+4	; 0x04
     a2a:	a4 81       	ldd	r26, Z+4	; 0x04
     a2c:	b5 81       	ldd	r27, Z+5	; 0x05
     a2e:	eb 81       	ldd	r30, Y+3	; 0x03
     a30:	fc 81       	ldd	r31, Y+4	; 0x04
     a32:	82 81       	ldd	r24, Z+2	; 0x02
     a34:	93 81       	ldd	r25, Z+3	; 0x03
     a36:	13 96       	adiw	r26, 0x03	; 3
     a38:	9c 93       	st	X, r25
     a3a:	8e 93       	st	-X, r24
     a3c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     a3e:	eb 81       	ldd	r30, Y+3	; 0x03
     a40:	fc 81       	ldd	r31, Y+4	; 0x04
     a42:	80 85       	ldd	r24, Z+8	; 0x08
     a44:	91 85       	ldd	r25, Z+9	; 0x09
     a46:	9a 83       	std	Y+2, r25	; 0x02
     a48:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     a4a:	e9 81       	ldd	r30, Y+1	; 0x01
     a4c:	fa 81       	ldd	r31, Y+2	; 0x02
     a4e:	21 81       	ldd	r18, Z+1	; 0x01
     a50:	32 81       	ldd	r19, Z+2	; 0x02
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	28 17       	cp	r18, r24
     a58:	39 07       	cpc	r19, r25
     a5a:	41 f4       	brne	.+16     	; 0xa6c <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     a5c:	eb 81       	ldd	r30, Y+3	; 0x03
     a5e:	fc 81       	ldd	r31, Y+4	; 0x04
     a60:	84 81       	ldd	r24, Z+4	; 0x04
     a62:	95 81       	ldd	r25, Z+5	; 0x05
     a64:	e9 81       	ldd	r30, Y+1	; 0x01
     a66:	fa 81       	ldd	r31, Y+2	; 0x02
     a68:	92 83       	std	Z+2, r25	; 0x02
     a6a:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
     a6c:	eb 81       	ldd	r30, Y+3	; 0x03
     a6e:	fc 81       	ldd	r31, Y+4	; 0x04
     a70:	11 86       	std	Z+9, r1	; 0x09
     a72:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     a74:	e9 81       	ldd	r30, Y+1	; 0x01
     a76:	fa 81       	ldd	r31, Y+2	; 0x02
     a78:	80 81       	ld	r24, Z
     a7a:	81 50       	subi	r24, 0x01	; 1
     a7c:	e9 81       	ldd	r30, Y+1	; 0x01
     a7e:	fa 81       	ldd	r31, Y+2	; 0x02
     a80:	80 83       	st	Z, r24
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	08 95       	ret

00000a90 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	28 97       	sbiw	r28, 0x08	; 8
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	7e 83       	std	Y+6, r23	; 0x06
     aaa:	6d 83       	std	Y+5, r22	; 0x05
     aac:	58 87       	std	Y+8, r21	; 0x08
     aae:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     ab0:	eb 81       	ldd	r30, Y+3	; 0x03
     ab2:	fc 81       	ldd	r31, Y+4	; 0x04
     ab4:	81 e1       	ldi	r24, 0x11	; 17
     ab6:	80 83       	st	Z, r24
	pxTopOfStack--;
     ab8:	8b 81       	ldd	r24, Y+3	; 0x03
     aba:	9c 81       	ldd	r25, Y+4	; 0x04
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	9c 83       	std	Y+4, r25	; 0x04
     ac0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
     ac2:	eb 81       	ldd	r30, Y+3	; 0x03
     ac4:	fc 81       	ldd	r31, Y+4	; 0x04
     ac6:	82 e2       	ldi	r24, 0x22	; 34
     ac8:	80 83       	st	Z, r24
	pxTopOfStack--;
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	9c 83       	std	Y+4, r25	; 0x04
     ad2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
     ad4:	eb 81       	ldd	r30, Y+3	; 0x03
     ad6:	fc 81       	ldd	r31, Y+4	; 0x04
     ad8:	83 e3       	ldi	r24, 0x33	; 51
     ada:	80 83       	st	Z, r24
	pxTopOfStack--;
     adc:	8b 81       	ldd	r24, Y+3	; 0x03
     ade:	9c 81       	ldd	r25, Y+4	; 0x04
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	9c 83       	std	Y+4, r25	; 0x04
     ae4:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
     ae6:	8d 81       	ldd	r24, Y+5	; 0x05
     ae8:	9e 81       	ldd	r25, Y+6	; 0x06
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	eb 81       	ldd	r30, Y+3	; 0x03
     af2:	fc 81       	ldd	r31, Y+4	; 0x04
     af4:	80 83       	st	Z, r24
	pxTopOfStack--;
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	9c 83       	std	Y+4, r25	; 0x04
     afe:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	89 2f       	mov	r24, r25
     b06:	99 27       	eor	r25, r25
     b08:	9a 83       	std	Y+2, r25	; 0x02
     b0a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	eb 81       	ldd	r30, Y+3	; 0x03
     b10:	fc 81       	ldd	r31, Y+4	; 0x04
     b12:	80 83       	st	Z, r24
	pxTopOfStack--;
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     b1e:	eb 81       	ldd	r30, Y+3	; 0x03
     b20:	fc 81       	ldd	r31, Y+4	; 0x04
     b22:	10 82       	st	Z, r1
	pxTopOfStack--;
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	9c 81       	ldd	r25, Y+4	; 0x04
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	9c 83       	std	Y+4, r25	; 0x04
     b2c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     b2e:	eb 81       	ldd	r30, Y+3	; 0x03
     b30:	fc 81       	ldd	r31, Y+4	; 0x04
     b32:	80 e8       	ldi	r24, 0x80	; 128
     b34:	80 83       	st	Z, r24
	pxTopOfStack--;
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	9c 83       	std	Y+4, r25	; 0x04
     b3e:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     b40:	eb 81       	ldd	r30, Y+3	; 0x03
     b42:	fc 81       	ldd	r31, Y+4	; 0x04
     b44:	10 82       	st	Z, r1
	pxTopOfStack--;
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	9c 83       	std	Y+4, r25	; 0x04
     b4e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     b50:	eb 81       	ldd	r30, Y+3	; 0x03
     b52:	fc 81       	ldd	r31, Y+4	; 0x04
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	80 83       	st	Z, r24
	pxTopOfStack--;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     b62:	eb 81       	ldd	r30, Y+3	; 0x03
     b64:	fc 81       	ldd	r31, Y+4	; 0x04
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	80 83       	st	Z, r24
	pxTopOfStack--;
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	9c 83       	std	Y+4, r25	; 0x04
     b72:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     b74:	eb 81       	ldd	r30, Y+3	; 0x03
     b76:	fc 81       	ldd	r31, Y+4	; 0x04
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	80 83       	st	Z, r24
	pxTopOfStack--;
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	9c 83       	std	Y+4, r25	; 0x04
     b84:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	80 83       	st	Z, r24
	pxTopOfStack--;
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	9c 83       	std	Y+4, r25	; 0x04
     b96:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     b98:	eb 81       	ldd	r30, Y+3	; 0x03
     b9a:	fc 81       	ldd	r31, Y+4	; 0x04
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	80 83       	st	Z, r24
	pxTopOfStack--;
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     baa:	eb 81       	ldd	r30, Y+3	; 0x03
     bac:	fc 81       	ldd	r31, Y+4	; 0x04
     bae:	87 e0       	ldi	r24, 0x07	; 7
     bb0:	80 83       	st	Z, r24
	pxTopOfStack--;
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	9c 81       	ldd	r25, Y+4	; 0x04
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	9c 83       	std	Y+4, r25	; 0x04
     bba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     bbc:	eb 81       	ldd	r30, Y+3	; 0x03
     bbe:	fc 81       	ldd	r31, Y+4	; 0x04
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	80 83       	st	Z, r24
	pxTopOfStack--;
     bc4:	8b 81       	ldd	r24, Y+3	; 0x03
     bc6:	9c 81       	ldd	r25, Y+4	; 0x04
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	9c 83       	std	Y+4, r25	; 0x04
     bcc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     bce:	eb 81       	ldd	r30, Y+3	; 0x03
     bd0:	fc 81       	ldd	r31, Y+4	; 0x04
     bd2:	89 e0       	ldi	r24, 0x09	; 9
     bd4:	80 83       	st	Z, r24
	pxTopOfStack--;
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	9c 83       	std	Y+4, r25	; 0x04
     bde:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     be0:	eb 81       	ldd	r30, Y+3	; 0x03
     be2:	fc 81       	ldd	r31, Y+4	; 0x04
     be4:	80 e1       	ldi	r24, 0x10	; 16
     be6:	80 83       	st	Z, r24
	pxTopOfStack--;
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	9c 83       	std	Y+4, r25	; 0x04
     bf0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     bf2:	eb 81       	ldd	r30, Y+3	; 0x03
     bf4:	fc 81       	ldd	r31, Y+4	; 0x04
     bf6:	81 e1       	ldi	r24, 0x11	; 17
     bf8:	80 83       	st	Z, r24
	pxTopOfStack--;
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	9c 83       	std	Y+4, r25	; 0x04
     c02:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	82 e1       	ldi	r24, 0x12	; 18
     c0a:	80 83       	st	Z, r24
	pxTopOfStack--;
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	9c 81       	ldd	r25, Y+4	; 0x04
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     c16:	eb 81       	ldd	r30, Y+3	; 0x03
     c18:	fc 81       	ldd	r31, Y+4	; 0x04
     c1a:	83 e1       	ldi	r24, 0x13	; 19
     c1c:	80 83       	st	Z, r24
	pxTopOfStack--;
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	9c 83       	std	Y+4, r25	; 0x04
     c26:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     c28:	eb 81       	ldd	r30, Y+3	; 0x03
     c2a:	fc 81       	ldd	r31, Y+4	; 0x04
     c2c:	84 e1       	ldi	r24, 0x14	; 20
     c2e:	80 83       	st	Z, r24
	pxTopOfStack--;
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     c3a:	eb 81       	ldd	r30, Y+3	; 0x03
     c3c:	fc 81       	ldd	r31, Y+4	; 0x04
     c3e:	85 e1       	ldi	r24, 0x15	; 21
     c40:	80 83       	st	Z, r24
	pxTopOfStack--;
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     c4c:	eb 81       	ldd	r30, Y+3	; 0x03
     c4e:	fc 81       	ldd	r31, Y+4	; 0x04
     c50:	86 e1       	ldi	r24, 0x16	; 22
     c52:	80 83       	st	Z, r24
	pxTopOfStack--;
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	87 e1       	ldi	r24, 0x17	; 23
     c64:	80 83       	st	Z, r24
	pxTopOfStack--;
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     c70:	eb 81       	ldd	r30, Y+3	; 0x03
     c72:	fc 81       	ldd	r31, Y+4	; 0x04
     c74:	88 e1       	ldi	r24, 0x18	; 24
     c76:	80 83       	st	Z, r24
	pxTopOfStack--;
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	9c 83       	std	Y+4, r25	; 0x04
     c80:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     c82:	eb 81       	ldd	r30, Y+3	; 0x03
     c84:	fc 81       	ldd	r31, Y+4	; 0x04
     c86:	89 e1       	ldi	r24, 0x19	; 25
     c88:	80 83       	st	Z, r24
	pxTopOfStack--;
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	9c 81       	ldd	r25, Y+4	; 0x04
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	9c 83       	std	Y+4, r25	; 0x04
     c92:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     c94:	eb 81       	ldd	r30, Y+3	; 0x03
     c96:	fc 81       	ldd	r31, Y+4	; 0x04
     c98:	80 e2       	ldi	r24, 0x20	; 32
     c9a:	80 83       	st	Z, r24
	pxTopOfStack--;
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	9c 83       	std	Y+4, r25	; 0x04
     ca4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     ca6:	eb 81       	ldd	r30, Y+3	; 0x03
     ca8:	fc 81       	ldd	r31, Y+4	; 0x04
     caa:	81 e2       	ldi	r24, 0x21	; 33
     cac:	80 83       	st	Z, r24
	pxTopOfStack--;
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     cb8:	eb 81       	ldd	r30, Y+3	; 0x03
     cba:	fc 81       	ldd	r31, Y+4	; 0x04
     cbc:	82 e2       	ldi	r24, 0x22	; 34
     cbe:	80 83       	st	Z, r24
	pxTopOfStack--;
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     cca:	eb 81       	ldd	r30, Y+3	; 0x03
     ccc:	fc 81       	ldd	r31, Y+4	; 0x04
     cce:	83 e2       	ldi	r24, 0x23	; 35
     cd0:	80 83       	st	Z, r24
	pxTopOfStack--;
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
     cdc:	8f 81       	ldd	r24, Y+7	; 0x07
     cde:	98 85       	ldd	r25, Y+8	; 0x08
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	eb 81       	ldd	r30, Y+3	; 0x03
     ce8:	fc 81       	ldd	r31, Y+4	; 0x04
     cea:	80 83       	st	Z, r24
	pxTopOfStack--;
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	9c 81       	ldd	r25, Y+4	; 0x04
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	9c 83       	std	Y+4, r25	; 0x04
     cf4:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	89 2f       	mov	r24, r25
     cfc:	99 27       	eor	r25, r25
     cfe:	9a 83       	std	Y+2, r25	; 0x02
     d00:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	eb 81       	ldd	r30, Y+3	; 0x03
     d06:	fc 81       	ldd	r31, Y+4	; 0x04
     d08:	80 83       	st	Z, r24
	pxTopOfStack--;
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	9c 83       	std	Y+4, r25	; 0x04
     d12:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     d14:	eb 81       	ldd	r30, Y+3	; 0x03
     d16:	fc 81       	ldd	r31, Y+4	; 0x04
     d18:	86 e2       	ldi	r24, 0x26	; 38
     d1a:	80 83       	st	Z, r24
	pxTopOfStack--;
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	9c 83       	std	Y+4, r25	; 0x04
     d24:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     d26:	eb 81       	ldd	r30, Y+3	; 0x03
     d28:	fc 81       	ldd	r31, Y+4	; 0x04
     d2a:	87 e2       	ldi	r24, 0x27	; 39
     d2c:	80 83       	st	Z, r24
	pxTopOfStack--;
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	9c 81       	ldd	r25, Y+4	; 0x04
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     d38:	eb 81       	ldd	r30, Y+3	; 0x03
     d3a:	fc 81       	ldd	r31, Y+4	; 0x04
     d3c:	88 e2       	ldi	r24, 0x28	; 40
     d3e:	80 83       	st	Z, r24
	pxTopOfStack--;
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	9c 81       	ldd	r25, Y+4	; 0x04
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     d4a:	eb 81       	ldd	r30, Y+3	; 0x03
     d4c:	fc 81       	ldd	r31, Y+4	; 0x04
     d4e:	89 e2       	ldi	r24, 0x29	; 41
     d50:	80 83       	st	Z, r24
	pxTopOfStack--;
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	9c 83       	std	Y+4, r25	; 0x04
     d5a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     d5c:	eb 81       	ldd	r30, Y+3	; 0x03
     d5e:	fc 81       	ldd	r31, Y+4	; 0x04
     d60:	80 e3       	ldi	r24, 0x30	; 48
     d62:	80 83       	st	Z, r24
	pxTopOfStack--;
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	9c 83       	std	Y+4, r25	; 0x04
     d6c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	81 e3       	ldi	r24, 0x31	; 49
     d74:	80 83       	st	Z, r24
	pxTopOfStack--;
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	9c 83       	std	Y+4, r25	; 0x04
     d7e:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
}
     d84:	28 96       	adiw	r28, 0x08	; 8
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
     d9e:	0e 94 bb 07 	call	0xf76	; 0xf76 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     da2:	a0 91 0d 03 	lds	r26, 0x030D
     da6:	b0 91 0e 03 	lds	r27, 0x030E
     daa:	cd 91       	ld	r28, X+
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	dd 91       	ld	r29, X+
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	bf 90       	pop	r11
     ddc:	af 90       	pop	r10
     dde:	9f 90       	pop	r9
     de0:	8f 90       	pop	r8
     de2:	7f 90       	pop	r7
     de4:	6f 90       	pop	r6
     de6:	5f 90       	pop	r5
     de8:	4f 90       	pop	r4
     dea:	3f 90       	pop	r3
     dec:	2f 90       	pop	r2
     dee:	1f 90       	pop	r1
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     df6:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
     df8:	81 e0       	ldi	r24, 0x01	; 1
}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	0f 92       	push	r0
     e16:	1f 92       	push	r1
     e18:	11 24       	eor	r1, r1
     e1a:	2f 92       	push	r2
     e1c:	3f 92       	push	r3
     e1e:	4f 92       	push	r4
     e20:	5f 92       	push	r5
     e22:	6f 92       	push	r6
     e24:	7f 92       	push	r7
     e26:	8f 92       	push	r8
     e28:	9f 92       	push	r9
     e2a:	af 92       	push	r10
     e2c:	bf 92       	push	r11
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ef 92       	push	r14
     e34:	ff 92       	push	r15
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	2f 93       	push	r18
     e3c:	3f 93       	push	r19
     e3e:	4f 93       	push	r20
     e40:	5f 93       	push	r21
     e42:	6f 93       	push	r22
     e44:	7f 93       	push	r23
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	af 93       	push	r26
     e4c:	bf 93       	push	r27
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ef 93       	push	r30
     e54:	ff 93       	push	r31
     e56:	a0 91 0d 03 	lds	r26, 0x030D
     e5a:	b0 91 0e 03 	lds	r27, 0x030E
     e5e:	0d b6       	in	r0, 0x3d	; 61
     e60:	0d 92       	st	X+, r0
     e62:	0e b6       	in	r0, 0x3e	; 62
     e64:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e66:	0e 94 77 10 	call	0x20ee	; 0x20ee <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e6a:	a0 91 0d 03 	lds	r26, 0x030D
     e6e:	b0 91 0e 03 	lds	r27, 0x030E
     e72:	cd 91       	ld	r28, X+
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	dd 91       	ld	r29, X+
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	ff 91       	pop	r31
     e7c:	ef 91       	pop	r30
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	9f 90       	pop	r9
     ea8:	8f 90       	pop	r8
     eaa:	7f 90       	pop	r7
     eac:	6f 90       	pop	r6
     eae:	5f 90       	pop	r5
     eb0:	4f 90       	pop	r4
     eb2:	3f 90       	pop	r3
     eb4:	2f 90       	pop	r2
     eb6:	1f 90       	pop	r1
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0

	asm volatile ( "ret" );
     ebe:	08 95       	ret

00000ec0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	1f 92       	push	r1
     eca:	11 24       	eor	r1, r1
     ecc:	2f 92       	push	r2
     ece:	3f 92       	push	r3
     ed0:	4f 92       	push	r4
     ed2:	5f 92       	push	r5
     ed4:	6f 92       	push	r6
     ed6:	7f 92       	push	r7
     ed8:	8f 92       	push	r8
     eda:	9f 92       	push	r9
     edc:	af 92       	push	r10
     ede:	bf 92       	push	r11
     ee0:	cf 92       	push	r12
     ee2:	df 92       	push	r13
     ee4:	ef 92       	push	r14
     ee6:	ff 92       	push	r15
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ef 93       	push	r30
     f06:	ff 93       	push	r31
     f08:	a0 91 0d 03 	lds	r26, 0x030D
     f0c:	b0 91 0e 03 	lds	r27, 0x030E
     f10:	0d b6       	in	r0, 0x3d	; 61
     f12:	0d 92       	st	X+, r0
     f14:	0e b6       	in	r0, 0x3e	; 62
     f16:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     f18:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskIncrementTick>
	vTaskSwitchContext();
     f1c:	0e 94 77 10 	call	0x20ee	; 0x20ee <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f20:	a0 91 0d 03 	lds	r26, 0x030D
     f24:	b0 91 0e 03 	lds	r27, 0x030E
     f28:	cd 91       	ld	r28, X+
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	dd 91       	ld	r29, X+
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	bf 91       	pop	r27
     f3a:	af 91       	pop	r26
     f3c:	9f 91       	pop	r25
     f3e:	8f 91       	pop	r24
     f40:	7f 91       	pop	r23
     f42:	6f 91       	pop	r22
     f44:	5f 91       	pop	r21
     f46:	4f 91       	pop	r20
     f48:	3f 91       	pop	r19
     f4a:	2f 91       	pop	r18
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	bf 90       	pop	r11
     f5a:	af 90       	pop	r10
     f5c:	9f 90       	pop	r9
     f5e:	8f 90       	pop	r8
     f60:	7f 90       	pop	r7
     f62:	6f 90       	pop	r6
     f64:	5f 90       	pop	r5
     f66:	4f 90       	pop	r4
     f68:	3f 90       	pop	r3
     f6a:	2f 90       	pop	r2
     f6c:	1f 90       	pop	r1
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f74:	08 95       	ret

00000f76 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <prvSetupTimerInterrupt+0x6>
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <prvSetupTimerInterrupt+0x8>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <prvSetupTimerInterrupt+0xa>
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     f84:	80 e4       	ldi	r24, 0x40	; 64
     f86:	9f e1       	ldi	r25, 0x1F	; 31
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	ad 83       	std	Y+5, r26	; 0x05
     f92:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	ad 81       	ldd	r26, Y+5	; 0x05
     f9a:	be 81       	ldd	r27, Y+6	; 0x06
     f9c:	68 94       	set
     f9e:	15 f8       	bld	r1, 5
     fa0:	b6 95       	lsr	r27
     fa2:	a7 95       	ror	r26
     fa4:	97 95       	ror	r25
     fa6:	87 95       	ror	r24
     fa8:	16 94       	lsr	r1
     faa:	d1 f7       	brne	.-12     	; 0xfa0 <prvSetupTimerInterrupt+0x2a>
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	ad 83       	std	Y+5, r26	; 0x05
     fb2:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	ad 81       	ldd	r26, Y+5	; 0x05
     fba:	be 81       	ldd	r27, Y+6	; 0x06
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	a1 09       	sbc	r26, r1
     fc0:	b1 09       	sbc	r27, r1
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	ad 83       	std	Y+5, r26	; 0x05
     fc8:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	ad 81       	ldd	r26, Y+5	; 0x05
     fd4:	be 81       	ldd	r27, Y+6	; 0x06
     fd6:	89 2f       	mov	r24, r25
     fd8:	9a 2f       	mov	r25, r26
     fda:	ab 2f       	mov	r26, r27
     fdc:	bb 27       	eor	r27, r27
     fde:	8b 83       	std	Y+3, r24	; 0x03
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	ad 83       	std	Y+5, r26	; 0x05
     fe4:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
     fea:	eb e4       	ldi	r30, 0x4B	; 75
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
     ff2:	ea e4       	ldi	r30, 0x4A	; 74
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
     ffa:	8b e0       	ldi	r24, 0x0B	; 11
     ffc:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
     ffe:	ee e4       	ldi	r30, 0x4E	; 78
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1006:	e9 e5       	ldi	r30, 0x59	; 89
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	80 61       	ori	r24, 0x10	; 16
    1012:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1014:	e9 e5       	ldi	r30, 0x59	; 89
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	80 83       	st	Z, r24
}
    101c:	26 96       	adiw	r28, 0x06	; 6
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    102e:	0e 94 60 07 	call	0xec0	; 0xec0 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1032:	18 95       	reti

00001034 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	28 97       	sbiw	r28, 0x08	; 8
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	8f 83       	std	Y+7, r24	; 0x07
    104a:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    104c:	1a 82       	std	Y+2, r1	; 0x02
    104e:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1050:	8f 81       	ldd	r24, Y+7	; 0x07
    1052:	88 23       	and	r24, r24
    1054:	09 f4       	brne	.+2      	; 0x1058 <xQueueCreate+0x24>
    1056:	8c c0       	rjmp	.+280    	; 0x1170 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1058:	8f e1       	ldi	r24, 0x1F	; 31
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 a1 03 	call	0x742	; 0x742 <pvPortMalloc>
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	09 f4       	brne	.+2      	; 0x106e <xQueueCreate+0x3a>
    106c:	81 c0       	rjmp	.+258    	; 0x1170 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    106e:	8f 81       	ldd	r24, Y+7	; 0x07
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	88 85       	ldd	r24, Y+8	; 0x08
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	ac 01       	movw	r20, r24
    107c:	24 9f       	mul	r18, r20
    107e:	c0 01       	movw	r24, r0
    1080:	25 9f       	mul	r18, r21
    1082:	90 0d       	add	r25, r0
    1084:	34 9f       	mul	r19, r20
    1086:	90 0d       	add	r25, r0
    1088:	11 24       	eor	r1, r1
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	0e 94 a1 03 	call	0x742	; 0x742 <pvPortMalloc>
    1098:	ed 81       	ldd	r30, Y+5	; 0x05
    109a:	fe 81       	ldd	r31, Y+6	; 0x06
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    10a0:	ed 81       	ldd	r30, Y+5	; 0x05
    10a2:	fe 81       	ldd	r31, Y+6	; 0x06
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	09 f4       	brne	.+2      	; 0x10ae <xQueueCreate+0x7a>
    10ac:	5d c0       	rjmp	.+186    	; 0x1168 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    10ae:	ed 81       	ldd	r30, Y+5	; 0x05
    10b0:	fe 81       	ldd	r31, Y+6	; 0x06
    10b2:	40 81       	ld	r20, Z
    10b4:	51 81       	ldd	r21, Z+1	; 0x01
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	88 85       	ldd	r24, Y+8	; 0x08
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	bc 01       	movw	r22, r24
    10c4:	26 9f       	mul	r18, r22
    10c6:	c0 01       	movw	r24, r0
    10c8:	27 9f       	mul	r18, r23
    10ca:	90 0d       	add	r25, r0
    10cc:	36 9f       	mul	r19, r22
    10ce:	90 0d       	add	r25, r0
    10d0:	11 24       	eor	r1, r1
    10d2:	84 0f       	add	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	ed 81       	ldd	r30, Y+5	; 0x05
    10d8:	fe 81       	ldd	r31, Y+6	; 0x06
    10da:	93 83       	std	Z+3, r25	; 0x03
    10dc:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    10de:	ed 81       	ldd	r30, Y+5	; 0x05
    10e0:	fe 81       	ldd	r31, Y+6	; 0x06
    10e2:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    10e4:	ed 81       	ldd	r30, Y+5	; 0x05
    10e6:	fe 81       	ldd	r31, Y+6	; 0x06
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	ed 81       	ldd	r30, Y+5	; 0x05
    10ee:	fe 81       	ldd	r31, Y+6	; 0x06
    10f0:	95 83       	std	Z+5, r25	; 0x05
    10f2:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    10f4:	ed 81       	ldd	r30, Y+5	; 0x05
    10f6:	fe 81       	ldd	r31, Y+6	; 0x06
    10f8:	40 81       	ld	r20, Z
    10fa:	51 81       	ldd	r21, Z+1	; 0x01
    10fc:	8f 81       	ldd	r24, Y+7	; 0x07
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 01       	movw	r18, r24
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	30 40       	sbci	r19, 0x00	; 0
    1108:	88 85       	ldd	r24, Y+8	; 0x08
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	bc 01       	movw	r22, r24
    1110:	26 9f       	mul	r18, r22
    1112:	c0 01       	movw	r24, r0
    1114:	27 9f       	mul	r18, r23
    1116:	90 0d       	add	r25, r0
    1118:	36 9f       	mul	r19, r22
    111a:	90 0d       	add	r25, r0
    111c:	11 24       	eor	r1, r1
    111e:	84 0f       	add	r24, r20
    1120:	95 1f       	adc	r25, r21
    1122:	ed 81       	ldd	r30, Y+5	; 0x05
    1124:	fe 81       	ldd	r31, Y+6	; 0x06
    1126:	97 83       	std	Z+7, r25	; 0x07
    1128:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    112a:	ed 81       	ldd	r30, Y+5	; 0x05
    112c:	fe 81       	ldd	r31, Y+6	; 0x06
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1132:	ed 81       	ldd	r30, Y+5	; 0x05
    1134:	fe 81       	ldd	r31, Y+6	; 0x06
    1136:	88 85       	ldd	r24, Y+8	; 0x08
    1138:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    113a:	ed 81       	ldd	r30, Y+5	; 0x05
    113c:	fe 81       	ldd	r31, Y+6	; 0x06
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1142:	ed 81       	ldd	r30, Y+5	; 0x05
    1144:	fe 81       	ldd	r31, Y+6	; 0x06
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	08 96       	adiw	r24, 0x08	; 8
    1150:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	41 96       	adiw	r24, 0x11	; 17
    115a:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    115e:	8d 81       	ldd	r24, Y+5	; 0x05
    1160:	9e 81       	ldd	r25, Y+6	; 0x06
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1174:	28 96       	adiw	r28, 0x08	; 8
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	2c 97       	sbiw	r28, 0x0c	; 12
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	78 87       	std	Y+8, r23	; 0x08
    11a0:	6f 83       	std	Y+7, r22	; 0x07
    11a2:	5a 87       	std	Y+10, r21	; 0x0a
    11a4:	49 87       	std	Y+9, r20	; 0x09
    11a6:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    11a8:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    11b0:	ed 81       	ldd	r30, Y+5	; 0x05
    11b2:	fe 81       	ldd	r31, Y+6	; 0x06
    11b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    11b6:	ed 81       	ldd	r30, Y+5	; 0x05
    11b8:	fe 81       	ldd	r31, Y+6	; 0x06
    11ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    11bc:	98 17       	cp	r25, r24
    11be:	d8 f4       	brcc	.+54     	; 0x11f6 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	2f 81       	ldd	r18, Y+7	; 0x07
    11c6:	38 85       	ldd	r19, Y+8	; 0x08
    11c8:	b9 01       	movw	r22, r18
    11ca:	4b 85       	ldd	r20, Y+11	; 0x0b
    11cc:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    11d0:	ed 81       	ldd	r30, Y+5	; 0x05
    11d2:	fe 81       	ldd	r31, Y+6	; 0x06
    11d4:	81 89       	ldd	r24, Z+17	; 0x11
    11d6:	88 23       	and	r24, r24
    11d8:	49 f0       	breq	.+18     	; 0x11ec <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	41 96       	adiw	r24, 0x11	; 17
    11e0:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskRemoveFromEventList>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	11 f4       	brne	.+4      	; 0x11ec <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    11e8:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    11ec:	0f 90       	pop	r0
    11ee:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	8c 87       	std	Y+12, r24	; 0x0c
    11f4:	5c c0       	rjmp	.+184    	; 0x12ae <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	00 97       	sbiw	r24, 0x00	; 0
    11fc:	21 f4       	brne	.+8      	; 0x1206 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1202:	1c 86       	std	Y+12, r1	; 0x0c
    1204:	54 c0       	rjmp	.+168    	; 0x12ae <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	88 23       	and	r24, r24
    120a:	31 f4       	brne	.+12     	; 0x1218 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    120c:	ce 01       	movw	r24, r28
    120e:	02 96       	adiw	r24, 0x02	; 2
    1210:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    121c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	0f 92       	push	r0
    1226:	ed 81       	ldd	r30, Y+5	; 0x05
    1228:	fe 81       	ldd	r31, Y+6	; 0x06
    122a:	85 8d       	ldd	r24, Z+29	; 0x1d
    122c:	8f 3f       	cpi	r24, 0xFF	; 255
    122e:	19 f4       	brne	.+6      	; 0x1236 <xQueueGenericSend+0xb0>
    1230:	ed 81       	ldd	r30, Y+5	; 0x05
    1232:	fe 81       	ldd	r31, Y+6	; 0x06
    1234:	15 8e       	std	Z+29, r1	; 0x1d
    1236:	ed 81       	ldd	r30, Y+5	; 0x05
    1238:	fe 81       	ldd	r31, Y+6	; 0x06
    123a:	86 8d       	ldd	r24, Z+30	; 0x1e
    123c:	8f 3f       	cpi	r24, 0xFF	; 255
    123e:	19 f4       	brne	.+6      	; 0x1246 <xQueueGenericSend+0xc0>
    1240:	ed 81       	ldd	r30, Y+5	; 0x05
    1242:	fe 81       	ldd	r31, Y+6	; 0x06
    1244:	16 8e       	std	Z+30, r1	; 0x1e
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    124a:	ce 01       	movw	r24, r28
    124c:	02 96       	adiw	r24, 0x02	; 2
    124e:	9e 01       	movw	r18, r28
    1250:	27 5f       	subi	r18, 0xF7	; 247
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	b9 01       	movw	r22, r18
    1256:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCheckForTimeOut>
    125a:	88 23       	and	r24, r24
    125c:	09 f5       	brne	.+66     	; 0x12a0 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <prvIsQueueFull>
    1266:	88 23       	and	r24, r24
    1268:	a1 f0       	breq	.+40     	; 0x1292 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	08 96       	adiw	r24, 0x08	; 8
    1270:	29 85       	ldd	r18, Y+9	; 0x09
    1272:	3a 85       	ldd	r19, Y+10	; 0x0a
    1274:	b9 01       	movw	r22, r18
    1276:	0e 94 dd 10 	call	0x21ba	; 0x21ba <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1282:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
    1286:	88 23       	and	r24, r24
    1288:	09 f0       	breq	.+2      	; 0x128c <xQueueGenericSend+0x106>
    128a:	8f cf       	rjmp	.-226    	; 0x11aa <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    128c:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    1290:	8c cf       	rjmp	.-232    	; 0x11aa <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    129a:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
    129e:	85 cf       	rjmp	.-246    	; 0x11aa <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    12a8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    12ac:	1c 86       	std	Y+12, r1	; 0x0c
    12ae:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    12b0:	2c 96       	adiw	r28, 0x0c	; 12
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	29 97       	sbiw	r28, 0x09	; 9
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    12da:	7e 83       	std	Y+6, r23	; 0x06
    12dc:	6d 83       	std	Y+5, r22	; 0x05
    12de:	58 87       	std	Y+8, r21	; 0x08
    12e0:	4f 83       	std	Y+7, r20	; 0x07
    12e2:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    12e4:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    12e6:	eb 81       	ldd	r30, Y+3	; 0x03
    12e8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ea:	92 8d       	ldd	r25, Z+26	; 0x1a
    12ec:	eb 81       	ldd	r30, Y+3	; 0x03
    12ee:	fc 81       	ldd	r31, Y+4	; 0x04
    12f0:	83 8d       	ldd	r24, Z+27	; 0x1b
    12f2:	98 17       	cp	r25, r24
    12f4:	40 f5       	brcc	.+80     	; 0x1346 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	2d 81       	ldd	r18, Y+5	; 0x05
    12fc:	3e 81       	ldd	r19, Y+6	; 0x06
    12fe:	b9 01       	movw	r22, r18
    1300:	49 85       	ldd	r20, Y+9	; 0x09
    1302:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1306:	eb 81       	ldd	r30, Y+3	; 0x03
    1308:	fc 81       	ldd	r31, Y+4	; 0x04
    130a:	86 8d       	ldd	r24, Z+30	; 0x1e
    130c:	8f 3f       	cpi	r24, 0xFF	; 255
    130e:	89 f4       	brne	.+34     	; 0x1332 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1310:	eb 81       	ldd	r30, Y+3	; 0x03
    1312:	fc 81       	ldd	r31, Y+4	; 0x04
    1314:	81 89       	ldd	r24, Z+17	; 0x11
    1316:	88 23       	and	r24, r24
    1318:	99 f0       	breq	.+38     	; 0x1340 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	41 96       	adiw	r24, 0x11	; 17
    1320:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskRemoveFromEventList>
    1324:	88 23       	and	r24, r24
    1326:	61 f0       	breq	.+24     	; 0x1340 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    1328:	ef 81       	ldd	r30, Y+7	; 0x07
    132a:	f8 85       	ldd	r31, Y+8	; 0x08
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	80 83       	st	Z, r24
    1330:	07 c0       	rjmp	.+14     	; 0x1340 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1332:	eb 81       	ldd	r30, Y+3	; 0x03
    1334:	fc 81       	ldd	r31, Y+4	; 0x04
    1336:	86 8d       	ldd	r24, Z+30	; 0x1e
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	eb 81       	ldd	r30, Y+3	; 0x03
    133c:	fc 81       	ldd	r31, Y+4	; 0x04
    133e:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1346:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
}
    134a:	29 96       	adiw	r28, 0x09	; 9
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	2e 97       	sbiw	r28, 0x0e	; 14
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	8f 83       	std	Y+7, r24	; 0x07
    1374:	7a 87       	std	Y+10, r23	; 0x0a
    1376:	69 87       	std	Y+9, r22	; 0x09
    1378:	5c 87       	std	Y+12, r21	; 0x0c
    137a:	4b 87       	std	Y+11, r20	; 0x0b
    137c:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    137e:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1386:	ef 81       	ldd	r30, Y+7	; 0x07
    1388:	f8 85       	ldd	r31, Y+8	; 0x08
    138a:	82 8d       	ldd	r24, Z+26	; 0x1a
    138c:	88 23       	and	r24, r24
    138e:	09 f4       	brne	.+2      	; 0x1392 <xQueueGenericReceive+0x36>
    1390:	3f c0       	rjmp	.+126    	; 0x1410 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1392:	ef 81       	ldd	r30, Y+7	; 0x07
    1394:	f8 85       	ldd	r31, Y+8	; 0x08
    1396:	86 81       	ldd	r24, Z+6	; 0x06
    1398:	97 81       	ldd	r25, Z+7	; 0x07
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    139e:	8f 81       	ldd	r24, Y+7	; 0x07
    13a0:	98 85       	ldd	r25, Y+8	; 0x08
    13a2:	29 85       	ldd	r18, Y+9	; 0x09
    13a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13a6:	b9 01       	movw	r22, r18
    13a8:	0e 94 93 0b 	call	0x1726	; 0x1726 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	88 23       	and	r24, r24
    13b0:	b1 f4       	brne	.+44     	; 0x13de <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    13b2:	ef 81       	ldd	r30, Y+7	; 0x07
    13b4:	f8 85       	ldd	r31, Y+8	; 0x08
    13b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    13b8:	81 50       	subi	r24, 0x01	; 1
    13ba:	ef 81       	ldd	r30, Y+7	; 0x07
    13bc:	f8 85       	ldd	r31, Y+8	; 0x08
    13be:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    13c0:	ef 81       	ldd	r30, Y+7	; 0x07
    13c2:	f8 85       	ldd	r31, Y+8	; 0x08
    13c4:	80 85       	ldd	r24, Z+8	; 0x08
    13c6:	88 23       	and	r24, r24
    13c8:	f1 f0       	breq	.+60     	; 0x1406 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    13ca:	8f 81       	ldd	r24, Y+7	; 0x07
    13cc:	98 85       	ldd	r25, Y+8	; 0x08
    13ce:	08 96       	adiw	r24, 0x08	; 8
    13d0:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskRemoveFromEventList>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	b9 f4       	brne	.+46     	; 0x1406 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    13d8:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    13de:	ef 81       	ldd	r30, Y+7	; 0x07
    13e0:	f8 85       	ldd	r31, Y+8	; 0x08
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02
    13e6:	97 83       	std	Z+7, r25	; 0x07
    13e8:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    13ea:	ef 81       	ldd	r30, Y+7	; 0x07
    13ec:	f8 85       	ldd	r31, Y+8	; 0x08
    13ee:	81 89       	ldd	r24, Z+17	; 0x11
    13f0:	88 23       	and	r24, r24
    13f2:	49 f0       	breq	.+18     	; 0x1406 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    13f4:	8f 81       	ldd	r24, Y+7	; 0x07
    13f6:	98 85       	ldd	r25, Y+8	; 0x08
    13f8:	41 96       	adiw	r24, 0x11	; 17
    13fa:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskRemoveFromEventList>
    13fe:	88 23       	and	r24, r24
    1400:	11 f0       	breq	.+4      	; 0x1406 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1402:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	8e 87       	std	Y+14, r24	; 0x0e
    140e:	5c c0       	rjmp	.+184    	; 0x14c8 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1410:	8b 85       	ldd	r24, Y+11	; 0x0b
    1412:	9c 85       	ldd	r25, Y+12	; 0x0c
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	21 f4       	brne	.+8      	; 0x1420 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    141c:	1e 86       	std	Y+14, r1	; 0x0e
    141e:	54 c0       	rjmp	.+168    	; 0x14c8 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	88 23       	and	r24, r24
    1424:	31 f4       	brne	.+12     	; 0x1432 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1426:	ce 01       	movw	r24, r28
    1428:	04 96       	adiw	r24, 0x04	; 4
    142a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1436:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	0f 92       	push	r0
    1440:	ef 81       	ldd	r30, Y+7	; 0x07
    1442:	f8 85       	ldd	r31, Y+8	; 0x08
    1444:	85 8d       	ldd	r24, Z+29	; 0x1d
    1446:	8f 3f       	cpi	r24, 0xFF	; 255
    1448:	19 f4       	brne	.+6      	; 0x1450 <xQueueGenericReceive+0xf4>
    144a:	ef 81       	ldd	r30, Y+7	; 0x07
    144c:	f8 85       	ldd	r31, Y+8	; 0x08
    144e:	15 8e       	std	Z+29, r1	; 0x1d
    1450:	ef 81       	ldd	r30, Y+7	; 0x07
    1452:	f8 85       	ldd	r31, Y+8	; 0x08
    1454:	86 8d       	ldd	r24, Z+30	; 0x1e
    1456:	8f 3f       	cpi	r24, 0xFF	; 255
    1458:	19 f4       	brne	.+6      	; 0x1460 <xQueueGenericReceive+0x104>
    145a:	ef 81       	ldd	r30, Y+7	; 0x07
    145c:	f8 85       	ldd	r31, Y+8	; 0x08
    145e:	16 8e       	std	Z+30, r1	; 0x1e
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1464:	ce 01       	movw	r24, r28
    1466:	04 96       	adiw	r24, 0x04	; 4
    1468:	9e 01       	movw	r18, r28
    146a:	25 5f       	subi	r18, 0xF5	; 245
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	b9 01       	movw	r22, r18
    1470:	0e 94 94 11 	call	0x2328	; 0x2328 <xTaskCheckForTimeOut>
    1474:	88 23       	and	r24, r24
    1476:	09 f5       	brne	.+66     	; 0x14ba <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	98 85       	ldd	r25, Y+8	; 0x08
    147c:	0e 94 2f 0c 	call	0x185e	; 0x185e <prvIsQueueEmpty>
    1480:	88 23       	and	r24, r24
    1482:	a1 f0       	breq	.+40     	; 0x14ac <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1484:	8f 81       	ldd	r24, Y+7	; 0x07
    1486:	98 85       	ldd	r25, Y+8	; 0x08
    1488:	41 96       	adiw	r24, 0x11	; 17
    148a:	2b 85       	ldd	r18, Y+11	; 0x0b
    148c:	3c 85       	ldd	r19, Y+12	; 0x0c
    148e:	b9 01       	movw	r22, r18
    1490:	0e 94 dd 10 	call	0x21ba	; 0x21ba <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1494:	8f 81       	ldd	r24, Y+7	; 0x07
    1496:	98 85       	ldd	r25, Y+8	; 0x08
    1498:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    149c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
    14a0:	88 23       	and	r24, r24
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <xQueueGenericReceive+0x14a>
    14a4:	6d cf       	rjmp	.-294    	; 0x1380 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    14a6:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
    14aa:	6a cf       	rjmp	.-300    	; 0x1380 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    14ac:	8f 81       	ldd	r24, Y+7	; 0x07
    14ae:	98 85       	ldd	r25, Y+8	; 0x08
    14b0:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    14b4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
    14b8:	63 cf       	rjmp	.-314    	; 0x1380 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    14ba:	8f 81       	ldd	r24, Y+7	; 0x07
    14bc:	98 85       	ldd	r25, Y+8	; 0x08
    14be:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    14c2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    14c6:	1e 86       	std	Y+14, r1	; 0x0e
    14c8:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    14ca:	2e 96       	adiw	r28, 0x0e	; 14
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	28 97       	sbiw	r28, 0x08	; 8
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	7e 83       	std	Y+6, r23	; 0x06
    14f6:	6d 83       	std	Y+5, r22	; 0x05
    14f8:	58 87       	std	Y+8, r21	; 0x08
    14fa:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    14fc:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    14fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1500:	fc 81       	ldd	r31, Y+4	; 0x04
    1502:	82 8d       	ldd	r24, Z+26	; 0x1a
    1504:	88 23       	and	r24, r24
    1506:	71 f1       	breq	.+92     	; 0x1564 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	2d 81       	ldd	r18, Y+5	; 0x05
    150e:	3e 81       	ldd	r19, Y+6	; 0x06
    1510:	b9 01       	movw	r22, r18
    1512:	0e 94 93 0b 	call	0x1726	; 0x1726 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1516:	eb 81       	ldd	r30, Y+3	; 0x03
    1518:	fc 81       	ldd	r31, Y+4	; 0x04
    151a:	82 8d       	ldd	r24, Z+26	; 0x1a
    151c:	81 50       	subi	r24, 0x01	; 1
    151e:	eb 81       	ldd	r30, Y+3	; 0x03
    1520:	fc 81       	ldd	r31, Y+4	; 0x04
    1522:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	85 8d       	ldd	r24, Z+29	; 0x1d
    152a:	8f 3f       	cpi	r24, 0xFF	; 255
    152c:	89 f4       	brne	.+34     	; 0x1550 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    152e:	eb 81       	ldd	r30, Y+3	; 0x03
    1530:	fc 81       	ldd	r31, Y+4	; 0x04
    1532:	80 85       	ldd	r24, Z+8	; 0x08
    1534:	88 23       	and	r24, r24
    1536:	99 f0       	breq	.+38     	; 0x155e <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	08 96       	adiw	r24, 0x08	; 8
    153e:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskRemoveFromEventList>
    1542:	88 23       	and	r24, r24
    1544:	61 f0       	breq	.+24     	; 0x155e <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    1546:	ef 81       	ldd	r30, Y+7	; 0x07
    1548:	f8 85       	ldd	r31, Y+8	; 0x08
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 83       	st	Z, r24
    154e:	07 c0       	rjmp	.+14     	; 0x155e <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	85 8d       	ldd	r24, Z+29	; 0x1d
    1556:	8f 5f       	subi	r24, 0xFF	; 255
    1558:	eb 81       	ldd	r30, Y+3	; 0x03
    155a:	fc 81       	ldd	r31, Y+4	; 0x04
    155c:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	8a 83       	std	Y+2, r24	; 0x02
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    1564:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1568:	28 96       	adiw	r28, 0x08	; 8
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <uxQueueMessagesWaiting+0x6>
    1580:	0f 92       	push	r0
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	9b 83       	std	Y+3, r25	; 0x03
    1588:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1590:	ea 81       	ldd	r30, Y+2	; 0x02
    1592:	fb 81       	ldd	r31, Y+3	; 0x03
    1594:	82 8d       	ldd	r24, Z+26	; 0x1a
    1596:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    159c:	89 81       	ldd	r24, Y+1	; 0x01
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <uxQueueMessagesWaitingFromISR+0x6>
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	9b 83       	std	Y+3, r25	; 0x03
    15b8:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    15ba:	ea 81       	ldd	r30, Y+2	; 0x02
    15bc:	fb 81       	ldd	r31, Y+3	; 0x03
    15be:	82 8d       	ldd	r24, Z+26	; 0x1a
    15c0:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <vQueueDelete+0x6>
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vPortFree>
	vPortFree( pxQueue );
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vPortFree>
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <prvCopyDataToQueue+0x6>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <prvCopyDataToQueue+0x8>
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	7c 83       	std	Y+4, r23	; 0x04
    1610:	6b 83       	std	Y+3, r22	; 0x03
    1612:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1614:	e9 81       	ldd	r30, Y+1	; 0x01
    1616:	fa 81       	ldd	r31, Y+2	; 0x02
    1618:	84 8d       	ldd	r24, Z+28	; 0x1c
    161a:	88 23       	and	r24, r24
    161c:	09 f4       	brne	.+2      	; 0x1620 <prvCopyDataToQueue+0x24>
    161e:	74 c0       	rjmp	.+232    	; 0x1708 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	88 23       	and	r24, r24
    1624:	99 f5       	brne	.+102    	; 0x168c <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    1626:	e9 81       	ldd	r30, Y+1	; 0x01
    1628:	fa 81       	ldd	r31, Y+2	; 0x02
    162a:	64 81       	ldd	r22, Z+4	; 0x04
    162c:	75 81       	ldd	r23, Z+5	; 0x05
    162e:	e9 81       	ldd	r30, Y+1	; 0x01
    1630:	fa 81       	ldd	r31, Y+2	; 0x02
    1632:	84 8d       	ldd	r24, Z+28	; 0x1c
    1634:	48 2f       	mov	r20, r24
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	2b 81       	ldd	r18, Y+3	; 0x03
    163a:	3c 81       	ldd	r19, Y+4	; 0x04
    163c:	cb 01       	movw	r24, r22
    163e:	b9 01       	movw	r22, r18
    1640:	0e 94 86 13 	call	0x270c	; 0x270c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1644:	e9 81       	ldd	r30, Y+1	; 0x01
    1646:	fa 81       	ldd	r31, Y+2	; 0x02
    1648:	24 81       	ldd	r18, Z+4	; 0x04
    164a:	35 81       	ldd	r19, Z+5	; 0x05
    164c:	e9 81       	ldd	r30, Y+1	; 0x01
    164e:	fa 81       	ldd	r31, Y+2	; 0x02
    1650:	84 8d       	ldd	r24, Z+28	; 0x1c
    1652:	88 2f       	mov	r24, r24
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	82 0f       	add	r24, r18
    1658:	93 1f       	adc	r25, r19
    165a:	e9 81       	ldd	r30, Y+1	; 0x01
    165c:	fa 81       	ldd	r31, Y+2	; 0x02
    165e:	95 83       	std	Z+5, r25	; 0x05
    1660:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1662:	e9 81       	ldd	r30, Y+1	; 0x01
    1664:	fa 81       	ldd	r31, Y+2	; 0x02
    1666:	24 81       	ldd	r18, Z+4	; 0x04
    1668:	35 81       	ldd	r19, Z+5	; 0x05
    166a:	e9 81       	ldd	r30, Y+1	; 0x01
    166c:	fa 81       	ldd	r31, Y+2	; 0x02
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	28 17       	cp	r18, r24
    1674:	39 07       	cpc	r19, r25
    1676:	08 f4       	brcc	.+2      	; 0x167a <prvCopyDataToQueue+0x7e>
    1678:	47 c0       	rjmp	.+142    	; 0x1708 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    167a:	e9 81       	ldd	r30, Y+1	; 0x01
    167c:	fa 81       	ldd	r31, Y+2	; 0x02
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	e9 81       	ldd	r30, Y+1	; 0x01
    1684:	fa 81       	ldd	r31, Y+2	; 0x02
    1686:	95 83       	std	Z+5, r25	; 0x05
    1688:	84 83       	std	Z+4, r24	; 0x04
    168a:	3e c0       	rjmp	.+124    	; 0x1708 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    168c:	e9 81       	ldd	r30, Y+1	; 0x01
    168e:	fa 81       	ldd	r31, Y+2	; 0x02
    1690:	66 81       	ldd	r22, Z+6	; 0x06
    1692:	77 81       	ldd	r23, Z+7	; 0x07
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	84 8d       	ldd	r24, Z+28	; 0x1c
    169a:	48 2f       	mov	r20, r24
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	2b 81       	ldd	r18, Y+3	; 0x03
    16a0:	3c 81       	ldd	r19, Y+4	; 0x04
    16a2:	cb 01       	movw	r24, r22
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 86 13 	call	0x270c	; 0x270c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    16aa:	e9 81       	ldd	r30, Y+1	; 0x01
    16ac:	fa 81       	ldd	r31, Y+2	; 0x02
    16ae:	26 81       	ldd	r18, Z+6	; 0x06
    16b0:	37 81       	ldd	r19, Z+7	; 0x07
    16b2:	e9 81       	ldd	r30, Y+1	; 0x01
    16b4:	fa 81       	ldd	r31, Y+2	; 0x02
    16b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	90 95       	com	r25
    16be:	81 95       	neg	r24
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	e9 81       	ldd	r30, Y+1	; 0x01
    16c8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ca:	97 83       	std	Z+7, r25	; 0x07
    16cc:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    16ce:	e9 81       	ldd	r30, Y+1	; 0x01
    16d0:	fa 81       	ldd	r31, Y+2	; 0x02
    16d2:	26 81       	ldd	r18, Z+6	; 0x06
    16d4:	37 81       	ldd	r19, Z+7	; 0x07
    16d6:	e9 81       	ldd	r30, Y+1	; 0x01
    16d8:	fa 81       	ldd	r31, Y+2	; 0x02
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	28 17       	cp	r18, r24
    16e0:	39 07       	cpc	r19, r25
    16e2:	90 f4       	brcc	.+36     	; 0x1708 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	22 81       	ldd	r18, Z+2	; 0x02
    16ea:	33 81       	ldd	r19, Z+3	; 0x03
    16ec:	e9 81       	ldd	r30, Y+1	; 0x01
    16ee:	fa 81       	ldd	r31, Y+2	; 0x02
    16f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	90 95       	com	r25
    16f8:	81 95       	neg	r24
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	82 0f       	add	r24, r18
    16fe:	93 1f       	adc	r25, r19
    1700:	e9 81       	ldd	r30, Y+1	; 0x01
    1702:	fa 81       	ldd	r31, Y+2	; 0x02
    1704:	97 83       	std	Z+7, r25	; 0x07
    1706:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	82 8d       	ldd	r24, Z+26	; 0x1a
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	e9 81       	ldd	r30, Y+1	; 0x01
    1712:	fa 81       	ldd	r31, Y+2	; 0x02
    1714:	82 8f       	std	Z+26, r24	; 0x1a
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <prvCopyDataFromQueue+0x6>
    172c:	00 d0       	rcall	.+0      	; 0x172e <prvCopyDataFromQueue+0x8>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	9a 83       	std	Y+2, r25	; 0x02
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	7c 83       	std	Y+4, r23	; 0x04
    1738:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    173a:	e9 81       	ldd	r30, Y+1	; 0x01
    173c:	fa 81       	ldd	r31, Y+2	; 0x02
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	89 f1       	breq	.+98     	; 0x17a8 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1746:	e9 81       	ldd	r30, Y+1	; 0x01
    1748:	fa 81       	ldd	r31, Y+2	; 0x02
    174a:	26 81       	ldd	r18, Z+6	; 0x06
    174c:	37 81       	ldd	r19, Z+7	; 0x07
    174e:	e9 81       	ldd	r30, Y+1	; 0x01
    1750:	fa 81       	ldd	r31, Y+2	; 0x02
    1752:	84 8d       	ldd	r24, Z+28	; 0x1c
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	e9 81       	ldd	r30, Y+1	; 0x01
    175e:	fa 81       	ldd	r31, Y+2	; 0x02
    1760:	97 83       	std	Z+7, r25	; 0x07
    1762:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1764:	e9 81       	ldd	r30, Y+1	; 0x01
    1766:	fa 81       	ldd	r31, Y+2	; 0x02
    1768:	26 81       	ldd	r18, Z+6	; 0x06
    176a:	37 81       	ldd	r19, Z+7	; 0x07
    176c:	e9 81       	ldd	r30, Y+1	; 0x01
    176e:	fa 81       	ldd	r31, Y+2	; 0x02
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	28 17       	cp	r18, r24
    1776:	39 07       	cpc	r19, r25
    1778:	40 f0       	brcs	.+16     	; 0x178a <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    177a:	e9 81       	ldd	r30, Y+1	; 0x01
    177c:	fa 81       	ldd	r31, Y+2	; 0x02
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	e9 81       	ldd	r30, Y+1	; 0x01
    1784:	fa 81       	ldd	r31, Y+2	; 0x02
    1786:	97 83       	std	Z+7, r25	; 0x07
    1788:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	46 81       	ldd	r20, Z+6	; 0x06
    1790:	57 81       	ldd	r21, Z+7	; 0x07
    1792:	e9 81       	ldd	r30, Y+1	; 0x01
    1794:	fa 81       	ldd	r31, Y+2	; 0x02
    1796:	84 8d       	ldd	r24, Z+28	; 0x1c
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	ba 01       	movw	r22, r20
    17a2:	a9 01       	movw	r20, r18
    17a4:	0e 94 86 13 	call	0x270c	; 0x270c <memcpy>
	}
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <prvUnlockQueue+0x6>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	0f 92       	push	r0
    17ca:	15 c0       	rjmp	.+42     	; 0x17f6 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17cc:	e9 81       	ldd	r30, Y+1	; 0x01
    17ce:	fa 81       	ldd	r31, Y+2	; 0x02
    17d0:	81 89       	ldd	r24, Z+17	; 0x11
    17d2:	88 23       	and	r24, r24
    17d4:	a9 f0       	breq	.+42     	; 0x1800 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	41 96       	adiw	r24, 0x11	; 17
    17dc:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskRemoveFromEventList>
    17e0:	88 23       	and	r24, r24
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    17e4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    17e8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ea:	fa 81       	ldd	r31, Y+2	; 0x02
    17ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    17ee:	81 50       	subi	r24, 0x01	; 1
    17f0:	e9 81       	ldd	r30, Y+1	; 0x01
    17f2:	fa 81       	ldd	r31, Y+2	; 0x02
    17f4:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    17f6:	e9 81       	ldd	r30, Y+1	; 0x01
    17f8:	fa 81       	ldd	r31, Y+2	; 0x02
    17fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    17fc:	18 16       	cp	r1, r24
    17fe:	34 f3       	brlt	.-52     	; 0x17cc <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    1808:	0f 90       	pop	r0
    180a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	0f 92       	push	r0
    1812:	15 c0       	rjmp	.+42     	; 0x183e <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1814:	e9 81       	ldd	r30, Y+1	; 0x01
    1816:	fa 81       	ldd	r31, Y+2	; 0x02
    1818:	80 85       	ldd	r24, Z+8	; 0x08
    181a:	88 23       	and	r24, r24
    181c:	a9 f0       	breq	.+42     	; 0x1848 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	08 96       	adiw	r24, 0x08	; 8
    1824:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskRemoveFromEventList>
    1828:	88 23       	and	r24, r24
    182a:	11 f0       	breq	.+4      	; 0x1830 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    182c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	85 8d       	ldd	r24, Z+29	; 0x1d
    1836:	81 50       	subi	r24, 0x01	; 1
    1838:	e9 81       	ldd	r30, Y+1	; 0x01
    183a:	fa 81       	ldd	r31, Y+2	; 0x02
    183c:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	85 8d       	ldd	r24, Z+29	; 0x1d
    1844:	18 16       	cp	r1, r24
    1846:	34 f3       	brlt	.-52     	; 0x1814 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
    184c:	8f ef       	ldi	r24, 0xFF	; 255
    184e:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <prvIsQueueEmpty+0x6>
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	9b 83       	std	Y+3, r25	; 0x03
    186c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1874:	ea 81       	ldd	r30, Y+2	; 0x02
    1876:	fb 81       	ldd	r31, Y+3	; 0x03
    1878:	82 8d       	ldd	r24, Z+26	; 0x1a
    187a:	19 82       	std	Y+1, r1	; 0x01
    187c:	88 23       	and	r24, r24
    187e:	11 f4       	brne	.+4      	; 0x1884 <prvIsQueueEmpty+0x26>
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <xQueueIsQueueEmptyFromISR+0x6>
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	9b 83       	std	Y+3, r25	; 0x03
    18a4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    18a6:	ea 81       	ldd	r30, Y+2	; 0x02
    18a8:	fb 81       	ldd	r31, Y+3	; 0x03
    18aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	88 23       	and	r24, r24
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <xQueueIsQueueEmptyFromISR+0x20>
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <prvIsQueueFull+0x6>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	9b 83       	std	Y+3, r25	; 0x03
    18d2:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    18da:	ea 81       	ldd	r30, Y+2	; 0x02
    18dc:	fb 81       	ldd	r31, Y+3	; 0x03
    18de:	92 8d       	ldd	r25, Z+26	; 0x1a
    18e0:	ea 81       	ldd	r30, Y+2	; 0x02
    18e2:	fb 81       	ldd	r31, Y+3	; 0x03
    18e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    18e6:	19 82       	std	Y+1, r1	; 0x01
    18e8:	98 17       	cp	r25, r24
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <prvIsQueueFull+0x2c>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <xQueueIsQueueFullFromISR+0x6>
    1908:	0f 92       	push	r0
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	9b 83       	std	Y+3, r25	; 0x03
    1910:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1912:	ea 81       	ldd	r30, Y+2	; 0x02
    1914:	fb 81       	ldd	r31, Y+3	; 0x03
    1916:	92 8d       	ldd	r25, Z+26	; 0x1a
    1918:	ea 81       	ldd	r30, Y+2	; 0x02
    191a:	fb 81       	ldd	r31, Y+3	; 0x03
    191c:	83 8d       	ldd	r24, Z+27	; 0x1b
    191e:	19 82       	std	Y+1, r1	; 0x01
    1920:	98 17       	cp	r25, r24
    1922:	11 f4       	brne	.+4      	; 0x1928 <xQueueIsQueueFullFromISR+0x26>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1936:	af 92       	push	r10
    1938:	bf 92       	push	r11
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	64 97       	sbiw	r28, 0x14	; 20
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	9f 83       	std	Y+7, r25	; 0x07
    195c:	8e 83       	std	Y+6, r24	; 0x06
    195e:	79 87       	std	Y+9, r23	; 0x09
    1960:	68 87       	std	Y+8, r22	; 0x08
    1962:	5b 87       	std	Y+11, r21	; 0x0b
    1964:	4a 87       	std	Y+10, r20	; 0x0a
    1966:	3d 87       	std	Y+13, r19	; 0x0d
    1968:	2c 87       	std	Y+12, r18	; 0x0c
    196a:	0e 87       	std	Y+14, r16	; 0x0e
    196c:	f8 8a       	std	Y+16, r15	; 0x10
    196e:	ef 86       	std	Y+15, r14	; 0x0f
    1970:	da 8a       	std	Y+18, r13	; 0x12
    1972:	c9 8a       	std	Y+17, r12	; 0x11
    1974:	bc 8a       	std	Y+20, r11	; 0x14
    1976:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    1978:	8a 85       	ldd	r24, Y+10	; 0x0a
    197a:	9b 85       	ldd	r25, Y+11	; 0x0b
    197c:	29 89       	ldd	r18, Y+17	; 0x11
    197e:	3a 89       	ldd	r19, Y+18	; 0x12
    1980:	b9 01       	movw	r22, r18
    1982:	0e 94 20 13 	call	0x2640	; 0x2640 <prvAllocateTCBAndStack>
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	09 f4       	brne	.+2      	; 0x1994 <xTaskGenericCreate+0x5e>
    1992:	99 c0       	rjmp	.+306    	; 0x1ac6 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1994:	eb 81       	ldd	r30, Y+3	; 0x03
    1996:	fc 81       	ldd	r31, Y+4	; 0x04
    1998:	27 89       	ldd	r18, Z+23	; 0x17
    199a:	30 8d       	ldd	r19, Z+24	; 0x18
    199c:	8a 85       	ldd	r24, Y+10	; 0x0a
    199e:	9b 85       	ldd	r25, Y+11	; 0x0b
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	82 0f       	add	r24, r18
    19a4:	93 1f       	adc	r25, r19
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	28 85       	ldd	r18, Y+8	; 0x08
    19b0:	39 85       	ldd	r19, Y+9	; 0x09
    19b2:	eb 89       	ldd	r30, Y+19	; 0x13
    19b4:	fc 89       	ldd	r31, Y+20	; 0x14
    19b6:	aa 85       	ldd	r26, Y+10	; 0x0a
    19b8:	bb 85       	ldd	r27, Y+11	; 0x0b
    19ba:	b9 01       	movw	r22, r18
    19bc:	4e 85       	ldd	r20, Y+14	; 0x0e
    19be:	9f 01       	movw	r18, r30
    19c0:	8d 01       	movw	r16, r26
    19c2:	0e 94 05 12 	call	0x240a	; 0x240a <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ca:	2e 81       	ldd	r18, Y+6	; 0x06
    19cc:	3f 81       	ldd	r19, Y+7	; 0x07
    19ce:	4c 85       	ldd	r20, Y+12	; 0x0c
    19d0:	5d 85       	ldd	r21, Y+13	; 0x0d
    19d2:	b9 01       	movw	r22, r18
    19d4:	0e 94 48 05 	call	0xa90	; 0xa90 <pxPortInitialiseStack>
    19d8:	eb 81       	ldd	r30, Y+3	; 0x03
    19da:	fc 81       	ldd	r31, Y+4	; 0x04
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    19e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e2:	98 89       	ldd	r25, Y+16	; 0x10
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    19e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    19ea:	f8 89       	ldd	r31, Y+16	; 0x10
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    19fa:	80 91 10 03 	lds	r24, 0x0310
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 10 03 	sts	0x0310, r24
			if( pxCurrentTCB == NULL )
    1a04:	80 91 0d 03 	lds	r24, 0x030D
    1a08:	90 91 0e 03 	lds	r25, 0x030E
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	69 f4       	brne	.+26     	; 0x1a2a <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	9c 81       	ldd	r25, Y+4	; 0x04
    1a14:	90 93 0e 03 	sts	0x030E, r25
    1a18:	80 93 0d 03 	sts	0x030D, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1a1c:	80 91 10 03 	lds	r24, 0x0310
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	a9 f4       	brne	.+42     	; 0x1a4e <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1a24:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <prvInitialiseTaskLists>
    1a28:	12 c0       	rjmp	.+36     	; 0x1a4e <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1a2a:	80 91 15 03 	lds	r24, 0x0315
    1a2e:	88 23       	and	r24, r24
    1a30:	71 f4       	brne	.+28     	; 0x1a4e <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1a32:	e0 91 0d 03 	lds	r30, 0x030D
    1a36:	f0 91 0e 03 	lds	r31, 0x030E
    1a3a:	96 89       	ldd	r25, Z+22	; 0x16
    1a3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a3e:	89 17       	cp	r24, r25
    1a40:	30 f0       	brcs	.+12     	; 0x1a4e <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	90 93 0e 03 	sts	0x030E, r25
    1a4a:	80 93 0d 03 	sts	0x030D, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1a4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a50:	fc 81       	ldd	r31, Y+4	; 0x04
    1a52:	96 89       	ldd	r25, Z+22	; 0x16
    1a54:	80 91 13 03 	lds	r24, 0x0313
    1a58:	89 17       	cp	r24, r25
    1a5a:	28 f4       	brcc	.+10     	; 0x1a66 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a60:	86 89       	ldd	r24, Z+22	; 0x16
    1a62:	80 93 13 03 	sts	0x0313, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1a66:	80 91 1a 03 	lds	r24, 0x031A
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	80 93 1a 03 	sts	0x031A, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    1a70:	eb 81       	ldd	r30, Y+3	; 0x03
    1a72:	fc 81       	ldd	r31, Y+4	; 0x04
    1a74:	96 89       	ldd	r25, Z+22	; 0x16
    1a76:	80 91 14 03 	lds	r24, 0x0314
    1a7a:	89 17       	cp	r24, r25
    1a7c:	28 f4       	brcc	.+10     	; 0x1a88 <xTaskGenericCreate+0x152>
    1a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a80:	fc 81       	ldd	r31, Y+4	; 0x04
    1a82:	86 89       	ldd	r24, Z+22	; 0x16
    1a84:	80 93 14 03 	sts	0x0314, r24
    1a88:	eb 81       	ldd	r30, Y+3	; 0x03
    1a8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a8c:	86 89       	ldd	r24, Z+22	; 0x16
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	c9 01       	movw	r24, r18
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	82 0f       	add	r24, r18
    1aa2:	93 1f       	adc	r25, r19
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	45 5e       	subi	r20, 0xE5	; 229
    1aa8:	5c 4f       	sbci	r21, 0xFC	; 252
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	9c 01       	movw	r18, r24
    1ab0:	2e 5f       	subi	r18, 0xFE	; 254
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	b9 01       	movw	r22, r18
    1ab8:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>

			xReturn = pdPASS;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	71 f4       	brne	.+28     	; 0x1aec <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    1ad0:	80 91 15 03 	lds	r24, 0x0315
    1ad4:	88 23       	and	r24, r24
    1ad6:	51 f0       	breq	.+20     	; 0x1aec <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1ad8:	e0 91 0d 03 	lds	r30, 0x030D
    1adc:	f0 91 0e 03 	lds	r31, 0x030E
    1ae0:	96 89       	ldd	r25, Z+22	; 0x16
    1ae2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae4:	98 17       	cp	r25, r24
    1ae6:	10 f4       	brcc	.+4      	; 0x1aec <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    1ae8:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
			}
		}
	}

	return xReturn;
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1aee:	64 96       	adiw	r28, 0x14	; 20
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	df 90       	pop	r13
    1b08:	cf 90       	pop	r12
    1b0a:	bf 90       	pop	r11
    1b0c:	af 90       	pop	r10
    1b0e:	08 95       	ret

00001b10 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <vTaskDelete+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <vTaskDelete+0x8>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <vTaskDelete+0xa>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    1b28:	20 91 0d 03 	lds	r18, 0x030D
    1b2c:	30 91 0e 03 	lds	r19, 0x030E
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	82 17       	cp	r24, r18
    1b36:	93 07       	cpc	r25, r19
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    1b3a:	1c 82       	std	Y+4, r1	; 0x04
    1b3c:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	39 f4       	brne	.+14     	; 0x1b54 <vTaskDelete+0x44>
    1b46:	80 91 0d 03 	lds	r24, 0x030D
    1b4a:	90 91 0e 03 	lds	r25, 0x030E
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <vTaskDelete+0x4c>
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	02 96       	adiw	r24, 0x02	; 2
    1b6a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	84 89       	ldd	r24, Z+20	; 0x14
    1b74:	95 89       	ldd	r25, Z+21	; 0x15
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	29 f0       	breq	.+10     	; 0x1b84 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	0c 96       	adiw	r24, 0x0c	; 12
    1b80:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	9c 01       	movw	r18, r24
    1b8a:	2e 5f       	subi	r18, 0xFE	; 254
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	87 e6       	ldi	r24, 0x67	; 103
    1b90:	93 e0       	ldi	r25, 0x03	; 3
    1b92:	b9 01       	movw	r22, r18
    1b94:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1b98:	80 91 0f 03 	lds	r24, 0x030F
    1b9c:	8f 5f       	subi	r24, 0xFF	; 255
    1b9e:	80 93 0f 03 	sts	0x030F, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1ba2:	80 91 1a 03 	lds	r24, 0x031A
    1ba6:	8f 5f       	subi	r24, 0xFF	; 255
    1ba8:	80 93 1a 03 	sts	0x031A, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    1bb0:	80 91 15 03 	lds	r24, 0x0315
    1bb4:	88 23       	and	r24, r24
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	11 f4       	brne	.+4      	; 0x1bc4 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    1bc0:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
			}
		}
	}
    1bc4:	26 96       	adiw	r28, 0x06	; 6
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	28 97       	sbiw	r28, 0x08	; 8
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	78 87       	std	Y+8, r23	; 0x08
    1bf0:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1bf2:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1bf4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1bf8:	ed 81       	ldd	r30, Y+5	; 0x05
    1bfa:	fe 81       	ldd	r31, Y+6	; 0x06
    1bfc:	20 81       	ld	r18, Z
    1bfe:	31 81       	ldd	r19, Z+1	; 0x01
    1c00:	8f 81       	ldd	r24, Y+7	; 0x07
    1c02:	98 85       	ldd	r25, Y+8	; 0x08
    1c04:	82 0f       	add	r24, r18
    1c06:	93 1f       	adc	r25, r19
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    1c0c:	ed 81       	ldd	r30, Y+5	; 0x05
    1c0e:	fe 81       	ldd	r31, Y+6	; 0x06
    1c10:	20 81       	ld	r18, Z
    1c12:	31 81       	ldd	r19, Z+1	; 0x01
    1c14:	80 91 11 03 	lds	r24, 0x0311
    1c18:	90 91 12 03 	lds	r25, 0x0312
    1c1c:	82 17       	cp	r24, r18
    1c1e:	93 07       	cpc	r25, r19
    1c20:	a8 f4       	brcc	.+42     	; 0x1c4c <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1c22:	ed 81       	ldd	r30, Y+5	; 0x05
    1c24:	fe 81       	ldd	r31, Y+6	; 0x06
    1c26:	20 81       	ld	r18, Z
    1c28:	31 81       	ldd	r19, Z+1	; 0x01
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2e:	82 17       	cp	r24, r18
    1c30:	93 07       	cpc	r25, r19
    1c32:	00 f5       	brcc	.+64     	; 0x1c74 <vTaskDelayUntil+0x9e>
    1c34:	20 91 11 03 	lds	r18, 0x0311
    1c38:	30 91 12 03 	lds	r19, 0x0312
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c40:	28 17       	cp	r18, r24
    1c42:	39 07       	cpc	r19, r25
    1c44:	b8 f4       	brcc	.+46     	; 0x1c74 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1c4c:	ed 81       	ldd	r30, Y+5	; 0x05
    1c4e:	fe 81       	ldd	r31, Y+6	; 0x06
    1c50:	20 81       	ld	r18, Z
    1c52:	31 81       	ldd	r19, Z+1	; 0x01
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	82 17       	cp	r24, r18
    1c5a:	93 07       	cpc	r25, r19
    1c5c:	48 f0       	brcs	.+18     	; 0x1c70 <vTaskDelayUntil+0x9a>
    1c5e:	20 91 11 03 	lds	r18, 0x0311
    1c62:	30 91 12 03 	lds	r19, 0x0312
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	28 17       	cp	r18, r24
    1c6c:	39 07       	cpc	r19, r25
    1c6e:	10 f4       	brcc	.+4      	; 0x1c74 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1c74:	ed 81       	ldd	r30, Y+5	; 0x05
    1c76:	fe 81       	ldd	r31, Y+6	; 0x06
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	88 23       	and	r24, r24
    1c84:	59 f0       	breq	.+22     	; 0x1c9c <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1c86:	80 91 0d 03 	lds	r24, 0x030D
    1c8a:	90 91 0e 03 	lds	r25, 0x030E
    1c8e:	02 96       	adiw	r24, 0x02	; 2
    1c90:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	0e 94 d7 12 	call	0x25ae	; 0x25ae <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1c9c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
    1ca0:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	88 23       	and	r24, r24
    1ca6:	11 f4       	brne	.+4      	; 0x1cac <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    1ca8:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
		}
	}
    1cac:	28 96       	adiw	r28, 0x08	; 8
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <vTaskDelay+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <vTaskDelay+0x8>
    1cc6:	0f 92       	push	r0
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	9d 83       	std	Y+5, r25	; 0x05
    1cce:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1cd0:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	d1 f0       	breq	.+52     	; 0x1d0e <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    1cda:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1cde:	20 91 11 03 	lds	r18, 0x0311
    1ce2:	30 91 12 03 	lds	r19, 0x0312
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cea:	82 0f       	add	r24, r18
    1cec:	93 1f       	adc	r25, r19
    1cee:	9b 83       	std	Y+3, r25	; 0x03
    1cf0:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1cf2:	80 91 0d 03 	lds	r24, 0x030D
    1cf6:	90 91 0e 03 	lds	r25, 0x030E
    1cfa:	02 96       	adiw	r24, 0x02	; 2
    1cfc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	0e 94 d7 12 	call	0x25ae	; 0x25ae <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1d08:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>
    1d0c:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	88 23       	and	r24, r24
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    1d14:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
		}
	}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1d28:	af 92       	push	r10
    1d2a:	bf 92       	push	r11
    1d2c:	cf 92       	push	r12
    1d2e:	df 92       	push	r13
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	0f 92       	push	r0
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1d40:	2c e6       	ldi	r18, 0x6C	; 108
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	8b ef       	ldi	r24, 0xFB	; 251
    1d46:	91 e1       	ldi	r25, 0x11	; 17
    1d48:	b9 01       	movw	r22, r18
    1d4a:	45 e5       	ldi	r20, 0x55	; 85
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	00 e0       	ldi	r16, 0x00	; 0
    1d54:	ee 24       	eor	r14, r14
    1d56:	ff 24       	eor	r15, r15
    1d58:	cc 24       	eor	r12, r12
    1d5a:	dd 24       	eor	r13, r13
    1d5c:	aa 24       	eor	r10, r10
    1d5e:	bb 24       	eor	r11, r11
    1d60:	0e 94 9b 0c 	call	0x1936	; 0x1936 <xTaskGenericCreate>
    1d64:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	51 f4       	brne	.+20     	; 0x1d80 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1d6c:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	80 93 15 03 	sts	0x0315, r24
		xTickCount = ( portTickType ) 0U;
    1d74:	10 92 12 03 	sts	0x0312, r1
    1d78:	10 92 11 03 	sts	0x0311, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1d7c:	0e 94 cb 06 	call	0xd96	; 0xd96 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	0f 91       	pop	r16
    1d88:	ff 90       	pop	r15
    1d8a:	ef 90       	pop	r14
    1d8c:	df 90       	pop	r13
    1d8e:	cf 90       	pop	r12
    1d90:	bf 90       	pop	r11
    1d92:	af 90       	pop	r10
    1d94:	08 95       	ret

00001d96 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1d9e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1da0:	10 92 15 03 	sts	0x0315, r1
	vPortEndScheduler();
    1da4:	0e 94 00 07 	call	0xe00	; 0xe00 <vPortEndScheduler>
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1db6:	80 91 16 03 	lds	r24, 0x0316
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	80 93 16 03 	sts	0x0316, r24
}
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <xTaskResumeAll+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <xTaskResumeAll+0x8>
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1dd2:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1dda:	80 91 16 03 	lds	r24, 0x0316
    1dde:	81 50       	subi	r24, 0x01	; 1
    1de0:	80 93 16 03 	sts	0x0316, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1de4:	80 91 16 03 	lds	r24, 0x0316
    1de8:	88 23       	and	r24, r24
    1dea:	09 f0       	breq	.+2      	; 0x1dee <xTaskResumeAll+0x28>
    1dec:	6c c0       	rjmp	.+216    	; 0x1ec6 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1dee:	80 91 10 03 	lds	r24, 0x0310
    1df2:	88 23       	and	r24, r24
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <xTaskResumeAll+0x32>
    1df6:	67 c0       	rjmp	.+206    	; 0x1ec6 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    1df8:	19 82       	std	Y+1, r1	; 0x01
    1dfa:	41 c0       	rjmp	.+130    	; 0x1e7e <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1dfc:	e0 91 63 03 	lds	r30, 0x0363
    1e00:	f0 91 64 03 	lds	r31, 0x0364
    1e04:	86 81       	ldd	r24, Z+6	; 0x06
    1e06:	97 81       	ldd	r25, Z+7	; 0x07
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	0c 96       	adiw	r24, 0x0c	; 12
    1e12:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	02 96       	adiw	r24, 0x02	; 2
    1e1c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1e20:	eb 81       	ldd	r30, Y+3	; 0x03
    1e22:	fc 81       	ldd	r31, Y+4	; 0x04
    1e24:	96 89       	ldd	r25, Z+22	; 0x16
    1e26:	80 91 14 03 	lds	r24, 0x0314
    1e2a:	89 17       	cp	r24, r25
    1e2c:	28 f4       	brcc	.+10     	; 0x1e38 <xTaskResumeAll+0x72>
    1e2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e30:	fc 81       	ldd	r31, Y+4	; 0x04
    1e32:	86 89       	ldd	r24, Z+22	; 0x16
    1e34:	80 93 14 03 	sts	0x0314, r24
    1e38:	eb 81       	ldd	r30, Y+3	; 0x03
    1e3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e3c:	86 89       	ldd	r24, Z+22	; 0x16
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	c9 01       	movw	r24, r18
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	82 0f       	add	r24, r18
    1e52:	93 1f       	adc	r25, r19
    1e54:	85 5e       	subi	r24, 0xE5	; 229
    1e56:	9c 4f       	sbci	r25, 0xFC	; 252
    1e58:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5c:	2e 5f       	subi	r18, 0xFE	; 254
    1e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e60:	b9 01       	movw	r22, r18
    1e62:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1e66:	eb 81       	ldd	r30, Y+3	; 0x03
    1e68:	fc 81       	ldd	r31, Y+4	; 0x04
    1e6a:	96 89       	ldd	r25, Z+22	; 0x16
    1e6c:	e0 91 0d 03 	lds	r30, 0x030D
    1e70:	f0 91 0e 03 	lds	r31, 0x030E
    1e74:	86 89       	ldd	r24, Z+22	; 0x16
    1e76:	98 17       	cp	r25, r24
    1e78:	10 f0       	brcs	.+4      	; 0x1e7e <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1e7e:	80 91 5e 03 	lds	r24, 0x035E
    1e82:	88 23       	and	r24, r24
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <xTaskResumeAll+0xc2>
    1e86:	ba cf       	rjmp	.-140    	; 0x1dfc <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1e88:	80 91 17 03 	lds	r24, 0x0317
    1e8c:	88 23       	and	r24, r24
    1e8e:	71 f0       	breq	.+28     	; 0x1eac <xTaskResumeAll+0xe6>
    1e90:	07 c0       	rjmp	.+14     	; 0x1ea0 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    1e92:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <vTaskIncrementTick>
						--uxMissedTicks;
    1e96:	80 91 17 03 	lds	r24, 0x0317
    1e9a:	81 50       	subi	r24, 0x01	; 1
    1e9c:	80 93 17 03 	sts	0x0317, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1ea0:	80 91 17 03 	lds	r24, 0x0317
    1ea4:	88 23       	and	r24, r24
    1ea6:	a9 f7       	brne	.-22     	; 0x1e92 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	21 f0       	breq	.+8      	; 0x1eba <xTaskResumeAll+0xf4>
    1eb2:	80 91 18 03 	lds	r24, 0x0318
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	31 f4       	brne	.+12     	; 0x1ec6 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    1ebe:	10 92 18 03 	sts	0x0318, r1
					portYIELD_WITHIN_API();
    1ec2:	0e 94 07 07 	call	0xe0e	; 0xe0e <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <xTaskGetTickCount+0x6>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1eea:	80 91 11 03 	lds	r24, 0x0311
    1eee:	90 91 12 03 	lds	r25, 0x0312
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    1ef6:	0f 90       	pop	r0
    1ef8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
    1efc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <xTaskGetTickCountFromISR+0x6>
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1f14:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    1f16:	80 91 11 03 	lds	r24, 0x0311
    1f1a:	90 91 12 03 	lds	r25, 0x0312
    1f1e:	9b 83       	std	Y+3, r25	; 0x03
    1f20:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    1f3a:	80 91 10 03 	lds	r24, 0x0310
}
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <vTaskIncrementTick+0x6>
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <vTaskIncrementTick+0x8>
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <vTaskIncrementTick+0xa>
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1f52:	80 91 16 03 	lds	r24, 0x0316
    1f56:	88 23       	and	r24, r24
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <vTaskIncrementTick+0x18>
    1f5a:	bb c0       	rjmp	.+374    	; 0x20d2 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    1f5c:	80 91 11 03 	lds	r24, 0x0311
    1f60:	90 91 12 03 	lds	r25, 0x0312
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	90 93 12 03 	sts	0x0312, r25
    1f6a:	80 93 11 03 	sts	0x0311, r24
		if( xTickCount == ( portTickType ) 0U )
    1f6e:	80 91 11 03 	lds	r24, 0x0311
    1f72:	90 91 12 03 	lds	r25, 0x0312
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	d1 f5       	brne	.+116    	; 0x1fee <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    1f7a:	80 91 5a 03 	lds	r24, 0x035A
    1f7e:	90 91 5b 03 	lds	r25, 0x035B
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    1f86:	80 91 5c 03 	lds	r24, 0x035C
    1f8a:	90 91 5d 03 	lds	r25, 0x035D
    1f8e:	90 93 5b 03 	sts	0x035B, r25
    1f92:	80 93 5a 03 	sts	0x035A, r24
			pxOverflowDelayedTaskList = pxTemp;
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	90 93 5d 03 	sts	0x035D, r25
    1f9e:	80 93 5c 03 	sts	0x035C, r24
			xNumOfOverflows++;
    1fa2:	80 91 19 03 	lds	r24, 0x0319
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	80 93 19 03 	sts	0x0319, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1fac:	e0 91 5a 03 	lds	r30, 0x035A
    1fb0:	f0 91 5b 03 	lds	r31, 0x035B
    1fb4:	80 81       	ld	r24, Z
    1fb6:	88 23       	and	r24, r24
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	9f ef       	ldi	r25, 0xFF	; 255
    1fbe:	90 93 72 00 	sts	0x0072, r25
    1fc2:	80 93 71 00 	sts	0x0071, r24
    1fc6:	13 c0       	rjmp	.+38     	; 0x1fee <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1fc8:	e0 91 5a 03 	lds	r30, 0x035A
    1fcc:	f0 91 5b 03 	lds	r31, 0x035B
    1fd0:	05 80       	ldd	r0, Z+5	; 0x05
    1fd2:	f6 81       	ldd	r31, Z+6	; 0x06
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	86 81       	ldd	r24, Z+6	; 0x06
    1fd8:	97 81       	ldd	r25, Z+7	; 0x07
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1fde:	ed 81       	ldd	r30, Y+5	; 0x05
    1fe0:	fe 81       	ldd	r31, Y+6	; 0x06
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	90 93 72 00 	sts	0x0072, r25
    1fea:	80 93 71 00 	sts	0x0071, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1fee:	20 91 11 03 	lds	r18, 0x0311
    1ff2:	30 91 12 03 	lds	r19, 0x0312
    1ff6:	80 91 71 00 	lds	r24, 0x0071
    1ffa:	90 91 72 00 	lds	r25, 0x0072
    1ffe:	28 17       	cp	r18, r24
    2000:	39 07       	cpc	r19, r25
    2002:	08 f4       	brcc	.+2      	; 0x2006 <vTaskIncrementTick+0xc2>
    2004:	6b c0       	rjmp	.+214    	; 0x20dc <vTaskIncrementTick+0x198>
    2006:	e0 91 5a 03 	lds	r30, 0x035A
    200a:	f0 91 5b 03 	lds	r31, 0x035B
    200e:	80 81       	ld	r24, Z
    2010:	88 23       	and	r24, r24
    2012:	39 f4       	brne	.+14     	; 0x2022 <vTaskIncrementTick+0xde>
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	9f ef       	ldi	r25, 0xFF	; 255
    2018:	90 93 72 00 	sts	0x0072, r25
    201c:	80 93 71 00 	sts	0x0071, r24
    2020:	5d c0       	rjmp	.+186    	; 0x20dc <vTaskIncrementTick+0x198>
    2022:	e0 91 5a 03 	lds	r30, 0x035A
    2026:	f0 91 5b 03 	lds	r31, 0x035B
    202a:	05 80       	ldd	r0, Z+5	; 0x05
    202c:	f6 81       	ldd	r31, Z+6	; 0x06
    202e:	e0 2d       	mov	r30, r0
    2030:	86 81       	ldd	r24, Z+6	; 0x06
    2032:	97 81       	ldd	r25, Z+7	; 0x07
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	ed 81       	ldd	r30, Y+5	; 0x05
    203a:	fe 81       	ldd	r31, Y+6	; 0x06
    203c:	82 81       	ldd	r24, Z+2	; 0x02
    203e:	93 81       	ldd	r25, Z+3	; 0x03
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	20 91 11 03 	lds	r18, 0x0311
    2048:	30 91 12 03 	lds	r19, 0x0312
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	28 17       	cp	r18, r24
    2052:	39 07       	cpc	r19, r25
    2054:	38 f4       	brcc	.+14     	; 0x2064 <vTaskIncrementTick+0x120>
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	90 93 72 00 	sts	0x0072, r25
    205e:	80 93 71 00 	sts	0x0071, r24
    2062:	3c c0       	rjmp	.+120    	; 0x20dc <vTaskIncrementTick+0x198>
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	02 96       	adiw	r24, 0x02	; 2
    206a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
    206e:	ed 81       	ldd	r30, Y+5	; 0x05
    2070:	fe 81       	ldd	r31, Y+6	; 0x06
    2072:	84 89       	ldd	r24, Z+20	; 0x14
    2074:	95 89       	ldd	r25, Z+21	; 0x15
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	29 f0       	breq	.+10     	; 0x2084 <vTaskIncrementTick+0x140>
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	0c 96       	adiw	r24, 0x0c	; 12
    2080:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
    2084:	ed 81       	ldd	r30, Y+5	; 0x05
    2086:	fe 81       	ldd	r31, Y+6	; 0x06
    2088:	96 89       	ldd	r25, Z+22	; 0x16
    208a:	80 91 14 03 	lds	r24, 0x0314
    208e:	89 17       	cp	r24, r25
    2090:	28 f4       	brcc	.+10     	; 0x209c <vTaskIncrementTick+0x158>
    2092:	ed 81       	ldd	r30, Y+5	; 0x05
    2094:	fe 81       	ldd	r31, Y+6	; 0x06
    2096:	86 89       	ldd	r24, Z+22	; 0x16
    2098:	80 93 14 03 	sts	0x0314, r24
    209c:	ed 81       	ldd	r30, Y+5	; 0x05
    209e:	fe 81       	ldd	r31, Y+6	; 0x06
    20a0:	86 89       	ldd	r24, Z+22	; 0x16
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	c9 01       	movw	r24, r18
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
    20b8:	ac 01       	movw	r20, r24
    20ba:	45 5e       	subi	r20, 0xE5	; 229
    20bc:	5c 4f       	sbci	r21, 0xFC	; 252
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	9c 01       	movw	r18, r24
    20c4:	2e 5f       	subi	r18, 0xFE	; 254
    20c6:	3f 4f       	sbci	r19, 0xFF	; 255
    20c8:	ca 01       	movw	r24, r20
    20ca:	b9 01       	movw	r22, r18
    20cc:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>
    20d0:	9a cf       	rjmp	.-204    	; 0x2006 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    20d2:	80 91 17 03 	lds	r24, 0x0317
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	80 93 17 03 	sts	0x0317, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    20dc:	26 96       	adiw	r28, 0x06	; 6
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <vTaskSwitchContext+0x6>
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    20f8:	80 91 16 03 	lds	r24, 0x0316
    20fc:	88 23       	and	r24, r24
    20fe:	49 f0       	breq	.+18     	; 0x2112 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	80 93 18 03 	sts	0x0318, r24
    2106:	54 c0       	rjmp	.+168    	; 0x21b0 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2108:	80 91 14 03 	lds	r24, 0x0314
    210c:	81 50       	subi	r24, 0x01	; 1
    210e:	80 93 14 03 	sts	0x0314, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2112:	80 91 14 03 	lds	r24, 0x0314
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	c9 01       	movw	r24, r18
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	82 0f       	add	r24, r18
    212a:	93 1f       	adc	r25, r19
    212c:	fc 01       	movw	r30, r24
    212e:	e5 5e       	subi	r30, 0xE5	; 229
    2130:	fc 4f       	sbci	r31, 0xFC	; 252
    2132:	80 81       	ld	r24, Z
    2134:	88 23       	and	r24, r24
    2136:	41 f3       	breq	.-48     	; 0x2108 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2138:	80 91 14 03 	lds	r24, 0x0314
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	c9 01       	movw	r24, r18
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	85 5e       	subi	r24, 0xE5	; 229
    2154:	9c 4f       	sbci	r25, 0xFC	; 252
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	e9 81       	ldd	r30, Y+1	; 0x01
    215c:	fa 81       	ldd	r31, Y+2	; 0x02
    215e:	01 80       	ldd	r0, Z+1	; 0x01
    2160:	f2 81       	ldd	r31, Z+2	; 0x02
    2162:	e0 2d       	mov	r30, r0
    2164:	82 81       	ldd	r24, Z+2	; 0x02
    2166:	93 81       	ldd	r25, Z+3	; 0x03
    2168:	e9 81       	ldd	r30, Y+1	; 0x01
    216a:	fa 81       	ldd	r31, Y+2	; 0x02
    216c:	92 83       	std	Z+2, r25	; 0x02
    216e:	81 83       	std	Z+1, r24	; 0x01
    2170:	e9 81       	ldd	r30, Y+1	; 0x01
    2172:	fa 81       	ldd	r31, Y+2	; 0x02
    2174:	21 81       	ldd	r18, Z+1	; 0x01
    2176:	32 81       	ldd	r19, Z+2	; 0x02
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	03 96       	adiw	r24, 0x03	; 3
    217e:	28 17       	cp	r18, r24
    2180:	39 07       	cpc	r19, r25
    2182:	59 f4       	brne	.+22     	; 0x219a <vTaskSwitchContext+0xac>
    2184:	e9 81       	ldd	r30, Y+1	; 0x01
    2186:	fa 81       	ldd	r31, Y+2	; 0x02
    2188:	01 80       	ldd	r0, Z+1	; 0x01
    218a:	f2 81       	ldd	r31, Z+2	; 0x02
    218c:	e0 2d       	mov	r30, r0
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	e9 81       	ldd	r30, Y+1	; 0x01
    2194:	fa 81       	ldd	r31, Y+2	; 0x02
    2196:	92 83       	std	Z+2, r25	; 0x02
    2198:	81 83       	std	Z+1, r24	; 0x01
    219a:	e9 81       	ldd	r30, Y+1	; 0x01
    219c:	fa 81       	ldd	r31, Y+2	; 0x02
    219e:	01 80       	ldd	r0, Z+1	; 0x01
    21a0:	f2 81       	ldd	r31, Z+2	; 0x02
    21a2:	e0 2d       	mov	r30, r0
    21a4:	86 81       	ldd	r24, Z+6	; 0x06
    21a6:	97 81       	ldd	r25, Z+7	; 0x07
    21a8:	90 93 0e 03 	sts	0x030E, r25
    21ac:	80 93 0d 03 	sts	0x030D, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	cf 91       	pop	r28
    21b6:	df 91       	pop	r29
    21b8:	08 95       	ret

000021ba <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <vTaskPlaceOnEventList+0x6>
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <vTaskPlaceOnEventList+0x8>
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <vTaskPlaceOnEventList+0xa>
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	7e 83       	std	Y+6, r23	; 0x06
    21ce:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    21d0:	4b 81       	ldd	r20, Y+3	; 0x03
    21d2:	5c 81       	ldd	r21, Y+4	; 0x04
    21d4:	80 91 0d 03 	lds	r24, 0x030D
    21d8:	90 91 0e 03 	lds	r25, 0x030E
    21dc:	9c 01       	movw	r18, r24
    21de:	24 5f       	subi	r18, 0xF4	; 244
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	ca 01       	movw	r24, r20
    21e4:	b9 01       	movw	r22, r18
    21e6:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    21ea:	80 91 0d 03 	lds	r24, 0x030D
    21ee:	90 91 0e 03 	lds	r25, 0x030E
    21f2:	02 96       	adiw	r24, 0x02	; 2
    21f4:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    21f8:	20 91 11 03 	lds	r18, 0x0311
    21fc:	30 91 12 03 	lds	r19, 0x0312
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	82 0f       	add	r24, r18
    2206:	93 1f       	adc	r25, r19
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	0e 94 d7 12 	call	0x25ae	; 0x25ae <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    2214:	26 96       	adiw	r28, 0x06	; 6
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <xTaskRemoveFromEventList+0x6>
    222c:	00 d0       	rcall	.+0      	; 0x222e <xTaskRemoveFromEventList+0x8>
    222e:	0f 92       	push	r0
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	9d 83       	std	Y+5, r25	; 0x05
    2236:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2238:	ec 81       	ldd	r30, Y+4	; 0x04
    223a:	fd 81       	ldd	r31, Y+5	; 0x05
    223c:	05 80       	ldd	r0, Z+5	; 0x05
    223e:	f6 81       	ldd	r31, Z+6	; 0x06
    2240:	e0 2d       	mov	r30, r0
    2242:	86 81       	ldd	r24, Z+6	; 0x06
    2244:	97 81       	ldd	r25, Z+7	; 0x07
    2246:	9b 83       	std	Y+3, r25	; 0x03
    2248:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    224a:	8a 81       	ldd	r24, Y+2	; 0x02
    224c:	9b 81       	ldd	r25, Y+3	; 0x03
    224e:	0c 96       	adiw	r24, 0x0c	; 12
    2250:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2254:	80 91 16 03 	lds	r24, 0x0316
    2258:	88 23       	and	r24, r24
    225a:	61 f5       	brne	.+88     	; 0x22b4 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	02 96       	adiw	r24, 0x02	; 2
    2262:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2266:	ea 81       	ldd	r30, Y+2	; 0x02
    2268:	fb 81       	ldd	r31, Y+3	; 0x03
    226a:	96 89       	ldd	r25, Z+22	; 0x16
    226c:	80 91 14 03 	lds	r24, 0x0314
    2270:	89 17       	cp	r24, r25
    2272:	28 f4       	brcc	.+10     	; 0x227e <xTaskRemoveFromEventList+0x58>
    2274:	ea 81       	ldd	r30, Y+2	; 0x02
    2276:	fb 81       	ldd	r31, Y+3	; 0x03
    2278:	86 89       	ldd	r24, Z+22	; 0x16
    227a:	80 93 14 03 	sts	0x0314, r24
    227e:	ea 81       	ldd	r30, Y+2	; 0x02
    2280:	fb 81       	ldd	r31, Y+3	; 0x03
    2282:	86 89       	ldd	r24, Z+22	; 0x16
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	c9 01       	movw	r24, r18
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	ac 01       	movw	r20, r24
    229c:	45 5e       	subi	r20, 0xE5	; 229
    229e:	5c 4f       	sbci	r21, 0xFC	; 252
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	9b 81       	ldd	r25, Y+3	; 0x03
    22a4:	9c 01       	movw	r18, r24
    22a6:	2e 5f       	subi	r18, 0xFE	; 254
    22a8:	3f 4f       	sbci	r19, 0xFF	; 255
    22aa:	ca 01       	movw	r24, r20
    22ac:	b9 01       	movw	r22, r18
    22ae:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>
    22b2:	0a c0       	rjmp	.+20     	; 0x22c8 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	9c 01       	movw	r18, r24
    22ba:	24 5f       	subi	r18, 0xF4	; 244
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	8e e5       	ldi	r24, 0x5E	; 94
    22c0:	93 e0       	ldi	r25, 0x03	; 3
    22c2:	b9 01       	movw	r22, r18
    22c4:	0e 94 47 04 	call	0x88e	; 0x88e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    22c8:	ea 81       	ldd	r30, Y+2	; 0x02
    22ca:	fb 81       	ldd	r31, Y+3	; 0x03
    22cc:	96 89       	ldd	r25, Z+22	; 0x16
    22ce:	e0 91 0d 03 	lds	r30, 0x030D
    22d2:	f0 91 0e 03 	lds	r31, 0x030E
    22d6:	86 89       	ldd	r24, Z+22	; 0x16
    22d8:	98 17       	cp	r25, r24
    22da:	18 f0       	brcs	.+6      	; 0x22e2 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    22e2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <vTaskSetTimeOutState+0x6>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2304:	80 91 19 03 	lds	r24, 0x0319
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    230e:	80 91 11 03 	lds	r24, 0x0311
    2312:	90 91 12 03 	lds	r25, 0x0312
    2316:	e9 81       	ldd	r30, Y+1	; 0x01
    2318:	fa 81       	ldd	r31, Y+2	; 0x02
    231a:	92 83       	std	Z+2, r25	; 0x02
    231c:	81 83       	std	Z+1, r24	; 0x01
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <xTaskCheckForTimeOut+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <xTaskCheckForTimeOut+0x8>
    2330:	0f 92       	push	r0
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	9b 83       	std	Y+3, r25	; 0x03
    2338:	8a 83       	std	Y+2, r24	; 0x02
    233a:	7d 83       	std	Y+5, r23	; 0x05
    233c:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2344:	ea 81       	ldd	r30, Y+2	; 0x02
    2346:	fb 81       	ldd	r31, Y+3	; 0x03
    2348:	90 81       	ld	r25, Z
    234a:	80 91 19 03 	lds	r24, 0x0319
    234e:	98 17       	cp	r25, r24
    2350:	71 f0       	breq	.+28     	; 0x236e <xTaskCheckForTimeOut+0x46>
    2352:	ea 81       	ldd	r30, Y+2	; 0x02
    2354:	fb 81       	ldd	r31, Y+3	; 0x03
    2356:	21 81       	ldd	r18, Z+1	; 0x01
    2358:	32 81       	ldd	r19, Z+2	; 0x02
    235a:	80 91 11 03 	lds	r24, 0x0311
    235e:	90 91 12 03 	lds	r25, 0x0312
    2362:	82 17       	cp	r24, r18
    2364:	93 07       	cpc	r25, r19
    2366:	18 f0       	brcs	.+6      	; 0x236e <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	2f c0       	rjmp	.+94     	; 0x23cc <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    236e:	20 91 11 03 	lds	r18, 0x0311
    2372:	30 91 12 03 	lds	r19, 0x0312
    2376:	ea 81       	ldd	r30, Y+2	; 0x02
    2378:	fb 81       	ldd	r31, Y+3	; 0x03
    237a:	81 81       	ldd	r24, Z+1	; 0x01
    237c:	92 81       	ldd	r25, Z+2	; 0x02
    237e:	28 1b       	sub	r18, r24
    2380:	39 0b       	sbc	r19, r25
    2382:	ec 81       	ldd	r30, Y+4	; 0x04
    2384:	fd 81       	ldd	r31, Y+5	; 0x05
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	28 17       	cp	r18, r24
    238c:	39 07       	cpc	r19, r25
    238e:	e0 f4       	brcc	.+56     	; 0x23c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2390:	ec 81       	ldd	r30, Y+4	; 0x04
    2392:	fd 81       	ldd	r31, Y+5	; 0x05
    2394:	40 81       	ld	r20, Z
    2396:	51 81       	ldd	r21, Z+1	; 0x01
    2398:	ea 81       	ldd	r30, Y+2	; 0x02
    239a:	fb 81       	ldd	r31, Y+3	; 0x03
    239c:	21 81       	ldd	r18, Z+1	; 0x01
    239e:	32 81       	ldd	r19, Z+2	; 0x02
    23a0:	80 91 11 03 	lds	r24, 0x0311
    23a4:	90 91 12 03 	lds	r25, 0x0312
    23a8:	b9 01       	movw	r22, r18
    23aa:	68 1b       	sub	r22, r24
    23ac:	79 0b       	sbc	r23, r25
    23ae:	cb 01       	movw	r24, r22
    23b0:	84 0f       	add	r24, r20
    23b2:	95 1f       	adc	r25, r21
    23b4:	ec 81       	ldd	r30, Y+4	; 0x04
    23b6:	fd 81       	ldd	r31, Y+5	; 0x05
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    23c4:	19 82       	std	Y+1, r1	; 0x01
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    23cc:	0f 90       	pop	r0
    23ce:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	80 93 18 03 	sts	0x0318, r24
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <prvIdleTask+0x6>
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    2404:	0e 94 99 12 	call	0x2532	; 0x2532 <prvCheckTasksWaitingTermination>
    2408:	fd cf       	rjmp	.-6      	; 0x2404 <prvIdleTask+0xe>

0000240a <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	29 97       	sbiw	r28, 0x09	; 9
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	9a 83       	std	Y+2, r25	; 0x02
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	7c 83       	std	Y+4, r23	; 0x04
    2428:	6b 83       	std	Y+3, r22	; 0x03
    242a:	4d 83       	std	Y+5, r20	; 0x05
    242c:	3f 83       	std	Y+7, r19	; 0x07
    242e:	2e 83       	std	Y+6, r18	; 0x06
    2430:	19 87       	std	Y+9, r17	; 0x09
    2432:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	9a 81       	ldd	r25, Y+2	; 0x02
    2438:	49 96       	adiw	r24, 0x19	; 25
    243a:	2b 81       	ldd	r18, Y+3	; 0x03
    243c:	3c 81       	ldd	r19, Y+4	; 0x04
    243e:	b9 01       	movw	r22, r18
    2440:	48 e0       	ldi	r20, 0x08	; 8
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	0e 94 96 13 	call	0x272c	; 0x272c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    2448:	e9 81       	ldd	r30, Y+1	; 0x01
    244a:	fa 81       	ldd	r31, Y+2	; 0x02
    244c:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	85 30       	cpi	r24, 0x05	; 5
    2452:	10 f0       	brcs	.+4      	; 0x2458 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    2454:	84 e0       	ldi	r24, 0x04	; 4
    2456:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    2458:	e9 81       	ldd	r30, Y+1	; 0x01
    245a:	fa 81       	ldd	r31, Y+2	; 0x02
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	9a 81       	ldd	r25, Y+2	; 0x02
    2464:	02 96       	adiw	r24, 0x02	; 2
    2466:	0e 94 37 04 	call	0x86e	; 0x86e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	0c 96       	adiw	r24, 0x0c	; 12
    2470:	0e 94 37 04 	call	0x86e	; 0x86e <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2474:	e9 81       	ldd	r30, Y+1	; 0x01
    2476:	fa 81       	ldd	r31, Y+2	; 0x02
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	9a 81       	ldd	r25, Y+2	; 0x02
    247c:	91 87       	std	Z+9, r25	; 0x09
    247e:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	85 e0       	ldi	r24, 0x05	; 5
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	82 1b       	sub	r24, r18
    248c:	93 0b       	sbc	r25, r19
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	fa 81       	ldd	r31, Y+2	; 0x02
    2492:	95 87       	std	Z+13, r25	; 0x0d
    2494:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2496:	e9 81       	ldd	r30, Y+1	; 0x01
    2498:	fa 81       	ldd	r31, Y+2	; 0x02
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	93 8b       	std	Z+19, r25	; 0x13
    24a0:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    24a2:	29 96       	adiw	r28, 0x09	; 9
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	08 95       	ret

000024b8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	0f 92       	push	r0
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    24c2:	19 82       	std	Y+1, r1	; 0x01
    24c4:	13 c0       	rjmp	.+38     	; 0x24ec <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	c9 01       	movw	r24, r18
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	82 0f       	add	r24, r18
    24dc:	93 1f       	adc	r25, r19
    24de:	85 5e       	subi	r24, 0xE5	; 229
    24e0:	9c 4f       	sbci	r25, 0xFC	; 252
    24e2:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	85 30       	cpi	r24, 0x05	; 5
    24f0:	50 f3       	brcs	.-44     	; 0x24c6 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    24f2:	88 e4       	ldi	r24, 0x48	; 72
    24f4:	93 e0       	ldi	r25, 0x03	; 3
    24f6:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    24fa:	81 e5       	ldi	r24, 0x51	; 81
    24fc:	93 e0       	ldi	r25, 0x03	; 3
    24fe:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    2502:	8e e5       	ldi	r24, 0x5E	; 94
    2504:	93 e0       	ldi	r25, 0x03	; 3
    2506:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    250a:	87 e6       	ldi	r24, 0x67	; 103
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2512:	88 e4       	ldi	r24, 0x48	; 72
    2514:	93 e0       	ldi	r25, 0x03	; 3
    2516:	90 93 5b 03 	sts	0x035B, r25
    251a:	80 93 5a 03 	sts	0x035A, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    251e:	81 e5       	ldi	r24, 0x51	; 81
    2520:	93 e0       	ldi	r25, 0x03	; 3
    2522:	90 93 5d 03 	sts	0x035D, r25
    2526:	80 93 5c 03 	sts	0x035C, r24
}
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <prvCheckTasksWaitingTermination+0x6>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    253e:	80 91 0f 03 	lds	r24, 0x030F
    2542:	88 23       	and	r24, r24
    2544:	71 f1       	breq	.+92     	; 0x25a2 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    2546:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    254a:	80 91 67 03 	lds	r24, 0x0367
    254e:	1b 82       	std	Y+3, r1	; 0x03
    2550:	88 23       	and	r24, r24
    2552:	11 f4       	brne	.+4      	; 0x2558 <prvCheckTasksWaitingTermination+0x26>
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    2558:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	88 23       	and	r24, r24
    2560:	01 f5       	brne	.+64     	; 0x25a2 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    2568:	e0 91 6c 03 	lds	r30, 0x036C
    256c:	f0 91 6d 03 	lds	r31, 0x036D
    2570:	86 81       	ldd	r24, Z+6	; 0x06
    2572:	97 81       	ldd	r25, Z+7	; 0x07
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	02 96       	adiw	r24, 0x02	; 2
    257e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <vListRemove>
					--uxCurrentNumberOfTasks;
    2582:	80 91 10 03 	lds	r24, 0x0310
    2586:	81 50       	subi	r24, 0x01	; 1
    2588:	80 93 10 03 	sts	0x0310, r24
					--uxTasksDeleted;
    258c:	80 91 0f 03 	lds	r24, 0x030F
    2590:	81 50       	subi	r24, 0x01	; 1
    2592:	80 93 0f 03 	sts	0x030F, r24
				}
				taskEXIT_CRITICAL();
    2596:	0f 90       	pop	r0
    2598:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	9a 81       	ldd	r25, Y+2	; 0x02
    259e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <prvAddCurrentTaskToDelayedList+0x6>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    25bc:	e0 91 0d 03 	lds	r30, 0x030D
    25c0:	f0 91 0e 03 	lds	r31, 0x030E
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	9a 81       	ldd	r25, Y+2	; 0x02
    25c8:	93 83       	std	Z+3, r25	; 0x03
    25ca:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    25cc:	20 91 11 03 	lds	r18, 0x0311
    25d0:	30 91 12 03 	lds	r19, 0x0312
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	82 17       	cp	r24, r18
    25da:	93 07       	cpc	r25, r19
    25dc:	70 f4       	brcc	.+28     	; 0x25fa <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    25de:	80 91 5c 03 	lds	r24, 0x035C
    25e2:	90 91 5d 03 	lds	r25, 0x035D
    25e6:	20 91 0d 03 	lds	r18, 0x030D
    25ea:	30 91 0e 03 	lds	r19, 0x030E
    25ee:	2e 5f       	subi	r18, 0xFE	; 254
    25f0:	3f 4f       	sbci	r19, 0xFF	; 255
    25f2:	b9 01       	movw	r22, r18
    25f4:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
    25f8:	1e c0       	rjmp	.+60     	; 0x2636 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    25fa:	40 91 5a 03 	lds	r20, 0x035A
    25fe:	50 91 5b 03 	lds	r21, 0x035B
    2602:	80 91 0d 03 	lds	r24, 0x030D
    2606:	90 91 0e 03 	lds	r25, 0x030E
    260a:	9c 01       	movw	r18, r24
    260c:	2e 5f       	subi	r18, 0xFE	; 254
    260e:	3f 4f       	sbci	r19, 0xFF	; 255
    2610:	ca 01       	movw	r24, r20
    2612:	b9 01       	movw	r22, r18
    2614:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2618:	20 91 71 00 	lds	r18, 0x0071
    261c:	30 91 72 00 	lds	r19, 0x0072
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	82 17       	cp	r24, r18
    2626:	93 07       	cpc	r25, r19
    2628:	30 f4       	brcc	.+12     	; 0x2636 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	90 93 72 00 	sts	0x0072, r25
    2632:	80 93 71 00 	sts	0x0071, r24
		}
	}
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	28 97       	sbiw	r28, 0x08	; 8
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	9c 83       	std	Y+4, r25	; 0x04
    2656:	8b 83       	std	Y+3, r24	; 0x03
    2658:	7e 83       	std	Y+6, r23	; 0x06
    265a:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    265c:	81 e2       	ldi	r24, 0x21	; 33
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 a1 03 	call	0x742	; 0x742 <pvPortMalloc>
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f1       	breq	.+90     	; 0x26ca <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2670:	8d 81       	ldd	r24, Y+5	; 0x05
    2672:	9e 81       	ldd	r25, Y+6	; 0x06
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	39 f4       	brne	.+14     	; 0x2686 <prvAllocateTCBAndStack+0x46>
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	0e 94 a1 03 	call	0x742	; 0x742 <pvPortMalloc>
    2680:	98 87       	std	Y+8, r25	; 0x08
    2682:	8f 83       	std	Y+7, r24	; 0x07
    2684:	04 c0       	rjmp	.+8      	; 0x268e <prvAllocateTCBAndStack+0x4e>
    2686:	8d 81       	ldd	r24, Y+5	; 0x05
    2688:	9e 81       	ldd	r25, Y+6	; 0x06
    268a:	98 87       	std	Y+8, r25	; 0x08
    268c:	8f 83       	std	Y+7, r24	; 0x07
    268e:	e9 81       	ldd	r30, Y+1	; 0x01
    2690:	fa 81       	ldd	r31, Y+2	; 0x02
    2692:	8f 81       	ldd	r24, Y+7	; 0x07
    2694:	98 85       	ldd	r25, Y+8	; 0x08
    2696:	90 8f       	std	Z+24, r25	; 0x18
    2698:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    269a:	e9 81       	ldd	r30, Y+1	; 0x01
    269c:	fa 81       	ldd	r31, Y+2	; 0x02
    269e:	87 89       	ldd	r24, Z+23	; 0x17
    26a0:	90 8d       	ldd	r25, Z+24	; 0x18
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	39 f4       	brne	.+14     	; 0x26b4 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	9a 81       	ldd	r25, Y+2	; 0x02
    26aa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vPortFree>
			pxNewTCB = NULL;
    26ae:	1a 82       	std	Y+2, r1	; 0x02
    26b0:	19 82       	std	Y+1, r1	; 0x01
    26b2:	0b c0       	rjmp	.+22     	; 0x26ca <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    26b4:	e9 81       	ldd	r30, Y+1	; 0x01
    26b6:	fa 81       	ldd	r31, Y+2	; 0x02
    26b8:	87 89       	ldd	r24, Z+23	; 0x17
    26ba:	90 8d       	ldd	r25, Z+24	; 0x18
    26bc:	2b 81       	ldd	r18, Y+3	; 0x03
    26be:	3c 81       	ldd	r19, Y+4	; 0x04
    26c0:	65 ea       	ldi	r22, 0xA5	; 165
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	a9 01       	movw	r20, r18
    26c6:	0e 94 8f 13 	call	0x271e	; 0x271e <memset>
		}
	}

	return pxNewTCB;
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    26ce:	28 96       	adiw	r28, 0x08	; 8
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <prvDeleteTCB+0x6>
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    26ee:	e9 81       	ldd	r30, Y+1	; 0x01
    26f0:	fa 81       	ldd	r31, Y+2	; 0x02
    26f2:	87 89       	ldd	r24, Z+23	; 0x17
    26f4:	90 8d       	ldd	r25, Z+24	; 0x18
    26f6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vPortFree>
		vPortFree( pxTCB );
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vPortFree>
	}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <memcpy>:
    270c:	fb 01       	movw	r30, r22
    270e:	dc 01       	movw	r26, r24
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <memcpy+0xa>
    2712:	01 90       	ld	r0, Z+
    2714:	0d 92       	st	X+, r0
    2716:	41 50       	subi	r20, 0x01	; 1
    2718:	50 40       	sbci	r21, 0x00	; 0
    271a:	d8 f7       	brcc	.-10     	; 0x2712 <memcpy+0x6>
    271c:	08 95       	ret

0000271e <memset>:
    271e:	dc 01       	movw	r26, r24
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <memset+0x6>
    2722:	6d 93       	st	X+, r22
    2724:	41 50       	subi	r20, 0x01	; 1
    2726:	50 40       	sbci	r21, 0x00	; 0
    2728:	e0 f7       	brcc	.-8      	; 0x2722 <memset+0x4>
    272a:	08 95       	ret

0000272c <strncpy>:
    272c:	fb 01       	movw	r30, r22
    272e:	dc 01       	movw	r26, r24
    2730:	41 50       	subi	r20, 0x01	; 1
    2732:	50 40       	sbci	r21, 0x00	; 0
    2734:	48 f0       	brcs	.+18     	; 0x2748 <strncpy+0x1c>
    2736:	01 90       	ld	r0, Z+
    2738:	0d 92       	st	X+, r0
    273a:	00 20       	and	r0, r0
    273c:	c9 f7       	brne	.-14     	; 0x2730 <strncpy+0x4>
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <strncpy+0x16>
    2740:	1d 92       	st	X+, r1
    2742:	41 50       	subi	r20, 0x01	; 1
    2744:	50 40       	sbci	r21, 0x00	; 0
    2746:	e0 f7       	brcc	.-8      	; 0x2740 <strncpy+0x14>
    2748:	08 95       	ret

0000274a <_exit>:
    274a:	f8 94       	cli

0000274c <__stop_program>:
    274c:	ff cf       	rjmp	.-2      	; 0x274c <__stop_program>
