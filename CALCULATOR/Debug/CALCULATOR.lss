
CALCULATOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002614  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002614  00002688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001aa0  00000000  00000000  000026ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bc8  00000000  00000000  0000414c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000088a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 cd 10 	call	0x219a	; 0x219a <main>
      7a:	0c 94 08 13 	jmp	0x2610	; 0x2610 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <M_DIO_Void_SetPinDirection>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2a 97       	sbiw	r28, 0x0a	; 10
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8b 83       	std	Y+3, r24	; 0x03
     b4c:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9a e0       	ldi	r25, 0x0A	; 10
     b52:	69 2f       	mov	r22, r25
     b54:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
     b58:	89 2f       	mov	r24, r25
     b5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	9a e0       	ldi	r25, 0x0A	; 10
     b60:	69 2f       	mov	r22, r25
     b62:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
     b66:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     b68:	8c 81       	ldd	r24, Y+4	; 0x04
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3a 87       	std	Y+10, r19	; 0x0a
     b70:	29 87       	std	Y+9, r18	; 0x09
     b72:	89 85       	ldd	r24, Y+9	; 0x09
     b74:	9a 85       	ldd	r25, Y+10	; 0x0a
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	39 f0       	breq	.+14     	; 0xb88 <M_DIO_Void_SetPinDirection+0x52>
     b7a:	29 85       	ldd	r18, Y+9	; 0x09
     b7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b7e:	21 30       	cpi	r18, 0x01	; 1
     b80:	31 05       	cpc	r19, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <M_DIO_Void_SetPinDirection+0x50>
     b84:	76 c0       	rjmp	.+236    	; 0xc72 <M_DIO_Void_SetPinDirection+0x13c>
     b86:	e4 c0       	rjmp	.+456    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Group)
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	38 87       	std	Y+8, r19	; 0x08
     b90:	2f 83       	std	Y+7, r18	; 0x07
     b92:	8f 81       	ldd	r24, Y+7	; 0x07
     b94:	98 85       	ldd	r25, Y+8	; 0x08
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	91 05       	cpc	r25, r1
     b9a:	61 f1       	breq	.+88     	; 0xbf4 <M_DIO_Void_SetPinDirection+0xbe>
     b9c:	2f 81       	ldd	r18, Y+7	; 0x07
     b9e:	38 85       	ldd	r19, Y+8	; 0x08
     ba0:	23 30       	cpi	r18, 0x03	; 3
     ba2:	31 05       	cpc	r19, r1
     ba4:	34 f4       	brge	.+12     	; 0xbb2 <M_DIO_Void_SetPinDirection+0x7c>
     ba6:	8f 81       	ldd	r24, Y+7	; 0x07
     ba8:	98 85       	ldd	r25, Y+8	; 0x08
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	91 05       	cpc	r25, r1
     bae:	69 f0       	breq	.+26     	; 0xbca <M_DIO_Void_SetPinDirection+0x94>
     bb0:	cf c0       	rjmp	.+414    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
     bb2:	2f 81       	ldd	r18, Y+7	; 0x07
     bb4:	38 85       	ldd	r19, Y+8	; 0x08
     bb6:	23 30       	cpi	r18, 0x03	; 3
     bb8:	31 05       	cpc	r19, r1
     bba:	89 f1       	breq	.+98     	; 0xc1e <M_DIO_Void_SetPinDirection+0xe8>
     bbc:	8f 81       	ldd	r24, Y+7	; 0x07
     bbe:	98 85       	ldd	r25, Y+8	; 0x08
     bc0:	84 30       	cpi	r24, 0x04	; 4
     bc2:	91 05       	cpc	r25, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <M_DIO_Void_SetPinDirection+0x92>
     bc6:	40 c0       	rjmp	.+128    	; 0xc48 <M_DIO_Void_SetPinDirection+0x112>
     bc8:	c3 c0       	rjmp	.+390    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     bca:	aa e3       	ldi	r26, 0x3A	; 58
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ea e3       	ldi	r30, 0x3A	; 58
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	48 2f       	mov	r20, r24
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	02 2e       	mov	r0, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <M_DIO_Void_SetPinDirection+0xb2>
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	0a 94       	dec	r0
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <M_DIO_Void_SetPinDirection+0xae>
     bec:	80 95       	com	r24
     bee:	84 23       	and	r24, r20
     bf0:	8c 93       	st	X, r24
     bf2:	ae c0       	rjmp	.+348    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     bf4:	a7 e3       	ldi	r26, 0x37	; 55
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e7 e3       	ldi	r30, 0x37	; 55
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	48 2f       	mov	r20, r24
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	02 2e       	mov	r0, r18
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <M_DIO_Void_SetPinDirection+0xdc>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <M_DIO_Void_SetPinDirection+0xd8>
     c16:	80 95       	com	r24
     c18:	84 23       	and	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	99 c0       	rjmp	.+306    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
     c1e:	a4 e3       	ldi	r26, 0x34	; 52
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e4 e3       	ldi	r30, 0x34	; 52
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <M_DIO_Void_SetPinDirection+0x106>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <M_DIO_Void_SetPinDirection+0x102>
     c40:	80 95       	com	r24
     c42:	84 23       	and	r24, r20
     c44:	8c 93       	st	X, r24
     c46:	84 c0       	rjmp	.+264    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
     c48:	a1 e3       	ldi	r26, 0x31	; 49
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e1 e3       	ldi	r30, 0x31	; 49
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	48 2f       	mov	r20, r24
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 2e       	mov	r0, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <M_DIO_Void_SetPinDirection+0x130>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <M_DIO_Void_SetPinDirection+0x12c>
     c6a:	80 95       	com	r24
     c6c:	84 23       	and	r24, r20
     c6e:	8c 93       	st	X, r24
     c70:	6f c0       	rjmp	.+222    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	3e 83       	std	Y+6, r19	; 0x06
     c7a:	2d 83       	std	Y+5, r18	; 0x05
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	82 30       	cpi	r24, 0x02	; 2
     c82:	91 05       	cpc	r25, r1
     c84:	51 f1       	breq	.+84     	; 0xcda <M_DIO_Void_SetPinDirection+0x1a4>
     c86:	2d 81       	ldd	r18, Y+5	; 0x05
     c88:	3e 81       	ldd	r19, Y+6	; 0x06
     c8a:	23 30       	cpi	r18, 0x03	; 3
     c8c:	31 05       	cpc	r19, r1
     c8e:	34 f4       	brge	.+12     	; 0xc9c <M_DIO_Void_SetPinDirection+0x166>
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	91 05       	cpc	r25, r1
     c98:	61 f0       	breq	.+24     	; 0xcb2 <M_DIO_Void_SetPinDirection+0x17c>
     c9a:	5a c0       	rjmp	.+180    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
     c9c:	2d 81       	ldd	r18, Y+5	; 0x05
     c9e:	3e 81       	ldd	r19, Y+6	; 0x06
     ca0:	23 30       	cpi	r18, 0x03	; 3
     ca2:	31 05       	cpc	r19, r1
     ca4:	71 f1       	breq	.+92     	; 0xd02 <M_DIO_Void_SetPinDirection+0x1cc>
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	9e 81       	ldd	r25, Y+6	; 0x06
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	91 05       	cpc	r25, r1
     cae:	e9 f1       	breq	.+122    	; 0xd2a <M_DIO_Void_SetPinDirection+0x1f4>
     cb0:	4f c0       	rjmp	.+158    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
     cb2:	aa e3       	ldi	r26, 0x3A	; 58
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ea e3       	ldi	r30, 0x3A	; 58
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <M_DIO_Void_SetPinDirection+0x19a>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <M_DIO_Void_SetPinDirection+0x196>
     cd4:	84 2b       	or	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	3b c0       	rjmp	.+118    	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
     cda:	a7 e3       	ldi	r26, 0x37	; 55
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e7 e3       	ldi	r30, 0x37	; 55
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <M_DIO_Void_SetPinDirection+0x1c2>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <M_DIO_Void_SetPinDirection+0x1be>
     cfc:	84 2b       	or	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	27 c0       	rjmp	.+78     	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
     d02:	a4 e3       	ldi	r26, 0x34	; 52
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e4 e3       	ldi	r30, 0x34	; 52
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <M_DIO_Void_SetPinDirection+0x1ea>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <M_DIO_Void_SetPinDirection+0x1e6>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	13 c0       	rjmp	.+38     	; 0xd50 <M_DIO_Void_SetPinDirection+0x21a>
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
     d2a:	a1 e3       	ldi	r26, 0x31	; 49
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e1 e3       	ldi	r30, 0x31	; 49
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <M_DIO_Void_SetPinDirection+0x212>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <M_DIO_Void_SetPinDirection+0x20e>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
			default:                                break;
			}
			break;
			default:    break;
	}
}
     d50:	2a 96       	adiw	r28, 0x0a	; 10
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <M_DIO_Void_SetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	2a 97       	sbiw	r28, 0x0a	; 10
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	cd bf       	out	0x3d, r28	; 61
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	9a e0       	ldi	r25, 0x0A	; 10
     d7e:	69 2f       	mov	r22, r25
     d80:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
     d84:	89 2f       	mov	r24, r25
     d86:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9a e0       	ldi	r25, 0x0A	; 10
     d8c:	69 2f       	mov	r22, r25
     d8e:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
     d92:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	3a 87       	std	Y+10, r19	; 0x0a
     d9c:	29 87       	std	Y+9, r18	; 0x09
     d9e:	89 85       	ldd	r24, Y+9	; 0x09
     da0:	9a 85       	ldd	r25, Y+10	; 0x0a
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	39 f0       	breq	.+14     	; 0xdb4 <M_DIO_Void_SetPinValue+0x52>
     da6:	29 85       	ldd	r18, Y+9	; 0x09
     da8:	3a 85       	ldd	r19, Y+10	; 0x0a
     daa:	21 30       	cpi	r18, 0x01	; 1
     dac:	31 05       	cpc	r19, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <M_DIO_Void_SetPinValue+0x50>
     db0:	76 c0       	rjmp	.+236    	; 0xe9e <M_DIO_Void_SetPinValue+0x13c>
     db2:	e4 c0       	rjmp	.+456    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Group)
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	38 87       	std	Y+8, r19	; 0x08
     dbc:	2f 83       	std	Y+7, r18	; 0x07
     dbe:	8f 81       	ldd	r24, Y+7	; 0x07
     dc0:	98 85       	ldd	r25, Y+8	; 0x08
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	91 05       	cpc	r25, r1
     dc6:	61 f1       	breq	.+88     	; 0xe20 <M_DIO_Void_SetPinValue+0xbe>
     dc8:	2f 81       	ldd	r18, Y+7	; 0x07
     dca:	38 85       	ldd	r19, Y+8	; 0x08
     dcc:	23 30       	cpi	r18, 0x03	; 3
     dce:	31 05       	cpc	r19, r1
     dd0:	34 f4       	brge	.+12     	; 0xdde <M_DIO_Void_SetPinValue+0x7c>
     dd2:	8f 81       	ldd	r24, Y+7	; 0x07
     dd4:	98 85       	ldd	r25, Y+8	; 0x08
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	69 f0       	breq	.+26     	; 0xdf6 <M_DIO_Void_SetPinValue+0x94>
     ddc:	cf c0       	rjmp	.+414    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
     dde:	2f 81       	ldd	r18, Y+7	; 0x07
     de0:	38 85       	ldd	r19, Y+8	; 0x08
     de2:	23 30       	cpi	r18, 0x03	; 3
     de4:	31 05       	cpc	r19, r1
     de6:	89 f1       	breq	.+98     	; 0xe4a <M_DIO_Void_SetPinValue+0xe8>
     de8:	8f 81       	ldd	r24, Y+7	; 0x07
     dea:	98 85       	ldd	r25, Y+8	; 0x08
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	91 05       	cpc	r25, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <M_DIO_Void_SetPinValue+0x92>
     df2:	40 c0       	rjmp	.+128    	; 0xe74 <M_DIO_Void_SetPinValue+0x112>
     df4:	c3 c0       	rjmp	.+390    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
     df6:	ab e3       	ldi	r26, 0x3B	; 59
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	eb e3       	ldi	r30, 0x3B	; 59
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <M_DIO_Void_SetPinValue+0xb2>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <M_DIO_Void_SetPinValue+0xae>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	ae c0       	rjmp	.+348    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
     e20:	a8 e3       	ldi	r26, 0x38	; 56
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e3       	ldi	r30, 0x38	; 56
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <M_DIO_Void_SetPinValue+0xdc>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <M_DIO_Void_SetPinValue+0xd8>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	99 c0       	rjmp	.+306    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
     e4a:	a5 e3       	ldi	r26, 0x35	; 53
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e3       	ldi	r30, 0x35	; 53
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <M_DIO_Void_SetPinValue+0x106>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <M_DIO_Void_SetPinValue+0x102>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	84 c0       	rjmp	.+264    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
     e74:	a2 e3       	ldi	r26, 0x32	; 50
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e2 e3       	ldi	r30, 0x32	; 50
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <M_DIO_Void_SetPinValue+0x130>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <M_DIO_Void_SetPinValue+0x12c>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	6f c0       	rjmp	.+222    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3e 83       	std	Y+6, r19	; 0x06
     ea6:	2d 83       	std	Y+5, r18	; 0x05
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	91 05       	cpc	r25, r1
     eb0:	51 f1       	breq	.+84     	; 0xf06 <M_DIO_Void_SetPinValue+0x1a4>
     eb2:	2d 81       	ldd	r18, Y+5	; 0x05
     eb4:	3e 81       	ldd	r19, Y+6	; 0x06
     eb6:	23 30       	cpi	r18, 0x03	; 3
     eb8:	31 05       	cpc	r19, r1
     eba:	34 f4       	brge	.+12     	; 0xec8 <M_DIO_Void_SetPinValue+0x166>
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	61 f0       	breq	.+24     	; 0xede <M_DIO_Void_SetPinValue+0x17c>
     ec6:	5a c0       	rjmp	.+180    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
     ec8:	2d 81       	ldd	r18, Y+5	; 0x05
     eca:	3e 81       	ldd	r19, Y+6	; 0x06
     ecc:	23 30       	cpi	r18, 0x03	; 3
     ece:	31 05       	cpc	r19, r1
     ed0:	71 f1       	breq	.+92     	; 0xf2e <M_DIO_Void_SetPinValue+0x1cc>
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	9e 81       	ldd	r25, Y+6	; 0x06
     ed6:	84 30       	cpi	r24, 0x04	; 4
     ed8:	91 05       	cpc	r25, r1
     eda:	e9 f1       	breq	.+122    	; 0xf56 <M_DIO_Void_SetPinValue+0x1f4>
     edc:	4f c0       	rjmp	.+158    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
     ede:	ab e3       	ldi	r26, 0x3B	; 59
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	eb e3       	ldi	r30, 0x3B	; 59
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <M_DIO_Void_SetPinValue+0x19a>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <M_DIO_Void_SetPinValue+0x196>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	3b c0       	rjmp	.+118    	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
     f06:	a8 e3       	ldi	r26, 0x38	; 56
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e8 e3       	ldi	r30, 0x38	; 56
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <M_DIO_Void_SetPinValue+0x1c2>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <M_DIO_Void_SetPinValue+0x1be>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	27 c0       	rjmp	.+78     	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
     f2e:	a5 e3       	ldi	r26, 0x35	; 53
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e5 e3       	ldi	r30, 0x35	; 53
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	48 2f       	mov	r20, r24
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 2e       	mov	r0, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <M_DIO_Void_SetPinValue+0x1ea>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	0a 94       	dec	r0
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <M_DIO_Void_SetPinValue+0x1e6>
     f50:	84 2b       	or	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	13 c0       	rjmp	.+38     	; 0xf7c <M_DIO_Void_SetPinValue+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
     f56:	a2 e3       	ldi	r26, 0x32	; 50
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e2 e3       	ldi	r30, 0x32	; 50
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <M_DIO_Void_SetPinValue+0x212>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <M_DIO_Void_SetPinValue+0x20e>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
     f7c:	2a 96       	adiw	r28, 0x0a	; 10
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <M_DIO_Void_GetPinValue>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	00 d0       	rcall	.+0      	; 0xf94 <M_DIO_Void_GetPinValue+0x6>
     f94:	00 d0       	rcall	.+0      	; 0xf96 <M_DIO_Void_GetPinValue+0x8>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <M_DIO_Void_GetPinValue+0xa>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9a e0       	ldi	r25, 0x0A	; 10
     fa2:	69 2f       	mov	r22, r25
     fa4:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
     fa8:	89 2f       	mov	r24, r25
     faa:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9a e0       	ldi	r25, 0x0A	; 10
     fb0:	69 2f       	mov	r22, r25
     fb2:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
     fb6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
     fb8:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Group)
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	3e 83       	std	Y+6, r19	; 0x06
     fc2:	2d 83       	std	Y+5, r18	; 0x05
     fc4:	4d 81       	ldd	r20, Y+5	; 0x05
     fc6:	5e 81       	ldd	r21, Y+6	; 0x06
     fc8:	42 30       	cpi	r20, 0x02	; 2
     fca:	51 05       	cpc	r21, r1
     fcc:	41 f1       	breq	.+80     	; 0x101e <M_DIO_Void_GetPinValue+0x90>
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	91 05       	cpc	r25, r1
     fd6:	34 f4       	brge	.+12     	; 0xfe4 <M_DIO_Void_GetPinValue+0x56>
     fd8:	2d 81       	ldd	r18, Y+5	; 0x05
     fda:	3e 81       	ldd	r19, Y+6	; 0x06
     fdc:	21 30       	cpi	r18, 0x01	; 1
     fde:	31 05       	cpc	r19, r1
     fe0:	61 f0       	breq	.+24     	; 0xffa <M_DIO_Void_GetPinValue+0x6c>
     fe2:	52 c0       	rjmp	.+164    	; 0x1088 <M_DIO_Void_GetPinValue+0xfa>
     fe4:	4d 81       	ldd	r20, Y+5	; 0x05
     fe6:	5e 81       	ldd	r21, Y+6	; 0x06
     fe8:	43 30       	cpi	r20, 0x03	; 3
     fea:	51 05       	cpc	r21, r1
     fec:	51 f1       	breq	.+84     	; 0x1042 <M_DIO_Void_GetPinValue+0xb4>
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	91 05       	cpc	r25, r1
     ff6:	b9 f1       	breq	.+110    	; 0x1066 <M_DIO_Void_GetPinValue+0xd8>
     ff8:	47 c0       	rjmp	.+142    	; 0x1088 <M_DIO_Void_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
     ffa:	e9 e3       	ldi	r30, 0x39	; 57
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	88 2f       	mov	r24, r24
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <M_DIO_Void_GetPinValue+0x84>
    100e:	55 95       	asr	r21
    1010:	47 95       	ror	r20
    1012:	8a 95       	dec	r24
    1014:	e2 f7       	brpl	.-8      	; 0x100e <M_DIO_Void_GetPinValue+0x80>
    1016:	ca 01       	movw	r24, r20
    1018:	81 70       	andi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	35 c0       	rjmp	.+106    	; 0x1088 <M_DIO_Void_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    101e:	e6 e3       	ldi	r30, 0x36	; 54
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <M_DIO_Void_GetPinValue+0xa8>
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <M_DIO_Void_GetPinValue+0xa4>
    103a:	ca 01       	movw	r24, r20
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	23 c0       	rjmp	.+70     	; 0x1088 <M_DIO_Void_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1042:	e3 e3       	ldi	r30, 0x33	; 51
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a9 01       	movw	r20, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <M_DIO_Void_GetPinValue+0xcc>
    1056:	55 95       	asr	r21
    1058:	47 95       	ror	r20
    105a:	8a 95       	dec	r24
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <M_DIO_Void_GetPinValue+0xc8>
    105e:	ca 01       	movw	r24, r20
    1060:	81 70       	andi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	11 c0       	rjmp	.+34     	; 0x1088 <M_DIO_Void_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1066:	e0 e3       	ldi	r30, 0x30	; 48
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <M_DIO_Void_GetPinValue+0xf0>
    107a:	55 95       	asr	r21
    107c:	47 95       	ror	r20
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <M_DIO_Void_GetPinValue+0xec>
    1082:	ca 01       	movw	r24, r20
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
	return Local_U8_Reading ;
    1088:	89 81       	ldd	r24, Y+1	; 0x01
}
    108a:	26 96       	adiw	r28, 0x06	; 6
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <M_DIO_Void_TogPin>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_TogPin(u8 Copy_U8_Number)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <M_DIO_Void_TogPin+0x6>
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <M_DIO_Void_TogPin+0x8>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9a e0       	ldi	r25, 0x0A	; 10
    10b0:	69 2f       	mov	r22, r25
    10b2:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
    10b6:	89 2f       	mov	r24, r25
    10b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9a e0       	ldi	r25, 0x0A	; 10
    10be:	69 2f       	mov	r22, r25
    10c0:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
    10c4:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Group)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3d 83       	std	Y+5, r19	; 0x05
    10ce:	2c 83       	std	Y+4, r18	; 0x04
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	91 05       	cpc	r25, r1
    10d8:	51 f1       	breq	.+84     	; 0x112e <M_DIO_Void_TogPin+0x92>
    10da:	2c 81       	ldd	r18, Y+4	; 0x04
    10dc:	3d 81       	ldd	r19, Y+5	; 0x05
    10de:	23 30       	cpi	r18, 0x03	; 3
    10e0:	31 05       	cpc	r19, r1
    10e2:	34 f4       	brge	.+12     	; 0x10f0 <M_DIO_Void_TogPin+0x54>
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	61 f0       	breq	.+24     	; 0x1106 <M_DIO_Void_TogPin+0x6a>
    10ee:	5a c0       	rjmp	.+180    	; 0x11a4 <M_DIO_Void_TogPin+0x108>
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	3d 81       	ldd	r19, Y+5	; 0x05
    10f4:	23 30       	cpi	r18, 0x03	; 3
    10f6:	31 05       	cpc	r19, r1
    10f8:	71 f1       	breq	.+92     	; 0x1156 <M_DIO_Void_TogPin+0xba>
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	9d 81       	ldd	r25, Y+5	; 0x05
    10fe:	84 30       	cpi	r24, 0x04	; 4
    1100:	91 05       	cpc	r25, r1
    1102:	e9 f1       	breq	.+122    	; 0x117e <M_DIO_Void_TogPin+0xe2>
    1104:	4f c0       	rjmp	.+158    	; 0x11a4 <M_DIO_Void_TogPin+0x108>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Bit); break;
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <M_DIO_Void_TogPin+0x88>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <M_DIO_Void_TogPin+0x84>
    1128:	84 27       	eor	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	3b c0       	rjmp	.+118    	; 0x11a4 <M_DIO_Void_TogPin+0x108>
	case 2: TOG_BIT(PORTB_REG,Local_U8_Bit); break;
    112e:	a8 e3       	ldi	r26, 0x38	; 56
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e8 e3       	ldi	r30, 0x38	; 56
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <M_DIO_Void_TogPin+0xb0>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <M_DIO_Void_TogPin+0xac>
    1150:	84 27       	eor	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	27 c0       	rjmp	.+78     	; 0x11a4 <M_DIO_Void_TogPin+0x108>
	case 3: TOG_BIT(PORTC_REG,Local_U8_Bit); break;
    1156:	a5 e3       	ldi	r26, 0x35	; 53
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e3       	ldi	r30, 0x35	; 53
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <M_DIO_Void_TogPin+0xd8>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <M_DIO_Void_TogPin+0xd4>
    1178:	84 27       	eor	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <M_DIO_Void_TogPin+0x108>
	case 4: TOG_BIT(PORTD_REG,Local_U8_Bit); break;
    117e:	a2 e3       	ldi	r26, 0x32	; 50
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e2 e3       	ldi	r30, 0x32	; 50
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <M_DIO_Void_TogPin+0x100>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <M_DIO_Void_TogPin+0xfc>
    11a0:	84 27       	eor	r24, r20
    11a2:	8c 93       	st	X, r24
	default:                                 break;
	}
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <M_DIO_Void_SetPinPullUpRes>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinPullUpRes(u8 Copy_U8_Number,u8 Copy_U8_State)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	2a 97       	sbiw	r28, 0x0a	; 10
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	8b 83       	std	Y+3, r24	; 0x03
    11ca:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9a e0       	ldi	r25, 0x0A	; 10
    11d0:	69 2f       	mov	r22, r25
    11d2:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
    11d6:	89 2f       	mov	r24, r25
    11d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9a e0       	ldi	r25, 0x0A	; 10
    11de:	69 2f       	mov	r22, r25
    11e0:	0e 94 88 12 	call	0x2510	; 0x2510 <__udivmodqi4>
    11e4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_State)
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3a 87       	std	Y+10, r19	; 0x0a
    11ee:	29 87       	std	Y+9, r18	; 0x09
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	39 f0       	breq	.+14     	; 0x1206 <M_DIO_Void_SetPinPullUpRes+0x52>
    11f8:	29 85       	ldd	r18, Y+9	; 0x09
    11fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    11fc:	21 30       	cpi	r18, 0x01	; 1
    11fe:	31 05       	cpc	r19, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <M_DIO_Void_SetPinPullUpRes+0x50>
    1202:	76 c0       	rjmp	.+236    	; 0x12f0 <M_DIO_Void_SetPinPullUpRes+0x13c>
    1204:	e4 c0       	rjmp	.+456    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Group)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	38 87       	std	Y+8, r19	; 0x08
    120e:	2f 83       	std	Y+7, r18	; 0x07
    1210:	8f 81       	ldd	r24, Y+7	; 0x07
    1212:	98 85       	ldd	r25, Y+8	; 0x08
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	91 05       	cpc	r25, r1
    1218:	61 f1       	breq	.+88     	; 0x1272 <M_DIO_Void_SetPinPullUpRes+0xbe>
    121a:	2f 81       	ldd	r18, Y+7	; 0x07
    121c:	38 85       	ldd	r19, Y+8	; 0x08
    121e:	23 30       	cpi	r18, 0x03	; 3
    1220:	31 05       	cpc	r19, r1
    1222:	34 f4       	brge	.+12     	; 0x1230 <M_DIO_Void_SetPinPullUpRes+0x7c>
    1224:	8f 81       	ldd	r24, Y+7	; 0x07
    1226:	98 85       	ldd	r25, Y+8	; 0x08
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	69 f0       	breq	.+26     	; 0x1248 <M_DIO_Void_SetPinPullUpRes+0x94>
    122e:	cf c0       	rjmp	.+414    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
    1230:	2f 81       	ldd	r18, Y+7	; 0x07
    1232:	38 85       	ldd	r19, Y+8	; 0x08
    1234:	23 30       	cpi	r18, 0x03	; 3
    1236:	31 05       	cpc	r19, r1
    1238:	89 f1       	breq	.+98     	; 0x129c <M_DIO_Void_SetPinPullUpRes+0xe8>
    123a:	8f 81       	ldd	r24, Y+7	; 0x07
    123c:	98 85       	ldd	r25, Y+8	; 0x08
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	91 05       	cpc	r25, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <M_DIO_Void_SetPinPullUpRes+0x92>
    1244:	40 c0       	rjmp	.+128    	; 0x12c6 <M_DIO_Void_SetPinPullUpRes+0x112>
    1246:	c3 c0       	rjmp	.+390    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1248:	ab e3       	ldi	r26, 0x3B	; 59
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <M_DIO_Void_SetPinPullUpRes+0xb2>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <M_DIO_Void_SetPinPullUpRes+0xae>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	ae c0       	rjmp	.+348    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    1272:	a8 e3       	ldi	r26, 0x38	; 56
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e8 e3       	ldi	r30, 0x38	; 56
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <M_DIO_Void_SetPinPullUpRes+0xdc>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <M_DIO_Void_SetPinPullUpRes+0xd8>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	99 c0       	rjmp	.+306    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    129c:	a5 e3       	ldi	r26, 0x35	; 53
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e3       	ldi	r30, 0x35	; 53
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <M_DIO_Void_SetPinPullUpRes+0x106>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <M_DIO_Void_SetPinPullUpRes+0x102>
    12be:	80 95       	com	r24
    12c0:	84 23       	and	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	84 c0       	rjmp	.+264    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    12c6:	a2 e3       	ldi	r26, 0x32	; 50
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e2 e3       	ldi	r30, 0x32	; 50
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <M_DIO_Void_SetPinPullUpRes+0x130>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <M_DIO_Void_SetPinPullUpRes+0x12c>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	6f c0       	rjmp	.+222    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
		default:                                 break;
		}
		break;
		case ENABLE:
			switch(Local_U8_Group)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3e 83       	std	Y+6, r19	; 0x06
    12f8:	2d 83       	std	Y+5, r18	; 0x05
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	51 f1       	breq	.+84     	; 0x1358 <M_DIO_Void_SetPinPullUpRes+0x1a4>
    1304:	2d 81       	ldd	r18, Y+5	; 0x05
    1306:	3e 81       	ldd	r19, Y+6	; 0x06
    1308:	23 30       	cpi	r18, 0x03	; 3
    130a:	31 05       	cpc	r19, r1
    130c:	34 f4       	brge	.+12     	; 0x131a <M_DIO_Void_SetPinPullUpRes+0x166>
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	91 05       	cpc	r25, r1
    1316:	61 f0       	breq	.+24     	; 0x1330 <M_DIO_Void_SetPinPullUpRes+0x17c>
    1318:	5a c0       	rjmp	.+180    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
    131a:	2d 81       	ldd	r18, Y+5	; 0x05
    131c:	3e 81       	ldd	r19, Y+6	; 0x06
    131e:	23 30       	cpi	r18, 0x03	; 3
    1320:	31 05       	cpc	r19, r1
    1322:	71 f1       	breq	.+92     	; 0x1380 <M_DIO_Void_SetPinPullUpRes+0x1cc>
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	91 05       	cpc	r25, r1
    132c:	e9 f1       	breq	.+122    	; 0x13a8 <M_DIO_Void_SetPinPullUpRes+0x1f4>
    132e:	4f c0       	rjmp	.+158    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    1330:	ab e3       	ldi	r26, 0x3B	; 59
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	eb e3       	ldi	r30, 0x3B	; 59
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <M_DIO_Void_SetPinPullUpRes+0x19a>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <M_DIO_Void_SetPinPullUpRes+0x196>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	3b c0       	rjmp	.+118    	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1358:	a8 e3       	ldi	r26, 0x38	; 56
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <M_DIO_Void_SetPinPullUpRes+0x1c2>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <M_DIO_Void_SetPinPullUpRes+0x1be>
    137a:	84 2b       	or	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <M_DIO_Void_SetPinPullUpRes+0x1ea>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <M_DIO_Void_SetPinPullUpRes+0x1e6>
    13a2:	84 2b       	or	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	13 c0       	rjmp	.+38     	; 0x13ce <M_DIO_Void_SetPinPullUpRes+0x21a>
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    13a8:	a2 e3       	ldi	r26, 0x32	; 50
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e2 e3       	ldi	r30, 0x32	; 50
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <M_DIO_Void_SetPinPullUpRes+0x212>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <M_DIO_Void_SetPinPullUpRes+0x20e>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
			default:                                 break;
			}
			break;
			default:    break;
	}
}
    13ce:	2a 96       	adiw	r28, 0x0a	; 10
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <H_KeyPad_Void_KeyPadInit>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    13e8:	83 e2       	ldi	r24, 0x23	; 35
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    13f0:	82 e2       	ldi	r24, 0x22	; 34
    13f2:	61 e0       	ldi	r22, 0x01	; 1
    13f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    13f8:	81 e2       	ldi	r24, 0x21	; 33
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    1400:	80 e2       	ldi	r24, 0x20	; 32
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    1408:	83 e2       	ldi	r24, 0x23	; 35
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    1410:	82 e2       	ldi	r24, 0x22	; 34
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    1418:	81 e2       	ldi	r24, 0x21	; 33
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    1420:	80 e2       	ldi	r24, 0x20	; 32
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    1428:	8f e2       	ldi	r24, 0x2F	; 47
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    1430:	8e e2       	ldi	r24, 0x2E	; 46
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    1438:	8d e2       	ldi	r24, 0x2D	; 45
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    1440:	8b e2       	ldi	r24, 0x2B	; 43
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <H_KeyPad_U8_KeyPadRead>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	ae 97       	sbiw	r28, 0x2e	; 46
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[4] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
    1462:	83 e2       	ldi	r24, 0x23	; 35
    1464:	8a 8b       	std	Y+18, r24	; 0x12
    1466:	82 e2       	ldi	r24, 0x22	; 34
    1468:	8b 8b       	std	Y+19, r24	; 0x13
    146a:	81 e2       	ldi	r24, 0x21	; 33
    146c:	8c 8b       	std	Y+20, r24	; 0x14
    146e:	80 e2       	ldi	r24, 0x20	; 32
    1470:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
    1472:	8f e2       	ldi	r24, 0x2F	; 47
    1474:	8e 8b       	std	Y+22, r24	; 0x16
    1476:	8e e2       	ldi	r24, 0x2E	; 46
    1478:	8f 8b       	std	Y+23, r24	; 0x17
    147a:	8d e2       	ldi	r24, 0x2D	; 45
    147c:	88 8f       	std	Y+24, r24	; 0x18
    147e:	8b e2       	ldi	r24, 0x2B	; 43
    1480:	89 8f       	std	Y+25, r24	; 0x19
						         	  { '*' , '0' , '#' , 'D' }};
#elif KEYPAD_MODEL   ==   KEYPAD_MODEL_B
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
    1482:	ce 01       	movw	r24, r28
    1484:	4a 96       	adiw	r24, 0x1a	; 26
    1486:	9b a7       	std	Y+43, r25	; 0x2b
    1488:	8a a7       	std	Y+42, r24	; 0x2a
    148a:	e4 e7       	ldi	r30, 0x74	; 116
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	fd a7       	std	Y+45, r31	; 0x2d
    1490:	ec a7       	std	Y+44, r30	; 0x2c
    1492:	f0 e1       	ldi	r31, 0x10	; 16
    1494:	fe a7       	std	Y+46, r31	; 0x2e
    1496:	ec a5       	ldd	r30, Y+44	; 0x2c
    1498:	fd a5       	ldd	r31, Y+45	; 0x2d
    149a:	00 80       	ld	r0, Z
    149c:	8c a5       	ldd	r24, Y+44	; 0x2c
    149e:	9d a5       	ldd	r25, Y+45	; 0x2d
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	9d a7       	std	Y+45, r25	; 0x2d
    14a4:	8c a7       	std	Y+44, r24	; 0x2c
    14a6:	ea a5       	ldd	r30, Y+42	; 0x2a
    14a8:	fb a5       	ldd	r31, Y+43	; 0x2b
    14aa:	00 82       	st	Z, r0
    14ac:	8a a5       	ldd	r24, Y+42	; 0x2a
    14ae:	9b a5       	ldd	r25, Y+43	; 0x2b
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	9b a7       	std	Y+43, r25	; 0x2b
    14b4:	8a a7       	std	Y+42, r24	; 0x2a
    14b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    14b8:	91 50       	subi	r25, 0x01	; 1
    14ba:	9e a7       	std	Y+46, r25	; 0x2e
    14bc:	ee a5       	ldd	r30, Y+46	; 0x2e
    14be:	ee 23       	and	r30, r30
    14c0:	51 f7       	brne	.-44     	; 0x1496 <H_KeyPad_U8_KeyPadRead+0x48>
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_U8_RowCounter = 0;
    14c6:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8_ColCounter = 0;
    14c8:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
    14ca:	18 8a       	std	Y+16, r1	; 0x10
    14cc:	d3 c0       	rjmp	.+422    	; 0x1674 <H_KeyPad_U8_KeyPadRead+0x226>
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
    14ce:	88 89       	ldd	r24, Y+16	; 0x10
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	ce 01       	movw	r24, r28
    14d6:	42 96       	adiw	r24, 0x12	; 18
    14d8:	fc 01       	movw	r30, r24
    14da:	e2 0f       	add	r30, r18
    14dc:	f3 1f       	adc	r31, r19
    14de:	80 81       	ld	r24, Z
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    14e6:	1f 86       	std	Y+15, r1	; 0x0f
    14e8:	b2 c0       	rjmp	.+356    	; 0x164e <H_KeyPad_U8_KeyPadRead+0x200>
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    14ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	ce 01       	movw	r24, r28
    14f2:	46 96       	adiw	r24, 0x16	; 22
    14f4:	fc 01       	movw	r30, r24
    14f6:	e2 0f       	add	r30, r18
    14f8:	f3 1f       	adc	r31, r19
    14fa:	80 81       	ld	r24, Z
    14fc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <M_DIO_Void_GetPinValue>
    1500:	88 23       	and	r24, r24
    1502:	09 f0       	breq	.+2      	; 0x1506 <H_KeyPad_U8_KeyPadRead+0xb8>
    1504:	a1 c0       	rjmp	.+322    	; 0x1648 <H_KeyPad_U8_KeyPadRead+0x1fa>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e2       	ldi	r26, 0x20	; 32
    150c:	b2 e4       	ldi	r27, 0x42	; 66
    150e:	8b 87       	std	Y+11, r24	; 0x0b
    1510:	9c 87       	std	Y+12, r25	; 0x0c
    1512:	ad 87       	std	Y+13, r26	; 0x0d
    1514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6b 85       	ldd	r22, Y+11	; 0x0b
    1518:	7c 85       	ldd	r23, Y+12	; 0x0c
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a e7       	ldi	r20, 0x7A	; 122
    1524:	55 e4       	ldi	r21, 0x45	; 69
    1526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8f 83       	std	Y+7, r24	; 0x07
    1530:	98 87       	std	Y+8, r25	; 0x08
    1532:	a9 87       	std	Y+9, r26	; 0x09
    1534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1536:	6f 81       	ldd	r22, Y+7	; 0x07
    1538:	78 85       	ldd	r23, Y+8	; 0x08
    153a:	89 85       	ldd	r24, Y+9	; 0x09
    153c:	9a 85       	ldd	r25, Y+10	; 0x0a
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <H_KeyPad_U8_KeyPadRead+0x10a>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <H_KeyPad_U8_KeyPadRead+0x188>
	else if (__tmp > 65535)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <H_KeyPad_U8_KeyPadRead+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6b 85       	ldd	r22, Y+11	; 0x0b
    1572:	7c 85       	ldd	r23, Y+12	; 0x0c
    1574:	8d 85       	ldd	r24, Y+13	; 0x0d
    1576:	9e 85       	ldd	r25, Y+14	; 0x0e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <H_KeyPad_U8_KeyPadRead+0x16a>
    159a:	80 e9       	ldi	r24, 0x90	; 144
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	9c 83       	std	Y+4, r25	; 0x04
    15a0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	9c 81       	ldd	r25, Y+4	; 0x04
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <H_KeyPad_U8_KeyPadRead+0x158>
    15aa:	9c 83       	std	Y+4, r25	; 0x04
    15ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <H_KeyPad_U8_KeyPadRead+0x14c>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <H_KeyPad_U8_KeyPadRead+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6f 81       	ldd	r22, Y+7	; 0x07
    15c4:	78 85       	ldd	r23, Y+8	; 0x08
    15c6:	89 85       	ldd	r24, Y+9	; 0x09
    15c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	9a 81       	ldd	r25, Y+2	; 0x02
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <H_KeyPad_U8_KeyPadRead+0x194>
    15e6:	9a 83       	std	Y+2, r25	; 0x02
    15e8:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
    15ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	ce 01       	movw	r24, r28
    15f2:	46 96       	adiw	r24, 0x16	; 22
    15f4:	fc 01       	movw	r30, r24
    15f6:	e2 0f       	add	r30, r18
    15f8:	f3 1f       	adc	r31, r19
    15fa:	80 81       	ld	r24, Z
    15fc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <M_DIO_Void_GetPinValue>
    1600:	88 23       	and	r24, r24
    1602:	11 f5       	brne	.+68     	; 0x1648 <H_KeyPad_U8_KeyPadRead+0x1fa>
				{
					while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
    1604:	8f 85       	ldd	r24, Y+15	; 0x0f
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	ce 01       	movw	r24, r28
    160c:	46 96       	adiw	r24, 0x16	; 22
    160e:	fc 01       	movw	r30, r24
    1610:	e2 0f       	add	r30, r18
    1612:	f3 1f       	adc	r31, r19
    1614:	80 81       	ld	r24, Z
    1616:	0e 94 c7 07 	call	0xf8e	; 0xf8e <M_DIO_Void_GetPinValue>
    161a:	88 23       	and	r24, r24
    161c:	99 f3       	breq	.-26     	; 0x1604 <H_KeyPad_U8_KeyPadRead+0x1b6>
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
    161e:	88 89       	ldd	r24, Y+16	; 0x10
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	8f 85       	ldd	r24, Y+15	; 0x0f
    1626:	48 2f       	mov	r20, r24
    1628:	50 e0       	ldi	r21, 0x00	; 0
    162a:	22 0f       	add	r18, r18
    162c:	33 1f       	adc	r19, r19
    162e:	22 0f       	add	r18, r18
    1630:	33 1f       	adc	r19, r19
    1632:	ce 01       	movw	r24, r28
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	82 0f       	add	r24, r18
    1638:	93 1f       	adc	r25, r19
    163a:	84 0f       	add	r24, r20
    163c:	95 1f       	adc	r25, r21
    163e:	fc 01       	movw	r30, r24
    1640:	79 96       	adiw	r30, 0x19	; 25
    1642:	80 81       	ld	r24, Z
    1644:	89 8b       	std	Y+17, r24	; 0x11
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <H_KeyPad_U8_KeyPadRead+0x208>
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
    1648:	8f 85       	ldd	r24, Y+15	; 0x0f
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	8f 87       	std	Y+15, r24	; 0x0f
    164e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1650:	84 30       	cpi	r24, 0x04	; 4
    1652:	08 f4       	brcc	.+2      	; 0x1656 <H_KeyPad_U8_KeyPadRead+0x208>
    1654:	4a cf       	rjmp	.-364    	; 0x14ea <H_KeyPad_U8_KeyPadRead+0x9c>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
    1656:	88 89       	ldd	r24, Y+16	; 0x10
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	ce 01       	movw	r24, r28
    165e:	42 96       	adiw	r24, 0x12	; 18
    1660:	fc 01       	movw	r30, r24
    1662:	e2 0f       	add	r30, r18
    1664:	f3 1f       	adc	r31, r19
    1666:	80 81       	ld	r24, Z
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
    166e:	88 89       	ldd	r24, Y+16	; 0x10
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	88 8b       	std	Y+16, r24	; 0x10
    1674:	88 89       	ldd	r24, Y+16	; 0x10
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	08 f4       	brcc	.+2      	; 0x167c <H_KeyPad_U8_KeyPadRead+0x22e>
    167a:	29 cf       	rjmp	.-430    	; 0x14ce <H_KeyPad_U8_KeyPadRead+0x80>

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
    167c:	89 89       	ldd	r24, Y+17	; 0x11
}
    167e:	ae 96       	adiw	r28, 0x2e	; 46
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <H_Lcd_Void_LCDInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDInit(void)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    1698:	84 e1       	ldi	r24, 0x14	; 20
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    16a0:	85 e1       	ldi	r24, 0x15	; 21
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    16a8:	86 e1       	ldi	r24, 0x16	; 22
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    16b0:	88 e1       	ldi	r24, 0x18	; 24
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    16b8:	8d e0       	ldi	r24, 0x0D	; 13
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    16c0:	8c e0       	ldi	r24, 0x0C	; 12
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	0e 94 9b 05 	call	0xb36	; 0xb36 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
    16c8:	83 e3       	ldi	r24, 0x33	; 51
    16ca:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
    16ce:	82 e3       	ldi	r24, 0x32	; 50
    16d0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
    16d4:	88 e2       	ldi	r24, 0x28	; 40
    16d6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
    16da:	8c e0       	ldi	r24, 0x0C	; 12
    16dc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>


#endif
}
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	e9 97       	sbiw	r28, 0x39	; 57
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    1708:	8d e0       	ldi	r24, 0x0D	; 13
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
    1710:	89 ad       	ldd	r24, Y+57	; 0x39
    1712:	82 95       	swap	r24
    1714:	8f 70       	andi	r24, 0x0F	; 15
    1716:	98 2f       	mov	r25, r24
    1718:	91 70       	andi	r25, 0x01	; 1
    171a:	84 e1       	ldi	r24, 0x14	; 20
    171c:	69 2f       	mov	r22, r25
    171e:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
    1722:	89 ad       	ldd	r24, Y+57	; 0x39
    1724:	82 95       	swap	r24
    1726:	86 95       	lsr	r24
    1728:	87 70       	andi	r24, 0x07	; 7
    172a:	98 2f       	mov	r25, r24
    172c:	91 70       	andi	r25, 0x01	; 1
    172e:	85 e1       	ldi	r24, 0x15	; 21
    1730:	69 2f       	mov	r22, r25
    1732:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
    1736:	89 ad       	ldd	r24, Y+57	; 0x39
    1738:	82 95       	swap	r24
    173a:	86 95       	lsr	r24
    173c:	86 95       	lsr	r24
    173e:	83 70       	andi	r24, 0x03	; 3
    1740:	98 2f       	mov	r25, r24
    1742:	91 70       	andi	r25, 0x01	; 1
    1744:	86 e1       	ldi	r24, 0x16	; 22
    1746:	69 2f       	mov	r22, r25
    1748:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
    174c:	89 ad       	ldd	r24, Y+57	; 0x39
    174e:	98 2f       	mov	r25, r24
    1750:	99 1f       	adc	r25, r25
    1752:	99 27       	eor	r25, r25
    1754:	99 1f       	adc	r25, r25
    1756:	88 e1       	ldi	r24, 0x18	; 24
    1758:	69 2f       	mov	r22, r25
    175a:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    175e:	8c e0       	ldi	r24, 0x0C	; 12
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e8       	ldi	r26, 0x80	; 128
    176c:	bf e3       	ldi	r27, 0x3F	; 63
    176e:	8d ab       	std	Y+53, r24	; 0x35
    1770:	9e ab       	std	Y+54, r25	; 0x36
    1772:	af ab       	std	Y+55, r26	; 0x37
    1774:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	6d a9       	ldd	r22, Y+53	; 0x35
    1778:	7e a9       	ldd	r23, Y+54	; 0x36
    177a:	8f a9       	ldd	r24, Y+55	; 0x37
    177c:	98 ad       	ldd	r25, Y+56	; 0x38
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a e7       	ldi	r20, 0x7A	; 122
    1784:	55 e4       	ldi	r21, 0x45	; 69
    1786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	89 ab       	std	Y+49, r24	; 0x31
    1790:	9a ab       	std	Y+50, r25	; 0x32
    1792:	ab ab       	std	Y+51, r26	; 0x33
    1794:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1796:	69 a9       	ldd	r22, Y+49	; 0x31
    1798:	7a a9       	ldd	r23, Y+50	; 0x32
    179a:	8b a9       	ldd	r24, Y+51	; 0x33
    179c:	9c a9       	ldd	r25, Y+52	; 0x34
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <H_Lcd_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	98 ab       	std	Y+48, r25	; 0x30
    17b4:	8f a7       	std	Y+47, r24	; 0x2f
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <H_Lcd_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    17b8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ba:	7a a9       	ldd	r23, Y+50	; 0x32
    17bc:	8b a9       	ldd	r24, Y+51	; 0x33
    17be:	9c a9       	ldd	r25, Y+52	; 0x34
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <H_Lcd_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	6d a9       	ldd	r22, Y+53	; 0x35
    17d2:	7e a9       	ldd	r23, Y+54	; 0x36
    17d4:	8f a9       	ldd	r24, Y+55	; 0x37
    17d6:	98 ad       	ldd	r25, Y+56	; 0x38
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	51 e4       	ldi	r21, 0x41	; 65
    17e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	98 ab       	std	Y+48, r25	; 0x30
    17f6:	8f a7       	std	Y+47, r24	; 0x2f
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <H_Lcd_Void_LCDWriteCharacter+0x126>
    17fa:	80 e9       	ldi	r24, 0x90	; 144
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	9e a7       	std	Y+46, r25	; 0x2e
    1800:	8d a7       	std	Y+45, r24	; 0x2d
    1802:	8d a5       	ldd	r24, Y+45	; 0x2d
    1804:	9e a5       	ldd	r25, Y+46	; 0x2e
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <H_Lcd_Void_LCDWriteCharacter+0x114>
    180a:	9e a7       	std	Y+46, r25	; 0x2e
    180c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1810:	98 a9       	ldd	r25, Y+48	; 0x30
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	98 ab       	std	Y+48, r25	; 0x30
    1816:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8f a5       	ldd	r24, Y+47	; 0x2f
    181a:	98 a9       	ldd	r25, Y+48	; 0x30
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	69 f7       	brne	.-38     	; 0x17fa <H_Lcd_Void_LCDWriteCharacter+0x108>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <H_Lcd_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	69 a9       	ldd	r22, Y+49	; 0x31
    1824:	7a a9       	ldd	r23, Y+50	; 0x32
    1826:	8b a9       	ldd	r24, Y+51	; 0x33
    1828:	9c a9       	ldd	r25, Y+52	; 0x34
    182a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	98 ab       	std	Y+48, r25	; 0x30
    1834:	8f a7       	std	Y+47, r24	; 0x2f
    1836:	8f a5       	ldd	r24, Y+47	; 0x2f
    1838:	98 a9       	ldd	r25, Y+48	; 0x30
    183a:	9c a7       	std	Y+44, r25	; 0x2c
    183c:	8b a7       	std	Y+43, r24	; 0x2b
    183e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1840:	9c a5       	ldd	r25, Y+44	; 0x2c
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <H_Lcd_Void_LCDWriteCharacter+0x150>
    1846:	9c a7       	std	Y+44, r25	; 0x2c
    1848:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    184a:	8c e0       	ldi	r24, 0x0C	; 12
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	a0 e8       	ldi	r26, 0x80	; 128
    1858:	bf e3       	ldi	r27, 0x3F	; 63
    185a:	8f a3       	std	Y+39, r24	; 0x27
    185c:	98 a7       	std	Y+40, r25	; 0x28
    185e:	a9 a7       	std	Y+41, r26	; 0x29
    1860:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	6f a1       	ldd	r22, Y+39	; 0x27
    1864:	78 a5       	ldd	r23, Y+40	; 0x28
    1866:	89 a5       	ldd	r24, Y+41	; 0x29
    1868:	9a a5       	ldd	r25, Y+42	; 0x2a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a e7       	ldi	r20, 0x7A	; 122
    1870:	55 e4       	ldi	r21, 0x45	; 69
    1872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8b a3       	std	Y+35, r24	; 0x23
    187c:	9c a3       	std	Y+36, r25	; 0x24
    187e:	ad a3       	std	Y+37, r26	; 0x25
    1880:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1882:	6b a1       	ldd	r22, Y+35	; 0x23
    1884:	7c a1       	ldd	r23, Y+36	; 0x24
    1886:	8d a1       	ldd	r24, Y+37	; 0x25
    1888:	9e a1       	ldd	r25, Y+38	; 0x26
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <H_Lcd_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9a a3       	std	Y+34, r25	; 0x22
    18a0:	89 a3       	std	Y+33, r24	; 0x21
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <H_Lcd_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    18a4:	6b a1       	ldd	r22, Y+35	; 0x23
    18a6:	7c a1       	ldd	r23, Y+36	; 0x24
    18a8:	8d a1       	ldd	r24, Y+37	; 0x25
    18aa:	9e a1       	ldd	r25, Y+38	; 0x26
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <H_Lcd_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	6f a1       	ldd	r22, Y+39	; 0x27
    18be:	78 a5       	ldd	r23, Y+40	; 0x28
    18c0:	89 a5       	ldd	r24, Y+41	; 0x29
    18c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9a a3       	std	Y+34, r25	; 0x22
    18e2:	89 a3       	std	Y+33, r24	; 0x21
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <H_Lcd_Void_LCDWriteCharacter+0x212>
    18e6:	80 e9       	ldi	r24, 0x90	; 144
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	98 a3       	std	Y+32, r25	; 0x20
    18ec:	8f 8f       	std	Y+31, r24	; 0x1f
    18ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f0:	98 a1       	ldd	r25, Y+32	; 0x20
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <H_Lcd_Void_LCDWriteCharacter+0x200>
    18f6:	98 a3       	std	Y+32, r25	; 0x20
    18f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	89 a1       	ldd	r24, Y+33	; 0x21
    18fc:	9a a1       	ldd	r25, Y+34	; 0x22
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	9a a3       	std	Y+34, r25	; 0x22
    1902:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	89 a1       	ldd	r24, Y+33	; 0x21
    1906:	9a a1       	ldd	r25, Y+34	; 0x22
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <H_Lcd_Void_LCDWriteCharacter+0x1f4>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <H_Lcd_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6b a1       	ldd	r22, Y+35	; 0x23
    1910:	7c a1       	ldd	r23, Y+36	; 0x24
    1912:	8d a1       	ldd	r24, Y+37	; 0x25
    1914:	9e a1       	ldd	r25, Y+38	; 0x26
    1916:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9a a3       	std	Y+34, r25	; 0x22
    1920:	89 a3       	std	Y+33, r24	; 0x21
    1922:	89 a1       	ldd	r24, Y+33	; 0x21
    1924:	9a a1       	ldd	r25, Y+34	; 0x22
    1926:	9e 8f       	std	Y+30, r25	; 0x1e
    1928:	8d 8f       	std	Y+29, r24	; 0x1d
    192a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <H_Lcd_Void_LCDWriteCharacter+0x23c>
    1932:	9e 8f       	std	Y+30, r25	; 0x1e
    1934:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
    1936:	89 ad       	ldd	r24, Y+57	; 0x39
    1938:	98 2f       	mov	r25, r24
    193a:	91 70       	andi	r25, 0x01	; 1
    193c:	84 e1       	ldi	r24, 0x14	; 20
    193e:	69 2f       	mov	r22, r25
    1940:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
    1944:	89 ad       	ldd	r24, Y+57	; 0x39
    1946:	86 95       	lsr	r24
    1948:	98 2f       	mov	r25, r24
    194a:	91 70       	andi	r25, 0x01	; 1
    194c:	85 e1       	ldi	r24, 0x15	; 21
    194e:	69 2f       	mov	r22, r25
    1950:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
    1954:	89 ad       	ldd	r24, Y+57	; 0x39
    1956:	86 95       	lsr	r24
    1958:	86 95       	lsr	r24
    195a:	98 2f       	mov	r25, r24
    195c:	91 70       	andi	r25, 0x01	; 1
    195e:	86 e1       	ldi	r24, 0x16	; 22
    1960:	69 2f       	mov	r22, r25
    1962:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
    1966:	89 ad       	ldd	r24, Y+57	; 0x39
    1968:	86 95       	lsr	r24
    196a:	86 95       	lsr	r24
    196c:	86 95       	lsr	r24
    196e:	98 2f       	mov	r25, r24
    1970:	91 70       	andi	r25, 0x01	; 1
    1972:	88 e1       	ldi	r24, 0x18	; 24
    1974:	69 2f       	mov	r22, r25
    1976:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    197a:	8c e0       	ldi	r24, 0x0C	; 12
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e8       	ldi	r26, 0x80	; 128
    1988:	bf e3       	ldi	r27, 0x3F	; 63
    198a:	89 8f       	std	Y+25, r24	; 0x19
    198c:	9a 8f       	std	Y+26, r25	; 0x1a
    198e:	ab 8f       	std	Y+27, r26	; 0x1b
    1990:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	69 8d       	ldd	r22, Y+25	; 0x19
    1994:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1996:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1998:	9c 8d       	ldd	r25, Y+28	; 0x1c
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a e7       	ldi	r20, 0x7A	; 122
    19a0:	55 e4       	ldi	r21, 0x45	; 69
    19a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8d 8b       	std	Y+21, r24	; 0x15
    19ac:	9e 8b       	std	Y+22, r25	; 0x16
    19ae:	af 8b       	std	Y+23, r26	; 0x17
    19b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <H_Lcd_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <H_Lcd_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <H_Lcd_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	69 8d       	ldd	r22, Y+25	; 0x19
    19ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9c 8b       	std	Y+20, r25	; 0x14
    1a12:	8b 8b       	std	Y+19, r24	; 0x13
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <H_Lcd_Void_LCDWriteCharacter+0x342>
    1a16:	80 e9       	ldi	r24, 0x90	; 144
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	9a 8b       	std	Y+18, r25	; 0x12
    1a1c:	89 8b       	std	Y+17, r24	; 0x11
    1a1e:	89 89       	ldd	r24, Y+17	; 0x11
    1a20:	9a 89       	ldd	r25, Y+18	; 0x12
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <H_Lcd_Void_LCDWriteCharacter+0x330>
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <H_Lcd_Void_LCDWriteCharacter+0x324>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <H_Lcd_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9c 8b       	std	Y+20, r25	; 0x14
    1a50:	8b 8b       	std	Y+19, r24	; 0x13
    1a52:	8b 89       	ldd	r24, Y+19	; 0x13
    1a54:	9c 89       	ldd	r25, Y+20	; 0x14
    1a56:	98 8b       	std	Y+16, r25	; 0x10
    1a58:	8f 87       	std	Y+15, r24	; 0x0f
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	98 89       	ldd	r25, Y+16	; 0x10
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <H_Lcd_Void_LCDWriteCharacter+0x36c>
    1a62:	98 8b       	std	Y+16, r25	; 0x10
    1a64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1a66:	8c e0       	ldi	r24, 0x0C	; 12
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 ea       	ldi	r26, 0xA0	; 160
    1a74:	b0 e4       	ldi	r27, 0x40	; 64
    1a76:	8b 87       	std	Y+11, r24	; 0x0b
    1a78:	9c 87       	std	Y+12, r25	; 0x0c
    1a7a:	ad 87       	std	Y+13, r26	; 0x0d
    1a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a e7       	ldi	r20, 0x7A	; 122
    1a8c:	55 e4       	ldi	r21, 0x45	; 69
    1a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8f 83       	std	Y+7, r24	; 0x07
    1a98:	98 87       	std	Y+8, r25	; 0x08
    1a9a:	a9 87       	std	Y+9, r26	; 0x09
    1a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <H_Lcd_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <H_Lcd_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <H_Lcd_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <H_Lcd_Void_LCDWriteCharacter+0x42e>
    1b02:	80 e9       	ldi	r24, 0x90	; 144
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <H_Lcd_Void_LCDWriteCharacter+0x41c>
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <H_Lcd_Void_LCDWriteCharacter+0x410>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <H_Lcd_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <H_Lcd_Void_LCDWriteCharacter+0x458>
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    1b52:	e9 96       	adiw	r28, 0x39	; 57
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	e9 97       	sbiw	r28, 0x39	; 57
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    1b7a:	8d e0       	ldi	r24, 0x0D	; 13
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
    1b82:	89 ad       	ldd	r24, Y+57	; 0x39
    1b84:	82 95       	swap	r24
    1b86:	8f 70       	andi	r24, 0x0F	; 15
    1b88:	98 2f       	mov	r25, r24
    1b8a:	91 70       	andi	r25, 0x01	; 1
    1b8c:	84 e1       	ldi	r24, 0x14	; 20
    1b8e:	69 2f       	mov	r22, r25
    1b90:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
    1b94:	89 ad       	ldd	r24, Y+57	; 0x39
    1b96:	82 95       	swap	r24
    1b98:	86 95       	lsr	r24
    1b9a:	87 70       	andi	r24, 0x07	; 7
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	91 70       	andi	r25, 0x01	; 1
    1ba0:	85 e1       	ldi	r24, 0x15	; 21
    1ba2:	69 2f       	mov	r22, r25
    1ba4:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
    1ba8:	89 ad       	ldd	r24, Y+57	; 0x39
    1baa:	82 95       	swap	r24
    1bac:	86 95       	lsr	r24
    1bae:	86 95       	lsr	r24
    1bb0:	83 70       	andi	r24, 0x03	; 3
    1bb2:	98 2f       	mov	r25, r24
    1bb4:	91 70       	andi	r25, 0x01	; 1
    1bb6:	86 e1       	ldi	r24, 0x16	; 22
    1bb8:	69 2f       	mov	r22, r25
    1bba:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
    1bbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	99 27       	eor	r25, r25
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	88 e1       	ldi	r24, 0x18	; 24
    1bca:	69 2f       	mov	r22, r25
    1bcc:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1bd0:	8c e0       	ldi	r24, 0x0C	; 12
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e8       	ldi	r26, 0x80	; 128
    1bde:	bf e3       	ldi	r27, 0x3F	; 63
    1be0:	8d ab       	std	Y+53, r24	; 0x35
    1be2:	9e ab       	std	Y+54, r25	; 0x36
    1be4:	af ab       	std	Y+55, r26	; 0x37
    1be6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	6d a9       	ldd	r22, Y+53	; 0x35
    1bea:	7e a9       	ldd	r23, Y+54	; 0x36
    1bec:	8f a9       	ldd	r24, Y+55	; 0x37
    1bee:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	55 e4       	ldi	r21, 0x45	; 69
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	89 ab       	std	Y+49, r24	; 0x31
    1c02:	9a ab       	std	Y+50, r25	; 0x32
    1c04:	ab ab       	std	Y+51, r26	; 0x33
    1c06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c08:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <H_Lcd_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	98 ab       	std	Y+48, r25	; 0x30
    1c26:	8f a7       	std	Y+47, r24	; 0x2f
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <H_Lcd_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    1c2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c30:	9c a9       	ldd	r25, Y+52	; 0x34
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <H_Lcd_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	6d a9       	ldd	r22, Y+53	; 0x35
    1c44:	7e a9       	ldd	r23, Y+54	; 0x36
    1c46:	8f a9       	ldd	r24, Y+55	; 0x37
    1c48:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	98 ab       	std	Y+48, r25	; 0x30
    1c68:	8f a7       	std	Y+47, r24	; 0x2f
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <H_Lcd_Void_LCDWriteCommand+0x126>
    1c6c:	80 e9       	ldi	r24, 0x90	; 144
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	9e a7       	std	Y+46, r25	; 0x2e
    1c72:	8d a7       	std	Y+45, r24	; 0x2d
    1c74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <H_Lcd_Void_LCDWriteCommand+0x114>
    1c7c:	9e a7       	std	Y+46, r25	; 0x2e
    1c7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c82:	98 a9       	ldd	r25, Y+48	; 0x30
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	98 ab       	std	Y+48, r25	; 0x30
    1c88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <H_Lcd_Void_LCDWriteCommand+0x108>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <H_Lcd_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	69 a9       	ldd	r22, Y+49	; 0x31
    1c96:	7a a9       	ldd	r23, Y+50	; 0x32
    1c98:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	98 ab       	std	Y+48, r25	; 0x30
    1ca6:	8f a7       	std	Y+47, r24	; 0x2f
    1ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1caa:	98 a9       	ldd	r25, Y+48	; 0x30
    1cac:	9c a7       	std	Y+44, r25	; 0x2c
    1cae:	8b a7       	std	Y+43, r24	; 0x2b
    1cb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <H_Lcd_Void_LCDWriteCommand+0x150>
    1cb8:	9c a7       	std	Y+44, r25	; 0x2c
    1cba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1cbc:	8c e0       	ldi	r24, 0x0C	; 12
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e8       	ldi	r26, 0x80	; 128
    1cca:	bf e3       	ldi	r27, 0x3F	; 63
    1ccc:	8f a3       	std	Y+39, r24	; 0x27
    1cce:	98 a7       	std	Y+40, r25	; 0x28
    1cd0:	a9 a7       	std	Y+41, r26	; 0x29
    1cd2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cda:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	4a e7       	ldi	r20, 0x7A	; 122
    1ce2:	55 e4       	ldi	r21, 0x45	; 69
    1ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	8b a3       	std	Y+35, r24	; 0x23
    1cee:	9c a3       	std	Y+36, r25	; 0x24
    1cf0:	ad a3       	std	Y+37, r26	; 0x25
    1cf2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cf4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfa:	9e a1       	ldd	r25, Y+38	; 0x26
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <H_Lcd_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9a a3       	std	Y+34, r25	; 0x22
    1d12:	89 a3       	std	Y+33, r24	; 0x21
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <H_Lcd_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    1d16:	6b a1       	ldd	r22, Y+35	; 0x23
    1d18:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <H_Lcd_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d30:	78 a5       	ldd	r23, Y+40	; 0x28
    1d32:	89 a5       	ldd	r24, Y+41	; 0x29
    1d34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9a a3       	std	Y+34, r25	; 0x22
    1d54:	89 a3       	std	Y+33, r24	; 0x21
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <H_Lcd_Void_LCDWriteCommand+0x212>
    1d58:	80 e9       	ldi	r24, 0x90	; 144
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	98 a3       	std	Y+32, r25	; 0x20
    1d5e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d62:	98 a1       	ldd	r25, Y+32	; 0x20
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <H_Lcd_Void_LCDWriteCommand+0x200>
    1d68:	98 a3       	std	Y+32, r25	; 0x20
    1d6a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9a a3       	std	Y+34, r25	; 0x22
    1d74:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	89 a1       	ldd	r24, Y+33	; 0x21
    1d78:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <H_Lcd_Void_LCDWriteCommand+0x1f4>
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <H_Lcd_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	6b a1       	ldd	r22, Y+35	; 0x23
    1d82:	7c a1       	ldd	r23, Y+36	; 0x24
    1d84:	8d a1       	ldd	r24, Y+37	; 0x25
    1d86:	9e a1       	ldd	r25, Y+38	; 0x26
    1d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9a a3       	std	Y+34, r25	; 0x22
    1d92:	89 a3       	std	Y+33, r24	; 0x21
    1d94:	89 a1       	ldd	r24, Y+33	; 0x21
    1d96:	9a a1       	ldd	r25, Y+34	; 0x22
    1d98:	9e 8f       	std	Y+30, r25	; 0x1e
    1d9a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <H_Lcd_Void_LCDWriteCommand+0x23c>
    1da4:	9e 8f       	std	Y+30, r25	; 0x1e
    1da6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
    1da8:	89 ad       	ldd	r24, Y+57	; 0x39
    1daa:	98 2f       	mov	r25, r24
    1dac:	91 70       	andi	r25, 0x01	; 1
    1dae:	84 e1       	ldi	r24, 0x14	; 20
    1db0:	69 2f       	mov	r22, r25
    1db2:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
    1db6:	89 ad       	ldd	r24, Y+57	; 0x39
    1db8:	86 95       	lsr	r24
    1dba:	98 2f       	mov	r25, r24
    1dbc:	91 70       	andi	r25, 0x01	; 1
    1dbe:	85 e1       	ldi	r24, 0x15	; 21
    1dc0:	69 2f       	mov	r22, r25
    1dc2:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
    1dc6:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc8:	86 95       	lsr	r24
    1dca:	86 95       	lsr	r24
    1dcc:	98 2f       	mov	r25, r24
    1dce:	91 70       	andi	r25, 0x01	; 1
    1dd0:	86 e1       	ldi	r24, 0x16	; 22
    1dd2:	69 2f       	mov	r22, r25
    1dd4:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
    1dd8:	89 ad       	ldd	r24, Y+57	; 0x39
    1dda:	86 95       	lsr	r24
    1ddc:	86 95       	lsr	r24
    1dde:	86 95       	lsr	r24
    1de0:	98 2f       	mov	r25, r24
    1de2:	91 70       	andi	r25, 0x01	; 1
    1de4:	88 e1       	ldi	r24, 0x18	; 24
    1de6:	69 2f       	mov	r22, r25
    1de8:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    1dec:	8c e0       	ldi	r24, 0x0C	; 12
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e8       	ldi	r26, 0x80	; 128
    1dfa:	bf e3       	ldi	r27, 0x3F	; 63
    1dfc:	89 8f       	std	Y+25, r24	; 0x19
    1dfe:	9a 8f       	std	Y+26, r25	; 0x1a
    1e00:	ab 8f       	std	Y+27, r26	; 0x1b
    1e02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	69 8d       	ldd	r22, Y+25	; 0x19
    1e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a e7       	ldi	r20, 0x7A	; 122
    1e12:	55 e4       	ldi	r21, 0x45	; 69
    1e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8d 8b       	std	Y+21, r24	; 0x15
    1e1e:	9e 8b       	std	Y+22, r25	; 0x16
    1e20:	af 8b       	std	Y+23, r26	; 0x17
    1e22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <H_Lcd_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <H_Lcd_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    1e46:	6d 89       	ldd	r22, Y+21	; 0x15
    1e48:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <H_Lcd_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9c 8b       	std	Y+20, r25	; 0x14
    1e84:	8b 8b       	std	Y+19, r24	; 0x13
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <H_Lcd_Void_LCDWriteCommand+0x342>
    1e88:	80 e9       	ldi	r24, 0x90	; 144
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	9a 8b       	std	Y+18, r25	; 0x12
    1e8e:	89 8b       	std	Y+17, r24	; 0x11
    1e90:	89 89       	ldd	r24, Y+17	; 0x11
    1e92:	9a 89       	ldd	r25, Y+18	; 0x12
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <H_Lcd_Void_LCDWriteCommand+0x330>
    1e98:	9a 8b       	std	Y+18, r25	; 0x12
    1e9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <H_Lcd_Void_LCDWriteCommand+0x324>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <H_Lcd_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	8f 87       	std	Y+15, r24	; 0x0f
    1ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ece:	98 89       	ldd	r25, Y+16	; 0x10
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <H_Lcd_Void_LCDWriteCommand+0x36c>
    1ed4:	98 8b       	std	Y+16, r25	; 0x10
    1ed6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    1ed8:	8c e0       	ldi	r24, 0x0C	; 12
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	0e 94 b1 06 	call	0xd62	; 0xd62 <M_DIO_Void_SetPinValue>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ee6:	b0 e4       	ldi	r27, 0x40	; 64
    1ee8:	8b 87       	std	Y+11, r24	; 0x0b
    1eea:	9c 87       	std	Y+12, r25	; 0x0c
    1eec:	ad 87       	std	Y+13, r26	; 0x0d
    1eee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	55 e4       	ldi	r21, 0x45	; 69
    1f00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8f 83       	std	Y+7, r24	; 0x07
    1f0a:	98 87       	std	Y+8, r25	; 0x08
    1f0c:	a9 87       	std	Y+9, r26	; 0x09
    1f0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <H_Lcd_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <H_Lcd_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <H_Lcd_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <H_Lcd_Void_LCDWriteCommand+0x42e>
    1f74:	80 e9       	ldi	r24, 0x90	; 144
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <H_Lcd_Void_LCDWriteCommand+0x41c>
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <H_Lcd_Void_LCDWriteCommand+0x410>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <H_Lcd_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <H_Lcd_Void_LCDWriteCommand+0x458>
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
#endif
}
    1fc4:	e9 96       	adiw	r28, 0x39	; 57
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <H_Lcd_Void_LCDWriteString+0x6>
    1fdc:	0f 92       	push	r0
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	9b 83       	std	Y+3, r25	; 0x03
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <H_Lcd_Void_LCDWriteString+0x30>
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	80 81       	ld	r24, Z
    1ffc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	8f 5f       	subi	r24, 0xFF	; 255
    2004:	89 83       	std	Y+1, r24	; 0x01
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	fc 01       	movw	r30, r24
    2012:	e2 0f       	add	r30, r18
    2014:	f3 1f       	adc	r31, r19
    2016:	80 81       	ld	r24, Z
    2018:	88 23       	and	r24, r24
    201a:	39 f7       	brne	.-50     	; 0x1fea <H_Lcd_Void_LCDWriteString+0x14>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <H_Lcd_Void_LCDClear>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	2f 97       	sbiw	r28, 0x0f	; 15
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	6c 87       	std	Y+12, r22	; 0x0c
    2056:	7d 87       	std	Y+13, r23	; 0x0d
    2058:	8e 87       	std	Y+14, r24	; 0x0e
    205a:	9f 87       	std	Y+15, r25	; 0x0f
	s8 Local_S8_Counter = 0;
    205c:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    205e:	8a e0       	ldi	r24, 0x0A	; 10
    2060:	fe 01       	movw	r30, r28
    2062:	32 96       	adiw	r30, 0x02	; 2
    2064:	df 01       	movw	r26, r30
    2066:	98 2f       	mov	r25, r24
    2068:	1d 92       	st	X+, r1
    206a:	9a 95       	dec	r25
    206c:	e9 f7       	brne	.-6      	; 0x2068 <H_Lcd_Void_LCDWriteNumber+0x2c>
	if(Copy_S32_Number < 0)
    206e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2070:	9d 85       	ldd	r25, Y+13	; 0x0d
    2072:	ae 85       	ldd	r26, Y+14	; 0x0e
    2074:	bf 85       	ldd	r27, Y+15	; 0x0f
    2076:	bb 23       	and	r27, r27
    2078:	94 f4       	brge	.+36     	; 0x209e <H_Lcd_Void_LCDWriteNumber+0x62>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
    207a:	8c 85       	ldd	r24, Y+12	; 0x0c
    207c:	9d 85       	ldd	r25, Y+13	; 0x0d
    207e:	ae 85       	ldd	r26, Y+14	; 0x0e
    2080:	bf 85       	ldd	r27, Y+15	; 0x0f
    2082:	b0 95       	com	r27
    2084:	a0 95       	com	r26
    2086:	90 95       	com	r25
    2088:	81 95       	neg	r24
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	af 4f       	sbci	r26, 0xFF	; 255
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	8c 87       	std	Y+12, r24	; 0x0c
    2092:	9d 87       	std	Y+13, r25	; 0x0d
    2094:	ae 87       	std	Y+14, r26	; 0x0e
    2096:	bf 87       	std	Y+15, r27	; 0x0f
		H_Lcd_Void_LCDWriteCharacter('-');
    2098:	8d e2       	ldi	r24, 0x2D	; 45
    209a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	08 2f       	mov	r16, r24
    20a2:	11 27       	eor	r17, r17
    20a4:	07 fd       	sbrc	r16, 7
    20a6:	10 95       	com	r17
    20a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    20aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    20ac:	ae 85       	ldd	r26, Y+14	; 0x0e
    20ae:	bf 85       	ldd	r27, Y+15	; 0x0f
    20b0:	2a e0       	ldi	r18, 0x0A	; 10
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 94 12 	call	0x2528	; 0x2528 <__divmodsi4>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	28 2f       	mov	r18, r24
    20c6:	ce 01       	movw	r24, r28
    20c8:	02 96       	adiw	r24, 0x02	; 2
    20ca:	fc 01       	movw	r30, r24
    20cc:	e0 0f       	add	r30, r16
    20ce:	f1 1f       	adc	r31, r17
    20d0:	20 83       	st	Z, r18
		Copy_S32_Number                = Copy_S32_Number / 10;
    20d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    20d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    20d6:	ae 85       	ldd	r26, Y+14	; 0x0e
    20d8:	bf 85       	ldd	r27, Y+15	; 0x0f
    20da:	2a e0       	ldi	r18, 0x0A	; 10
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 94 12 	call	0x2528	; 0x2528 <__divmodsi4>
    20ea:	da 01       	movw	r26, r20
    20ec:	c9 01       	movw	r24, r18
    20ee:	8c 87       	std	Y+12, r24	; 0x0c
    20f0:	9d 87       	std	Y+13, r25	; 0x0d
    20f2:	ae 87       	std	Y+14, r26	; 0x0e
    20f4:	bf 87       	std	Y+15, r27	; 0x0f
		Local_S8_Counter++;
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	8f 5f       	subi	r24, 0xFF	; 255
    20fa:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_S32_Number != 0);
    20fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    20fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2100:	ae 85       	ldd	r26, Y+14	; 0x0e
    2102:	bf 85       	ldd	r27, Y+15	; 0x0f
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	a1 05       	cpc	r26, r1
    2108:	b1 05       	cpc	r27, r1
    210a:	49 f6       	brne	.-110    	; 0x209e <H_Lcd_Void_LCDWriteNumber+0x62>
    210c:	11 c0       	rjmp	.+34     	; 0x2130 <H_Lcd_Void_LCDWriteNumber+0xf4>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	81 50       	subi	r24, 0x01	; 1
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	28 2f       	mov	r18, r24
    2118:	33 27       	eor	r19, r19
    211a:	27 fd       	sbrc	r18, 7
    211c:	30 95       	com	r19
    211e:	ce 01       	movw	r24, r28
    2120:	02 96       	adiw	r24, 0x02	; 2
    2122:	fc 01       	movw	r30, r24
    2124:	e2 0f       	add	r30, r18
    2126:	f3 1f       	adc	r31, r19
    2128:	80 81       	ld	r24, Z
    212a:	80 5d       	subi	r24, 0xD0	; 208
    212c:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	18 16       	cp	r1, r24
    2134:	64 f3       	brlt	.-40     	; 0x210e <H_Lcd_Void_LCDWriteNumber+0xd2>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
    2136:	2f 96       	adiw	r28, 0x0f	; 15
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	08 95       	ret

0000214c <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <H_Lcd_Void_LCDGoTo+0x6>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <H_Lcd_Void_LCDGoTo+0x8>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <H_Lcd_Void_LCDGoTo+0xa>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	6e 83       	std	Y+6, r22	; 0x06
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    215e:	80 e8       	ldi	r24, 0x80	; 128
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	80 ec       	ldi	r24, 0xC0	; 192
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	84 e9       	ldi	r24, 0x94	; 148
    2168:	8b 83       	std	Y+3, r24	; 0x03
    216a:	84 ed       	ldi	r24, 0xD4	; 212
    216c:	8c 83       	std	Y+4, r24	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	ce 01       	movw	r24, r28
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	fc 01       	movw	r30, r24
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
    217e:	90 81       	ld	r25, Z
    2180:	8e 81       	ldd	r24, Y+6	; 0x06
    2182:	89 0f       	add	r24, r25
    2184:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <H_Lcd_Void_LCDWriteCommand>
}
    2188:	26 96       	adiw	r28, 0x06	; 6
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <main>:
#include"BitMath.h"

//#define NULL '/0'

int main()
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	a0 97       	sbiw	r28, 0x20	; 32
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
	H_Lcd_Void_LCDInit();
    21ae:	0e 94 48 0b 	call	0x1690	; 0x1690 <H_Lcd_Void_LCDInit>
	H_KeyPad_Void_KeyPadInit();
    21b2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <H_KeyPad_Void_KeyPadInit>
	u8 button_val = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	8b 87       	std	Y+11, r24	; 0x0b
	s32 right_val = 0;
    21ba:	1f 82       	std	Y+7, r1	; 0x07
    21bc:	18 86       	std	Y+8, r1	; 0x08
    21be:	19 86       	std	Y+9, r1	; 0x09
    21c0:	1a 86       	std	Y+10, r1	; 0x0a
	s32 left_val =  0;
    21c2:	1b 82       	std	Y+3, r1	; 0x03
    21c4:	1c 82       	std	Y+4, r1	; 0x04
    21c6:	1d 82       	std	Y+5, r1	; 0x05
    21c8:	1e 82       	std	Y+6, r1	; 0x06
	u8 operation = NULL;
    21ca:	1a 82       	std	Y+2, r1	; 0x02
	u8 sign = NULL;
    21cc:	19 82       	std	Y+1, r1	; 0x01
	//u8 degree = 1;
	while(1)
	{
		 button_val = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	8b 87       	std	Y+11, r24	; 0x0b
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <main+0x40>
		while(button_val ==1)
		{
			button_val = H_KeyPad_U8_KeyPadRead();
    21d4:	0e 94 27 0a 	call	0x144e	; 0x144e <H_KeyPad_U8_KeyPadRead>
    21d8:	8b 87       	std	Y+11, r24	; 0x0b
	u8 sign = NULL;
	//u8 degree = 1;
	while(1)
	{
		 button_val = 1;
		while(button_val ==1)
    21da:	8b 85       	ldd	r24, Y+11	; 0x0b
    21dc:	81 30       	cpi	r24, 0x01	; 1
    21de:	d1 f3       	breq	.-12     	; 0x21d4 <main+0x3a>
		{
			button_val = H_KeyPad_U8_KeyPadRead();

		}

		switch(button_val)
    21e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	3b 8f       	std	Y+27, r19	; 0x1b
    21e8:	2a 8f       	std	Y+26, r18	; 0x1a
    21ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21ee:	8f 32       	cpi	r24, 0x2F	; 47
    21f0:	91 05       	cpc	r25, r1
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <main+0x5c>
    21f4:	41 c0       	rjmp	.+130    	; 0x2278 <main+0xde>
    21f6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    21f8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    21fa:	a0 33       	cpi	r26, 0x30	; 48
    21fc:	b1 05       	cpc	r27, r1
    21fe:	84 f4       	brge	.+32     	; 0x2220 <main+0x86>
    2200:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2202:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2204:	eb 32       	cpi	r30, 0x2B	; 43
    2206:	f1 05       	cpc	r31, r1
    2208:	59 f1       	breq	.+86     	; 0x2260 <main+0xc6>
    220a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    220c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    220e:	2d 32       	cpi	r18, 0x2D	; 45
    2210:	31 05       	cpc	r19, r1
    2212:	91 f0       	breq	.+36     	; 0x2238 <main+0x9e>
    2214:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2216:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2218:	8a 32       	cpi	r24, 0x2A	; 42
    221a:	91 05       	cpc	r25, r1
    221c:	39 f1       	breq	.+78     	; 0x226c <main+0xd2>
    221e:	00 c1       	rjmp	.+512    	; 0x2420 <main+0x286>
    2220:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2222:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2224:	ad 33       	cpi	r26, 0x3D	; 61
    2226:	b1 05       	cpc	r27, r1
    2228:	69 f1       	breq	.+90     	; 0x2284 <main+0xea>
    222a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    222c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    222e:	e3 34       	cpi	r30, 0x43	; 67
    2230:	f1 05       	cpc	r31, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <main+0x9c>
    2234:	e9 c0       	rjmp	.+466    	; 0x2408 <main+0x26e>
    2236:	f4 c0       	rjmp	.+488    	; 0x2420 <main+0x286>
		{
		case '-':
			if(right_val==0)
    2238:	8f 81       	ldd	r24, Y+7	; 0x07
    223a:	98 85       	ldd	r25, Y+8	; 0x08
    223c:	a9 85       	ldd	r26, Y+9	; 0x09
    223e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	a1 05       	cpc	r26, r1
    2244:	b1 05       	cpc	r27, r1
    2246:	31 f4       	brne	.+12     	; 0x2254 <main+0xba>
			{
				sign ='-';
    2248:	8d e2       	ldi	r24, 0x2D	; 45
    224a:	89 83       	std	Y+1, r24	; 0x01
				H_Lcd_Void_LCDWriteCharacter(button_val);
    224c:	8b 85       	ldd	r24, Y+11	; 0x0b
    224e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
    2252:	bd cf       	rjmp	.-134    	; 0x21ce <main+0x34>
				break;
			}
			operation = button_val;
    2254:	8b 85       	ldd	r24, Y+11	; 0x0b
    2256:	8a 83       	std	Y+2, r24	; 0x02
			H_Lcd_Void_LCDWriteCharacter(button_val);
    2258:	8b 85       	ldd	r24, Y+11	; 0x0b
    225a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
    225e:	b7 cf       	rjmp	.-146    	; 0x21ce <main+0x34>
			break;
		case '+':
			operation = button_val;
    2260:	8b 85       	ldd	r24, Y+11	; 0x0b
    2262:	8a 83       	std	Y+2, r24	; 0x02
			H_Lcd_Void_LCDWriteCharacter(button_val);
    2264:	8b 85       	ldd	r24, Y+11	; 0x0b
    2266:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
    226a:	b1 cf       	rjmp	.-158    	; 0x21ce <main+0x34>
			break;
		case '*':
			operation = button_val;
    226c:	8b 85       	ldd	r24, Y+11	; 0x0b
    226e:	8a 83       	std	Y+2, r24	; 0x02
			H_Lcd_Void_LCDWriteCharacter(button_val);
    2270:	8b 85       	ldd	r24, Y+11	; 0x0b
    2272:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
    2276:	ab cf       	rjmp	.-170    	; 0x21ce <main+0x34>
			break;
		case '/':
			operation = button_val;
    2278:	8b 85       	ldd	r24, Y+11	; 0x0b
    227a:	8a 83       	std	Y+2, r24	; 0x02
			H_Lcd_Void_LCDWriteCharacter(button_val);
    227c:	8b 85       	ldd	r24, Y+11	; 0x0b
    227e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
    2282:	a5 cf       	rjmp	.-182    	; 0x21ce <main+0x34>
			break;
		case '=':
			if(sign == '-')
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	8d 32       	cpi	r24, 0x2D	; 45
    2288:	81 f4       	brne	.+32     	; 0x22aa <main+0x110>
			{
				right_val *= -1;
    228a:	8f 81       	ldd	r24, Y+7	; 0x07
    228c:	98 85       	ldd	r25, Y+8	; 0x08
    228e:	a9 85       	ldd	r26, Y+9	; 0x09
    2290:	ba 85       	ldd	r27, Y+10	; 0x0a
    2292:	b0 95       	com	r27
    2294:	a0 95       	com	r26
    2296:	90 95       	com	r25
    2298:	81 95       	neg	r24
    229a:	9f 4f       	sbci	r25, 0xFF	; 255
    229c:	af 4f       	sbci	r26, 0xFF	; 255
    229e:	bf 4f       	sbci	r27, 0xFF	; 255
    22a0:	8f 83       	std	Y+7, r24	; 0x07
    22a2:	98 87       	std	Y+8, r25	; 0x08
    22a4:	a9 87       	std	Y+9, r26	; 0x09
    22a6:	ba 87       	std	Y+10, r27	; 0x0a
				sign =NULL;
    22a8:	19 82       	std	Y+1, r1	; 0x01
			}
			H_Lcd_Void_LCDWriteCharacter(button_val);
    22aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ac:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
			switch(operation)
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	39 8f       	std	Y+25, r19	; 0x19
    22b8:	28 8f       	std	Y+24, r18	; 0x18
    22ba:	88 8d       	ldd	r24, Y+24	; 0x18
    22bc:	99 8d       	ldd	r25, Y+25	; 0x19
    22be:	8b 32       	cpi	r24, 0x2B	; 43
    22c0:	91 05       	cpc	r25, r1
    22c2:	b1 f0       	breq	.+44     	; 0x22f0 <main+0x156>
    22c4:	a8 8d       	ldd	r26, Y+24	; 0x18
    22c6:	b9 8d       	ldd	r27, Y+25	; 0x19
    22c8:	ac 32       	cpi	r26, 0x2C	; 44
    22ca:	b1 05       	cpc	r27, r1
    22cc:	34 f4       	brge	.+12     	; 0x22da <main+0x140>
    22ce:	e8 8d       	ldd	r30, Y+24	; 0x18
    22d0:	f9 8d       	ldd	r31, Y+25	; 0x19
    22d2:	ea 32       	cpi	r30, 0x2A	; 42
    22d4:	f1 05       	cpc	r31, r1
    22d6:	71 f1       	breq	.+92     	; 0x2334 <main+0x19a>
    22d8:	87 c0       	rjmp	.+270    	; 0x23e8 <main+0x24e>
    22da:	28 8d       	ldd	r18, Y+24	; 0x18
    22dc:	39 8d       	ldd	r19, Y+25	; 0x19
    22de:	2d 32       	cpi	r18, 0x2D	; 45
    22e0:	31 05       	cpc	r19, r1
    22e2:	b9 f0       	breq	.+46     	; 0x2312 <main+0x178>
    22e4:	88 8d       	ldd	r24, Y+24	; 0x18
    22e6:	99 8d       	ldd	r25, Y+25	; 0x19
    22e8:	8f 32       	cpi	r24, 0x2F	; 47
    22ea:	91 05       	cpc	r25, r1
    22ec:	b1 f1       	breq	.+108    	; 0x235a <main+0x1c0>
    22ee:	7c c0       	rjmp	.+248    	; 0x23e8 <main+0x24e>
			{
			case '+':
				H_Lcd_Void_LCDWriteNumber(right_val + left_val);
    22f0:	8f 81       	ldd	r24, Y+7	; 0x07
    22f2:	98 85       	ldd	r25, Y+8	; 0x08
    22f4:	a9 85       	ldd	r26, Y+9	; 0x09
    22f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    22f8:	2b 81       	ldd	r18, Y+3	; 0x03
    22fa:	3c 81       	ldd	r19, Y+4	; 0x04
    22fc:	4d 81       	ldd	r20, Y+5	; 0x05
    22fe:	5e 81       	ldd	r21, Y+6	; 0x06
    2300:	82 0f       	add	r24, r18
    2302:	93 1f       	adc	r25, r19
    2304:	a4 1f       	adc	r26, r20
    2306:	b5 1f       	adc	r27, r21
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 1e 10 	call	0x203c	; 0x203c <H_Lcd_Void_LCDWriteNumber>
    2310:	6b c0       	rjmp	.+214    	; 0x23e8 <main+0x24e>
				break;
			case '-':
				H_Lcd_Void_LCDWriteNumber(right_val - left_val);
    2312:	8f 81       	ldd	r24, Y+7	; 0x07
    2314:	98 85       	ldd	r25, Y+8	; 0x08
    2316:	a9 85       	ldd	r26, Y+9	; 0x09
    2318:	ba 85       	ldd	r27, Y+10	; 0x0a
    231a:	2b 81       	ldd	r18, Y+3	; 0x03
    231c:	3c 81       	ldd	r19, Y+4	; 0x04
    231e:	4d 81       	ldd	r20, Y+5	; 0x05
    2320:	5e 81       	ldd	r21, Y+6	; 0x06
    2322:	82 1b       	sub	r24, r18
    2324:	93 0b       	sbc	r25, r19
    2326:	a4 0b       	sbc	r26, r20
    2328:	b5 0b       	sbc	r27, r21
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 1e 10 	call	0x203c	; 0x203c <H_Lcd_Void_LCDWriteNumber>
    2332:	5a c0       	rjmp	.+180    	; 0x23e8 <main+0x24e>
				break;
			case '*':
				H_Lcd_Void_LCDWriteNumber(right_val * left_val);
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	98 85       	ldd	r25, Y+8	; 0x08
    2338:	a9 85       	ldd	r26, Y+9	; 0x09
    233a:	ba 85       	ldd	r27, Y+10	; 0x0a
    233c:	2b 81       	ldd	r18, Y+3	; 0x03
    233e:	3c 81       	ldd	r19, Y+4	; 0x04
    2340:	4d 81       	ldd	r20, Y+5	; 0x05
    2342:	5e 81       	ldd	r21, Y+6	; 0x06
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__mulsi3>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 1e 10 	call	0x203c	; 0x203c <H_Lcd_Void_LCDWriteNumber>
    2358:	47 c0       	rjmp	.+142    	; 0x23e8 <main+0x24e>
				break;
			case '/':
				if(left_val == 0)
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	ad 81       	ldd	r26, Y+5	; 0x05
    2360:	be 81       	ldd	r27, Y+6	; 0x06
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	a1 05       	cpc	r26, r1
    2366:	b1 05       	cpc	r27, r1
    2368:	69 f5       	brne	.+90     	; 0x23c4 <main+0x22a>
				{
					u8 infi[12] = "infinity";
    236a:	de 01       	movw	r26, r28
    236c:	1c 96       	adiw	r26, 0x0c	; 12
    236e:	bd 8f       	std	Y+29, r27	; 0x1d
    2370:	ac 8f       	std	Y+28, r26	; 0x1c
    2372:	e0 e6       	ldi	r30, 0x60	; 96
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	ff 8f       	std	Y+31, r31	; 0x1f
    2378:	ee 8f       	std	Y+30, r30	; 0x1e
    237a:	f9 e0       	ldi	r31, 0x09	; 9
    237c:	f8 a3       	std	Y+32, r31	; 0x20
    237e:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2380:	bf 8d       	ldd	r27, Y+31	; 0x1f
    2382:	0c 90       	ld	r0, X
    2384:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2386:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2388:	31 96       	adiw	r30, 0x01	; 1
    238a:	ff 8f       	std	Y+31, r31	; 0x1f
    238c:	ee 8f       	std	Y+30, r30	; 0x1e
    238e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2390:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2392:	0c 92       	st	X, r0
    2394:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2396:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2398:	31 96       	adiw	r30, 0x01	; 1
    239a:	fd 8f       	std	Y+29, r31	; 0x1d
    239c:	ec 8f       	std	Y+28, r30	; 0x1c
    239e:	f8 a1       	ldd	r31, Y+32	; 0x20
    23a0:	f1 50       	subi	r31, 0x01	; 1
    23a2:	f8 a3       	std	Y+32, r31	; 0x20
    23a4:	28 a1       	ldd	r18, Y+32	; 0x20
    23a6:	22 23       	and	r18, r18
    23a8:	51 f7       	brne	.-44     	; 0x237e <main+0x1e4>
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	fe 01       	movw	r30, r28
    23ae:	75 96       	adiw	r30, 0x15	; 21
    23b0:	df 01       	movw	r26, r30
    23b2:	28 2f       	mov	r18, r24
    23b4:	1d 92       	st	X+, r1
    23b6:	2a 95       	dec	r18
    23b8:	e9 f7       	brne	.-6      	; 0x23b4 <main+0x21a>
					H_Lcd_Void_LCDWriteString(infi);
    23ba:	ce 01       	movw	r24, r28
    23bc:	0c 96       	adiw	r24, 0x0c	; 12
    23be:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_Lcd_Void_LCDWriteString>
    23c2:	12 c0       	rjmp	.+36     	; 0x23e8 <main+0x24e>
					break;
				}
				else
				{
					H_Lcd_Void_LCDWriteNumber(right_val / left_val);
    23c4:	8f 81       	ldd	r24, Y+7	; 0x07
    23c6:	98 85       	ldd	r25, Y+8	; 0x08
    23c8:	a9 85       	ldd	r26, Y+9	; 0x09
    23ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	4d 81       	ldd	r20, Y+5	; 0x05
    23d2:	5e 81       	ldd	r21, Y+6	; 0x06
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 94 12 	call	0x2528	; 0x2528 <__divmodsi4>
    23dc:	da 01       	movw	r26, r20
    23de:	c9 01       	movw	r24, r18
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 1e 10 	call	0x203c	; 0x203c <H_Lcd_Void_LCDWriteNumber>
					break;
				}

			}
			right_val = 0;
    23e8:	1f 82       	std	Y+7, r1	; 0x07
    23ea:	18 86       	std	Y+8, r1	; 0x08
    23ec:	19 86       	std	Y+9, r1	; 0x09
    23ee:	1a 86       	std	Y+10, r1	; 0x0a
			left_val = 0;
    23f0:	1b 82       	std	Y+3, r1	; 0x03
    23f2:	1c 82       	std	Y+4, r1	; 0x04
    23f4:	1d 82       	std	Y+5, r1	; 0x05
    23f6:	1e 82       	std	Y+6, r1	; 0x06
			operation = NULL;
    23f8:	1a 82       	std	Y+2, r1	; 0x02

			while(H_KeyPad_U8_KeyPadRead() ==1);
    23fa:	0e 94 27 0a 	call	0x144e	; 0x144e <H_KeyPad_U8_KeyPadRead>
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	e1 f3       	breq	.-8      	; 0x23fa <main+0x260>
			H_Lcd_Void_LCDClear();
    2402:	0e 94 14 10 	call	0x2028	; 0x2028 <H_Lcd_Void_LCDClear>
    2406:	e3 ce       	rjmp	.-570    	; 0x21ce <main+0x34>
			break;

		case 'C':
			H_Lcd_Void_LCDClear();
    2408:	0e 94 14 10 	call	0x2028	; 0x2028 <H_Lcd_Void_LCDClear>
			right_val = 0;
    240c:	1f 82       	std	Y+7, r1	; 0x07
    240e:	18 86       	std	Y+8, r1	; 0x08
    2410:	19 86       	std	Y+9, r1	; 0x09
    2412:	1a 86       	std	Y+10, r1	; 0x0a
			left_val = 0;
    2414:	1b 82       	std	Y+3, r1	; 0x03
    2416:	1c 82       	std	Y+4, r1	; 0x04
    2418:	1d 82       	std	Y+5, r1	; 0x05
    241a:	1e 82       	std	Y+6, r1	; 0x06
			operation = NULL;
    241c:	1a 82       	std	Y+2, r1	; 0x02
    241e:	d7 ce       	rjmp	.-594    	; 0x21ce <main+0x34>
			break;
		default:
			if(operation == NULL)
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	88 23       	and	r24, r24
    2424:	59 f5       	brne	.+86     	; 0x247c <main+0x2e2>
			{
				H_Lcd_Void_LCDWriteCharacter(button_val);
    2426:	8b 85       	ldd	r24, Y+11	; 0x0b
    2428:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
				right_val *= 10;
    242c:	8f 81       	ldd	r24, Y+7	; 0x07
    242e:	98 85       	ldd	r25, Y+8	; 0x08
    2430:	a9 85       	ldd	r26, Y+9	; 0x09
    2432:	ba 85       	ldd	r27, Y+10	; 0x0a
    2434:	2a e0       	ldi	r18, 0x0A	; 10
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__mulsi3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	8f 83       	std	Y+7, r24	; 0x07
    244a:	98 87       	std	Y+8, r25	; 0x08
    244c:	a9 87       	std	Y+9, r26	; 0x09
    244e:	ba 87       	std	Y+10, r27	; 0x0a
				right_val += (int)(button_val-'0') ;
    2450:	8b 85       	ldd	r24, Y+11	; 0x0b
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	c0 97       	sbiw	r24, 0x30	; 48
    2458:	9c 01       	movw	r18, r24
    245a:	44 27       	eor	r20, r20
    245c:	37 fd       	sbrc	r19, 7
    245e:	40 95       	com	r20
    2460:	54 2f       	mov	r21, r20
    2462:	8f 81       	ldd	r24, Y+7	; 0x07
    2464:	98 85       	ldd	r25, Y+8	; 0x08
    2466:	a9 85       	ldd	r26, Y+9	; 0x09
    2468:	ba 85       	ldd	r27, Y+10	; 0x0a
    246a:	82 0f       	add	r24, r18
    246c:	93 1f       	adc	r25, r19
    246e:	a4 1f       	adc	r26, r20
    2470:	b5 1f       	adc	r27, r21
    2472:	8f 83       	std	Y+7, r24	; 0x07
    2474:	98 87       	std	Y+8, r25	; 0x08
    2476:	a9 87       	std	Y+9, r26	; 0x09
    2478:	ba 87       	std	Y+10, r27	; 0x0a
    247a:	a9 ce       	rjmp	.-686    	; 0x21ce <main+0x34>
			}
			else
			{
				H_Lcd_Void_LCDWriteCharacter(button_val);
    247c:	8b 85       	ldd	r24, Y+11	; 0x0b
    247e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <H_Lcd_Void_LCDWriteCharacter>
				left_val *= 10;
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	9c 81       	ldd	r25, Y+4	; 0x04
    2486:	ad 81       	ldd	r26, Y+5	; 0x05
    2488:	be 81       	ldd	r27, Y+6	; 0x06
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__mulsi3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	ad 83       	std	Y+5, r26	; 0x05
    24a4:	be 83       	std	Y+6, r27	; 0x06
				left_val += (int)(button_val-'0');
    24a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	c0 97       	sbiw	r24, 0x30	; 48
    24ae:	9c 01       	movw	r18, r24
    24b0:	44 27       	eor	r20, r20
    24b2:	37 fd       	sbrc	r19, 7
    24b4:	40 95       	com	r20
    24b6:	54 2f       	mov	r21, r20
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	ad 81       	ldd	r26, Y+5	; 0x05
    24be:	be 81       	ldd	r27, Y+6	; 0x06
    24c0:	82 0f       	add	r24, r18
    24c2:	93 1f       	adc	r25, r19
    24c4:	a4 1f       	adc	r26, r20
    24c6:	b5 1f       	adc	r27, r21
    24c8:	8b 83       	std	Y+3, r24	; 0x03
    24ca:	9c 83       	std	Y+4, r25	; 0x04
    24cc:	ad 83       	std	Y+5, r26	; 0x05
    24ce:	be 83       	std	Y+6, r27	; 0x06
    24d0:	7e ce       	rjmp	.-772    	; 0x21ce <main+0x34>

000024d2 <__mulsi3>:
    24d2:	62 9f       	mul	r22, r18
    24d4:	d0 01       	movw	r26, r0
    24d6:	73 9f       	mul	r23, r19
    24d8:	f0 01       	movw	r30, r0
    24da:	82 9f       	mul	r24, r18
    24dc:	e0 0d       	add	r30, r0
    24de:	f1 1d       	adc	r31, r1
    24e0:	64 9f       	mul	r22, r20
    24e2:	e0 0d       	add	r30, r0
    24e4:	f1 1d       	adc	r31, r1
    24e6:	92 9f       	mul	r25, r18
    24e8:	f0 0d       	add	r31, r0
    24ea:	83 9f       	mul	r24, r19
    24ec:	f0 0d       	add	r31, r0
    24ee:	74 9f       	mul	r23, r20
    24f0:	f0 0d       	add	r31, r0
    24f2:	65 9f       	mul	r22, r21
    24f4:	f0 0d       	add	r31, r0
    24f6:	99 27       	eor	r25, r25
    24f8:	72 9f       	mul	r23, r18
    24fa:	b0 0d       	add	r27, r0
    24fc:	e1 1d       	adc	r30, r1
    24fe:	f9 1f       	adc	r31, r25
    2500:	63 9f       	mul	r22, r19
    2502:	b0 0d       	add	r27, r0
    2504:	e1 1d       	adc	r30, r1
    2506:	f9 1f       	adc	r31, r25
    2508:	bd 01       	movw	r22, r26
    250a:	cf 01       	movw	r24, r30
    250c:	11 24       	eor	r1, r1
    250e:	08 95       	ret

00002510 <__udivmodqi4>:
    2510:	99 1b       	sub	r25, r25
    2512:	79 e0       	ldi	r23, 0x09	; 9
    2514:	04 c0       	rjmp	.+8      	; 0x251e <__udivmodqi4_ep>

00002516 <__udivmodqi4_loop>:
    2516:	99 1f       	adc	r25, r25
    2518:	96 17       	cp	r25, r22
    251a:	08 f0       	brcs	.+2      	; 0x251e <__udivmodqi4_ep>
    251c:	96 1b       	sub	r25, r22

0000251e <__udivmodqi4_ep>:
    251e:	88 1f       	adc	r24, r24
    2520:	7a 95       	dec	r23
    2522:	c9 f7       	brne	.-14     	; 0x2516 <__udivmodqi4_loop>
    2524:	80 95       	com	r24
    2526:	08 95       	ret

00002528 <__divmodsi4>:
    2528:	97 fb       	bst	r25, 7
    252a:	09 2e       	mov	r0, r25
    252c:	05 26       	eor	r0, r21
    252e:	0e d0       	rcall	.+28     	; 0x254c <__divmodsi4_neg1>
    2530:	57 fd       	sbrc	r21, 7
    2532:	04 d0       	rcall	.+8      	; 0x253c <__divmodsi4_neg2>
    2534:	14 d0       	rcall	.+40     	; 0x255e <__udivmodsi4>
    2536:	0a d0       	rcall	.+20     	; 0x254c <__divmodsi4_neg1>
    2538:	00 1c       	adc	r0, r0
    253a:	38 f4       	brcc	.+14     	; 0x254a <__divmodsi4_exit>

0000253c <__divmodsi4_neg2>:
    253c:	50 95       	com	r21
    253e:	40 95       	com	r20
    2540:	30 95       	com	r19
    2542:	21 95       	neg	r18
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	4f 4f       	sbci	r20, 0xFF	; 255
    2548:	5f 4f       	sbci	r21, 0xFF	; 255

0000254a <__divmodsi4_exit>:
    254a:	08 95       	ret

0000254c <__divmodsi4_neg1>:
    254c:	f6 f7       	brtc	.-4      	; 0x254a <__divmodsi4_exit>
    254e:	90 95       	com	r25
    2550:	80 95       	com	r24
    2552:	70 95       	com	r23
    2554:	61 95       	neg	r22
    2556:	7f 4f       	sbci	r23, 0xFF	; 255
    2558:	8f 4f       	sbci	r24, 0xFF	; 255
    255a:	9f 4f       	sbci	r25, 0xFF	; 255
    255c:	08 95       	ret

0000255e <__udivmodsi4>:
    255e:	a1 e2       	ldi	r26, 0x21	; 33
    2560:	1a 2e       	mov	r1, r26
    2562:	aa 1b       	sub	r26, r26
    2564:	bb 1b       	sub	r27, r27
    2566:	fd 01       	movw	r30, r26
    2568:	0d c0       	rjmp	.+26     	; 0x2584 <__udivmodsi4_ep>

0000256a <__udivmodsi4_loop>:
    256a:	aa 1f       	adc	r26, r26
    256c:	bb 1f       	adc	r27, r27
    256e:	ee 1f       	adc	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	a2 17       	cp	r26, r18
    2574:	b3 07       	cpc	r27, r19
    2576:	e4 07       	cpc	r30, r20
    2578:	f5 07       	cpc	r31, r21
    257a:	20 f0       	brcs	.+8      	; 0x2584 <__udivmodsi4_ep>
    257c:	a2 1b       	sub	r26, r18
    257e:	b3 0b       	sbc	r27, r19
    2580:	e4 0b       	sbc	r30, r20
    2582:	f5 0b       	sbc	r31, r21

00002584 <__udivmodsi4_ep>:
    2584:	66 1f       	adc	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	88 1f       	adc	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	1a 94       	dec	r1
    258e:	69 f7       	brne	.-38     	; 0x256a <__udivmodsi4_loop>
    2590:	60 95       	com	r22
    2592:	70 95       	com	r23
    2594:	80 95       	com	r24
    2596:	90 95       	com	r25
    2598:	9b 01       	movw	r18, r22
    259a:	ac 01       	movw	r20, r24
    259c:	bd 01       	movw	r22, r26
    259e:	cf 01       	movw	r24, r30
    25a0:	08 95       	ret

000025a2 <__prologue_saves__>:
    25a2:	2f 92       	push	r2
    25a4:	3f 92       	push	r3
    25a6:	4f 92       	push	r4
    25a8:	5f 92       	push	r5
    25aa:	6f 92       	push	r6
    25ac:	7f 92       	push	r7
    25ae:	8f 92       	push	r8
    25b0:	9f 92       	push	r9
    25b2:	af 92       	push	r10
    25b4:	bf 92       	push	r11
    25b6:	cf 92       	push	r12
    25b8:	df 92       	push	r13
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	ca 1b       	sub	r28, r26
    25cc:	db 0b       	sbc	r29, r27
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	09 94       	ijmp

000025da <__epilogue_restores__>:
    25da:	2a 88       	ldd	r2, Y+18	; 0x12
    25dc:	39 88       	ldd	r3, Y+17	; 0x11
    25de:	48 88       	ldd	r4, Y+16	; 0x10
    25e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    25e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    25e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    25ec:	b9 84       	ldd	r11, Y+9	; 0x09
    25ee:	c8 84       	ldd	r12, Y+8	; 0x08
    25f0:	df 80       	ldd	r13, Y+7	; 0x07
    25f2:	ee 80       	ldd	r14, Y+6	; 0x06
    25f4:	fd 80       	ldd	r15, Y+5	; 0x05
    25f6:	0c 81       	ldd	r16, Y+4	; 0x04
    25f8:	1b 81       	ldd	r17, Y+3	; 0x03
    25fa:	aa 81       	ldd	r26, Y+2	; 0x02
    25fc:	b9 81       	ldd	r27, Y+1	; 0x01
    25fe:	ce 0f       	add	r28, r30
    2600:	d1 1d       	adc	r29, r1
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	ed 01       	movw	r28, r26
    260e:	08 95       	ret

00002610 <_exit>:
    2610:	f8 94       	cli

00002612 <__stop_program>:
    2612:	ff cf       	rjmp	.-2      	; 0x2612 <__stop_program>
