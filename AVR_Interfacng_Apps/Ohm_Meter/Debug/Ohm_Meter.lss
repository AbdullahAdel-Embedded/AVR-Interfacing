
Ohm_Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000024d2  00002546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001740  00000000  00000000  00002660  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a65  00000000  00000000  00003da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004805  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000049a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00004b97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00006fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00008328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00009500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  000096c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  000099b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 25 11 	call	0x224a	; 0x224a <main>
      7a:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e6       	ldi	r26, 0x6F	; 111
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e6       	ldi	r24, 0x6F	; 111
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e6       	ldi	r22, 0x6F	; 111
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 40 12 	jmp	0x2480	; 0x2480 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e9 58       	subi	r30, 0x89	; 137
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <M_DIO_VOID_SetPinDirection>:

	return 0;
}*/

void M_DIO_VOID_SetPinDirection(u8 PORT_PIN, u8 U8_Copy_State)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	28 97       	sbiw	r28, 0x08	; 8
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	8b 83       	std	Y+3, r24	; 0x03
     e34:	6c 83       	std	Y+4, r22	; 0x04

	u8 PIN_NUM = PORT_PIN %10;
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9a e0       	ldi	r25, 0x0A	; 10
     e3a:	69 2f       	mov	r22, r25
     e3c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
     e40:	89 2f       	mov	r24, r25
     e42:	8a 83       	std	Y+2, r24	; 0x02
	u8 PORT_NUM = PORT_PIN /10;
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	9a e0       	ldi	r25, 0x0A	; 10
     e48:	69 2f       	mov	r22, r25
     e4a:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
     e4e:	89 83       	std	Y+1, r24	; 0x01

    if(U8_Copy_State == Output)
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	09 f0       	breq	.+2      	; 0xe58 <M_DIO_VOID_SetPinDirection+0x3a>
     e56:	70 c0       	rjmp	.+224    	; 0xf38 <M_DIO_VOID_SetPinDirection+0x11a>
    {
        switch(PORT_NUM)
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	38 87       	std	Y+8, r19	; 0x08
     e60:	2f 83       	std	Y+7, r18	; 0x07
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	91 05       	cpc	r25, r1
     e6a:	51 f1       	breq	.+84     	; 0xec0 <M_DIO_VOID_SetPinDirection+0xa2>
     e6c:	2f 81       	ldd	r18, Y+7	; 0x07
     e6e:	38 85       	ldd	r19, Y+8	; 0x08
     e70:	23 30       	cpi	r18, 0x03	; 3
     e72:	31 05       	cpc	r19, r1
     e74:	34 f4       	brge	.+12     	; 0xe82 <M_DIO_VOID_SetPinDirection+0x64>
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	61 f0       	breq	.+24     	; 0xe98 <M_DIO_VOID_SetPinDirection+0x7a>
     e80:	ce c0       	rjmp	.+412    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
     e82:	2f 81       	ldd	r18, Y+7	; 0x07
     e84:	38 85       	ldd	r19, Y+8	; 0x08
     e86:	23 30       	cpi	r18, 0x03	; 3
     e88:	31 05       	cpc	r19, r1
     e8a:	71 f1       	breq	.+92     	; 0xee8 <M_DIO_VOID_SetPinDirection+0xca>
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	84 30       	cpi	r24, 0x04	; 4
     e92:	91 05       	cpc	r25, r1
     e94:	e9 f1       	breq	.+122    	; 0xf10 <M_DIO_VOID_SetPinDirection+0xf2>
     e96:	c3 c0       	rjmp	.+390    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        {
        case 1: DDRA_REG |= (1<<PIN_NUM);  break;
     e98:	aa e3       	ldi	r26, 0x3A	; 58
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ea e3       	ldi	r30, 0x3A	; 58
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <M_DIO_VOID_SetPinDirection+0x98>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <M_DIO_VOID_SetPinDirection+0x94>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	af c0       	rjmp	.+350    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        case 2: DDRB_REG |= (1<<PIN_NUM);  break;
     ec0:	a7 e3       	ldi	r26, 0x37	; 55
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e7 e3       	ldi	r30, 0x37	; 55
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <M_DIO_VOID_SetPinDirection+0xc0>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <M_DIO_VOID_SetPinDirection+0xbc>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	9b c0       	rjmp	.+310    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        case 3: DDRC_REG |= (1<<PIN_NUM); break;
     ee8:	a4 e3       	ldi	r26, 0x34	; 52
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e4 e3       	ldi	r30, 0x34	; 52
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <M_DIO_VOID_SetPinDirection+0xe8>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <M_DIO_VOID_SetPinDirection+0xe4>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	87 c0       	rjmp	.+270    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        case 4: DDRD_REG |= (1<<PIN_NUM); break;
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <M_DIO_VOID_SetPinDirection+0x110>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <M_DIO_VOID_SetPinDirection+0x10c>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	73 c0       	rjmp	.+230    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        }
    }

    else if(U8_Copy_State == Input)
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	88 23       	and	r24, r24
     f3c:	09 f0       	breq	.+2      	; 0xf40 <M_DIO_VOID_SetPinDirection+0x122>
     f3e:	6f c0       	rjmp	.+222    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
    {
        switch(PORT_NUM)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3e 83       	std	Y+6, r19	; 0x06
     f48:	2d 83       	std	Y+5, r18	; 0x05
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	91 05       	cpc	r25, r1
     f52:	51 f1       	breq	.+84     	; 0xfa8 <M_DIO_VOID_SetPinDirection+0x18a>
     f54:	2d 81       	ldd	r18, Y+5	; 0x05
     f56:	3e 81       	ldd	r19, Y+6	; 0x06
     f58:	23 30       	cpi	r18, 0x03	; 3
     f5a:	31 05       	cpc	r19, r1
     f5c:	34 f4       	brge	.+12     	; 0xf6a <M_DIO_VOID_SetPinDirection+0x14c>
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	91 05       	cpc	r25, r1
     f66:	61 f0       	breq	.+24     	; 0xf80 <M_DIO_VOID_SetPinDirection+0x162>
     f68:	5a c0       	rjmp	.+180    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
     f6a:	2d 81       	ldd	r18, Y+5	; 0x05
     f6c:	3e 81       	ldd	r19, Y+6	; 0x06
     f6e:	23 30       	cpi	r18, 0x03	; 3
     f70:	31 05       	cpc	r19, r1
     f72:	71 f1       	breq	.+92     	; 0xfd0 <M_DIO_VOID_SetPinDirection+0x1b2>
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	84 30       	cpi	r24, 0x04	; 4
     f7a:	91 05       	cpc	r25, r1
     f7c:	e9 f1       	breq	.+122    	; 0xff8 <M_DIO_VOID_SetPinDirection+0x1da>
     f7e:	4f c0       	rjmp	.+158    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        {
        case 1: DDRA_REG |= (1<<PIN_NUM);  break;
     f80:	aa e3       	ldi	r26, 0x3A	; 58
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e3       	ldi	r30, 0x3A	; 58
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <M_DIO_VOID_SetPinDirection+0x180>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <M_DIO_VOID_SetPinDirection+0x17c>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	3b c0       	rjmp	.+118    	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        case 2: DDRB_REG |= (1<<PIN_NUM);  break;
     fa8:	a7 e3       	ldi	r26, 0x37	; 55
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e7 e3       	ldi	r30, 0x37	; 55
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <M_DIO_VOID_SetPinDirection+0x1a8>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <M_DIO_VOID_SetPinDirection+0x1a4>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
     fce:	27 c0       	rjmp	.+78     	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        case 3: DDRC_REG |= (1<<PIN_NUM); break;
     fd0:	a4 e3       	ldi	r26, 0x34	; 52
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e4 e3       	ldi	r30, 0x34	; 52
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <M_DIO_VOID_SetPinDirection+0x1d0>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <M_DIO_VOID_SetPinDirection+0x1cc>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	13 c0       	rjmp	.+38     	; 0x101e <M_DIO_VOID_SetPinDirection+0x200>
        case 4: DDRD_REG |= (1<<PIN_NUM); break;
     ff8:	a1 e3       	ldi	r26, 0x31	; 49
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e1 e3       	ldi	r30, 0x31	; 49
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <M_DIO_VOID_SetPinDirection+0x1f8>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <M_DIO_VOID_SetPinDirection+0x1f4>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
        }
    }

}
    101e:	28 96       	adiw	r28, 0x08	; 8
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <M_DIO_Void_SetPinValue>:


void M_DIO_Void_SetPinValue(u8 PORT_PIN, u8 U8_Value)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	28 97       	sbiw	r28, 0x08	; 8
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	6c 83       	std	Y+4, r22	; 0x04
	u8 PIN_NUM = PORT_PIN %10;
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9a e0       	ldi	r25, 0x0A	; 10
    104c:	69 2f       	mov	r22, r25
    104e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
    1052:	89 2f       	mov	r24, r25
    1054:	8a 83       	std	Y+2, r24	; 0x02
	u8 PORT_NUM = PORT_PIN /10;
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9a e0       	ldi	r25, 0x0A	; 10
    105a:	69 2f       	mov	r22, r25
    105c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
    1060:	89 83       	std	Y+1, r24	; 0x01

    if(U8_Value == High)
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	09 f0       	breq	.+2      	; 0x106a <M_DIO_Void_SetPinValue+0x3a>
    1068:	70 c0       	rjmp	.+224    	; 0x114a <M_DIO_Void_SetPinValue+0x11a>
    {
        switch(PORT_NUM)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	38 87       	std	Y+8, r19	; 0x08
    1072:	2f 83       	std	Y+7, r18	; 0x07
    1074:	8f 81       	ldd	r24, Y+7	; 0x07
    1076:	98 85       	ldd	r25, Y+8	; 0x08
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	91 05       	cpc	r25, r1
    107c:	51 f1       	breq	.+84     	; 0x10d2 <M_DIO_Void_SetPinValue+0xa2>
    107e:	2f 81       	ldd	r18, Y+7	; 0x07
    1080:	38 85       	ldd	r19, Y+8	; 0x08
    1082:	23 30       	cpi	r18, 0x03	; 3
    1084:	31 05       	cpc	r19, r1
    1086:	34 f4       	brge	.+12     	; 0x1094 <M_DIO_Void_SetPinValue+0x64>
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	98 85       	ldd	r25, Y+8	; 0x08
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	61 f0       	breq	.+24     	; 0x10aa <M_DIO_Void_SetPinValue+0x7a>
    1092:	cf c0       	rjmp	.+414    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
    1094:	2f 81       	ldd	r18, Y+7	; 0x07
    1096:	38 85       	ldd	r19, Y+8	; 0x08
    1098:	23 30       	cpi	r18, 0x03	; 3
    109a:	31 05       	cpc	r19, r1
    109c:	71 f1       	breq	.+92     	; 0x10fa <M_DIO_Void_SetPinValue+0xca>
    109e:	8f 81       	ldd	r24, Y+7	; 0x07
    10a0:	98 85       	ldd	r25, Y+8	; 0x08
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	91 05       	cpc	r25, r1
    10a6:	e9 f1       	breq	.+122    	; 0x1122 <M_DIO_Void_SetPinValue+0xf2>
    10a8:	c4 c0       	rjmp	.+392    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        {
        case 1: SET_BIT(PORTA_REG, PIN_NUM); break;
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <M_DIO_Void_SetPinValue+0x98>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <M_DIO_Void_SetPinValue+0x94>
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	b0 c0       	rjmp	.+352    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        case 2: SET_BIT(PORTB_REG, PIN_NUM); break;
    10d2:	a8 e3       	ldi	r26, 0x38	; 56
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e3       	ldi	r30, 0x38	; 56
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <M_DIO_Void_SetPinValue+0xc0>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <M_DIO_Void_SetPinValue+0xbc>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	9c c0       	rjmp	.+312    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        case 3: SET_BIT(PORTC_REG, PIN_NUM); break;
    10fa:	a5 e3       	ldi	r26, 0x35	; 53
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e3       	ldi	r30, 0x35	; 53
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <M_DIO_Void_SetPinValue+0xe8>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <M_DIO_Void_SetPinValue+0xe4>
    111c:	84 2b       	or	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	88 c0       	rjmp	.+272    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        case 4: SET_BIT(PORTD_REG, PIN_NUM); break;
    1122:	a2 e3       	ldi	r26, 0x32	; 50
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e2 e3       	ldi	r30, 0x32	; 50
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <M_DIO_Void_SetPinValue+0x110>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <M_DIO_Void_SetPinValue+0x10c>
    1144:	84 2b       	or	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	74 c0       	rjmp	.+232    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        }
    }
    else
    {
        switch(PORT_NUM)
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	2d 83       	std	Y+5, r18	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	91 05       	cpc	r25, r1
    115c:	61 f1       	breq	.+88     	; 0x11b6 <M_DIO_Void_SetPinValue+0x186>
    115e:	2d 81       	ldd	r18, Y+5	; 0x05
    1160:	3e 81       	ldd	r19, Y+6	; 0x06
    1162:	23 30       	cpi	r18, 0x03	; 3
    1164:	31 05       	cpc	r19, r1
    1166:	34 f4       	brge	.+12     	; 0x1174 <M_DIO_Void_SetPinValue+0x144>
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	69 f0       	breq	.+26     	; 0x118c <M_DIO_Void_SetPinValue+0x15c>
    1172:	5f c0       	rjmp	.+190    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
    1174:	2d 81       	ldd	r18, Y+5	; 0x05
    1176:	3e 81       	ldd	r19, Y+6	; 0x06
    1178:	23 30       	cpi	r18, 0x03	; 3
    117a:	31 05       	cpc	r19, r1
    117c:	89 f1       	breq	.+98     	; 0x11e0 <M_DIO_Void_SetPinValue+0x1b0>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	91 05       	cpc	r25, r1
    1186:	09 f4       	brne	.+2      	; 0x118a <M_DIO_Void_SetPinValue+0x15a>
    1188:	40 c0       	rjmp	.+128    	; 0x120a <M_DIO_Void_SetPinValue+0x1da>
    118a:	53 c0       	rjmp	.+166    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        {
        case 1: CLR_BIT(PORTA_REG, PIN_NUM); break;
    118c:	ab e3       	ldi	r26, 0x3B	; 59
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e3       	ldi	r30, 0x3B	; 59
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <M_DIO_Void_SetPinValue+0x17a>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <M_DIO_Void_SetPinValue+0x176>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	3e c0       	rjmp	.+124    	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        case 2: CLR_BIT(PORTB_REG, PIN_NUM); break;
    11b6:	a8 e3       	ldi	r26, 0x38	; 56
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e8 e3       	ldi	r30, 0x38	; 56
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <M_DIO_Void_SetPinValue+0x1a4>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <M_DIO_Void_SetPinValue+0x1a0>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	29 c0       	rjmp	.+82     	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        case 3: CLR_BIT(PORTC_REG, PIN_NUM); break;
    11e0:	a5 e3       	ldi	r26, 0x35	; 53
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e5 e3       	ldi	r30, 0x35	; 53
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <M_DIO_Void_SetPinValue+0x1ce>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <M_DIO_Void_SetPinValue+0x1ca>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	14 c0       	rjmp	.+40     	; 0x1232 <M_DIO_Void_SetPinValue+0x202>
        case 4: CLR_BIT(PORTD_REG, PIN_NUM); break;
    120a:	a2 e3       	ldi	r26, 0x32	; 50
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e2 e3       	ldi	r30, 0x32	; 50
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <M_DIO_Void_SetPinValue+0x1f8>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <M_DIO_Void_SetPinValue+0x1f4>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
        }
    }
}
    1232:	28 96       	adiw	r28, 0x08	; 8
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <M_DIO_U8_GetPinValue>:

u8 M_DIO_U8_GetPinValue(u8 PORT_PIN)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <M_DIO_U8_GetPinValue+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <M_DIO_U8_GetPinValue+0x8>
    124c:	00 d0       	rcall	.+0      	; 0x124e <M_DIO_U8_GetPinValue+0xa>
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	8b 83       	std	Y+3, r24	; 0x03
	u8 PIN_NUM = PORT_PIN %10;
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9a e0       	ldi	r25, 0x0A	; 10
    1258:	69 2f       	mov	r22, r25
    125a:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
    125e:	89 2f       	mov	r24, r25
    1260:	8a 83       	std	Y+2, r24	; 0x02
	u8 PORT_NUM = PORT_PIN /10;
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9a e0       	ldi	r25, 0x0A	; 10
    1266:	69 2f       	mov	r22, r25
    1268:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
    126c:	89 83       	std	Y+1, r24	; 0x01

    switch(PORT_NUM)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3e 83       	std	Y+6, r19	; 0x06
    1276:	2d 83       	std	Y+5, r18	; 0x05
    1278:	4d 81       	ldd	r20, Y+5	; 0x05
    127a:	5e 81       	ldd	r21, Y+6	; 0x06
    127c:	42 30       	cpi	r20, 0x02	; 2
    127e:	51 05       	cpc	r21, r1
    1280:	49 f1       	breq	.+82     	; 0x12d4 <M_DIO_U8_GetPinValue+0x90>
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <M_DIO_U8_GetPinValue+0x54>
    128c:	2d 81       	ldd	r18, Y+5	; 0x05
    128e:	3e 81       	ldd	r19, Y+6	; 0x06
    1290:	21 30       	cpi	r18, 0x01	; 1
    1292:	31 05       	cpc	r19, r1
    1294:	61 f0       	breq	.+24     	; 0x12ae <M_DIO_U8_GetPinValue+0x6a>
    1296:	57 c0       	rjmp	.+174    	; 0x1346 <M_DIO_U8_GetPinValue+0x102>
    1298:	4d 81       	ldd	r20, Y+5	; 0x05
    129a:	5e 81       	ldd	r21, Y+6	; 0x06
    129c:	43 30       	cpi	r20, 0x03	; 3
    129e:	51 05       	cpc	r21, r1
    12a0:	61 f1       	breq	.+88     	; 0x12fa <M_DIO_U8_GetPinValue+0xb6>
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	84 30       	cpi	r24, 0x04	; 4
    12a8:	91 05       	cpc	r25, r1
    12aa:	d1 f1       	breq	.+116    	; 0x1320 <M_DIO_U8_GetPinValue+0xdc>
    12ac:	4c c0       	rjmp	.+152    	; 0x1346 <M_DIO_U8_GetPinValue+0x102>
    {
    case 1: //portA
        return GET_BIT(PINA_REG, PIN_NUM);
    12ae:	e9 e3       	ldi	r30, 0x39	; 57
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <M_DIO_U8_GetPinValue+0x82>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <M_DIO_U8_GetPinValue+0x7e>
    12ca:	ca 01       	movw	r24, r20
    12cc:	58 2f       	mov	r21, r24
    12ce:	51 70       	andi	r21, 0x01	; 1
    12d0:	5c 83       	std	Y+4, r21	; 0x04
    12d2:	3a c0       	rjmp	.+116    	; 0x1348 <M_DIO_U8_GetPinValue+0x104>
        break;
    case 2: //portB
        return GET_BIT(PINB_REG, PIN_NUM);
    12d4:	e6 e3       	ldi	r30, 0x36	; 54
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a9 01       	movw	r20, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <M_DIO_U8_GetPinValue+0xa8>
    12e8:	55 95       	asr	r21
    12ea:	47 95       	ror	r20
    12ec:	8a 95       	dec	r24
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <M_DIO_U8_GetPinValue+0xa4>
    12f0:	ca 01       	movw	r24, r20
    12f2:	58 2f       	mov	r21, r24
    12f4:	51 70       	andi	r21, 0x01	; 1
    12f6:	5c 83       	std	Y+4, r21	; 0x04
    12f8:	27 c0       	rjmp	.+78     	; 0x1348 <M_DIO_U8_GetPinValue+0x104>
        break;
    case 3: //portC
        return GET_BIT(PINC_REG, PIN_NUM);
    12fa:	e3 e3       	ldi	r30, 0x33	; 51
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <M_DIO_U8_GetPinValue+0xce>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <M_DIO_U8_GetPinValue+0xca>
    1316:	ca 01       	movw	r24, r20
    1318:	58 2f       	mov	r21, r24
    131a:	51 70       	andi	r21, 0x01	; 1
    131c:	5c 83       	std	Y+4, r21	; 0x04
    131e:	14 c0       	rjmp	.+40     	; 0x1348 <M_DIO_U8_GetPinValue+0x104>
        break;
    case 4: //portD
        return GET_BIT(PIND_REG, PIN_NUM);
    1320:	e0 e3       	ldi	r30, 0x30	; 48
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a9 01       	movw	r20, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <M_DIO_U8_GetPinValue+0xf4>
    1334:	55 95       	asr	r21
    1336:	47 95       	ror	r20
    1338:	8a 95       	dec	r24
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <M_DIO_U8_GetPinValue+0xf0>
    133c:	ca 01       	movw	r24, r20
    133e:	58 2f       	mov	r21, r24
    1340:	51 70       	andi	r21, 0x01	; 1
    1342:	5c 83       	std	Y+4, r21	; 0x04
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <M_DIO_U8_GetPinValue+0x104>
        break;
    }

    return 0;
    1346:	1c 82       	std	Y+4, r1	; 0x04
    1348:	8c 81       	ldd	r24, Y+4	; 0x04

}
    134a:	26 96       	adiw	r28, 0x06	; 6
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <M_DIO_Void_SetPinPullUpRes>:

void M_DIO_Void_SetPinPullUpRes(u8 PORT_PIN, u8 U8_Copy_State)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	2a 97       	sbiw	r28, 0x0a	; 10
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	6c 83       	std	Y+4, r22	; 0x04
	u8 PIN_NUM = PORT_PIN %10;
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9a e0       	ldi	r25, 0x0A	; 10
    1378:	69 2f       	mov	r22, r25
    137a:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
    137e:	89 2f       	mov	r24, r25
    1380:	8a 83       	std	Y+2, r24	; 0x02
	u8 PORT_NUM = PORT_PIN /10;
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9a e0       	ldi	r25, 0x0A	; 10
    1386:	69 2f       	mov	r22, r25
    1388:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__udivmodqi4>
    138c:	89 83       	std	Y+1, r24	; 0x01

	switch(U8_Copy_State)
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3a 87       	std	Y+10, r19	; 0x0a
    1396:	29 87       	std	Y+9, r18	; 0x09
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	09 f4       	brne	.+2      	; 0x13a2 <M_DIO_Void_SetPinPullUpRes+0x46>
    13a0:	76 c0       	rjmp	.+236    	; 0x148e <M_DIO_Void_SetPinPullUpRes+0x132>
    13a2:	29 85       	ldd	r18, Y+9	; 0x09
    13a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    13a6:	21 30       	cpi	r18, 0x01	; 1
    13a8:	31 05       	cpc	r19, r1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <M_DIO_Void_SetPinPullUpRes+0x52>
    13ac:	e4 c0       	rjmp	.+456    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
	{
	case Enable:
		switch(PORT_NUM)
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	38 87       	std	Y+8, r19	; 0x08
    13b6:	2f 83       	std	Y+7, r18	; 0x07
    13b8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ba:	98 85       	ldd	r25, Y+8	; 0x08
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	91 05       	cpc	r25, r1
    13c0:	51 f1       	breq	.+84     	; 0x1416 <M_DIO_Void_SetPinPullUpRes+0xba>
    13c2:	2f 81       	ldd	r18, Y+7	; 0x07
    13c4:	38 85       	ldd	r19, Y+8	; 0x08
    13c6:	23 30       	cpi	r18, 0x03	; 3
    13c8:	31 05       	cpc	r19, r1
    13ca:	34 f4       	brge	.+12     	; 0x13d8 <M_DIO_Void_SetPinPullUpRes+0x7c>
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	61 f0       	breq	.+24     	; 0x13ee <M_DIO_Void_SetPinPullUpRes+0x92>
    13d6:	cf c0       	rjmp	.+414    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
    13d8:	2f 81       	ldd	r18, Y+7	; 0x07
    13da:	38 85       	ldd	r19, Y+8	; 0x08
    13dc:	23 30       	cpi	r18, 0x03	; 3
    13de:	31 05       	cpc	r19, r1
    13e0:	71 f1       	breq	.+92     	; 0x143e <M_DIO_Void_SetPinPullUpRes+0xe2>
    13e2:	8f 81       	ldd	r24, Y+7	; 0x07
    13e4:	98 85       	ldd	r25, Y+8	; 0x08
    13e6:	84 30       	cpi	r24, 0x04	; 4
    13e8:	91 05       	cpc	r25, r1
    13ea:	e9 f1       	breq	.+122    	; 0x1466 <M_DIO_Void_SetPinPullUpRes+0x10a>
    13ec:	c4 c0       	rjmp	.+392    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,  PIN_NUM); break;
    13ee:	ab e3       	ldi	r26, 0x3B	; 59
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	eb e3       	ldi	r30, 0x3B	; 59
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <M_DIO_Void_SetPinPullUpRes+0xb0>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <M_DIO_Void_SetPinPullUpRes+0xac>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	b0 c0       	rjmp	.+352    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: SET_BIT(PORTB_REG,  PIN_NUM); break;
    1416:	a8 e3       	ldi	r26, 0x38	; 56
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e8 e3       	ldi	r30, 0x38	; 56
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <M_DIO_Void_SetPinPullUpRes+0xd8>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <M_DIO_Void_SetPinPullUpRes+0xd4>
    1438:	84 2b       	or	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	9c c0       	rjmp	.+312    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: SET_BIT(PORTC_REG,  PIN_NUM); break;
    143e:	a5 e3       	ldi	r26, 0x35	; 53
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e5 e3       	ldi	r30, 0x35	; 53
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <M_DIO_Void_SetPinPullUpRes+0x100>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <M_DIO_Void_SetPinPullUpRes+0xfc>
    1460:	84 2b       	or	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	88 c0       	rjmp	.+272    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: SET_BIT(PORTD_REG,  PIN_NUM); break;
    1466:	a2 e3       	ldi	r26, 0x32	; 50
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <M_DIO_Void_SetPinPullUpRes+0x128>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <M_DIO_Void_SetPinPullUpRes+0x124>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	74 c0       	rjmp	.+232    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		}
	break;

	case Disable:
		switch(PORT_NUM)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	3e 83       	std	Y+6, r19	; 0x06
    1496:	2d 83       	std	Y+5, r18	; 0x05
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	91 05       	cpc	r25, r1
    14a0:	61 f1       	breq	.+88     	; 0x14fa <M_DIO_Void_SetPinPullUpRes+0x19e>
    14a2:	2d 81       	ldd	r18, Y+5	; 0x05
    14a4:	3e 81       	ldd	r19, Y+6	; 0x06
    14a6:	23 30       	cpi	r18, 0x03	; 3
    14a8:	31 05       	cpc	r19, r1
    14aa:	34 f4       	brge	.+12     	; 0x14b8 <M_DIO_Void_SetPinPullUpRes+0x15c>
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	69 f0       	breq	.+26     	; 0x14d0 <M_DIO_Void_SetPinPullUpRes+0x174>
    14b6:	5f c0       	rjmp	.+190    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
    14b8:	2d 81       	ldd	r18, Y+5	; 0x05
    14ba:	3e 81       	ldd	r19, Y+6	; 0x06
    14bc:	23 30       	cpi	r18, 0x03	; 3
    14be:	31 05       	cpc	r19, r1
    14c0:	89 f1       	breq	.+98     	; 0x1524 <M_DIO_Void_SetPinPullUpRes+0x1c8>
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	91 05       	cpc	r25, r1
    14ca:	09 f4       	brne	.+2      	; 0x14ce <M_DIO_Void_SetPinPullUpRes+0x172>
    14cc:	40 c0       	rjmp	.+128    	; 0x154e <M_DIO_Void_SetPinPullUpRes+0x1f2>
    14ce:	53 c0       	rjmp	.+166    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,  PIN_NUM); break;
    14d0:	ab e3       	ldi	r26, 0x3B	; 59
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	eb e3       	ldi	r30, 0x3B	; 59
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <M_DIO_Void_SetPinPullUpRes+0x192>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <M_DIO_Void_SetPinPullUpRes+0x18e>
    14f2:	80 95       	com	r24
    14f4:	84 23       	and	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	3e c0       	rjmp	.+124    	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 2: CLR_BIT(PORTB_REG,  PIN_NUM); break;
    14fa:	a8 e3       	ldi	r26, 0x38	; 56
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e8 e3       	ldi	r30, 0x38	; 56
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <M_DIO_Void_SetPinPullUpRes+0x1bc>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <M_DIO_Void_SetPinPullUpRes+0x1b8>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	29 c0       	rjmp	.+82     	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 3: CLR_BIT(PORTC_REG,  PIN_NUM); break;
    1524:	a5 e3       	ldi	r26, 0x35	; 53
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e5 e3       	ldi	r30, 0x35	; 53
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <M_DIO_Void_SetPinPullUpRes+0x1e6>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <M_DIO_Void_SetPinPullUpRes+0x1e2>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <M_DIO_Void_SetPinPullUpRes+0x21a>
		case 4: CLR_BIT(PORTD_REG,  PIN_NUM); break;
    154e:	a2 e3       	ldi	r26, 0x32	; 50
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e2 e3       	ldi	r30, 0x32	; 50
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <M_DIO_Void_SetPinPullUpRes+0x210>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <M_DIO_Void_SetPinPullUpRes+0x20c>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
		}
	break;
	}

}
    1576:	2a 96       	adiw	r28, 0x0a	; 10
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <Disable_Pullup>:

void Disable_Pullup()
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    SFIOR_REG |=(1<<2);
    1590:	a0 e5       	ldi	r26, 0x50	; 80
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e0 e5       	ldi	r30, 0x50	; 80
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	84 60       	ori	r24, 0x04	; 4
    159c:	8c 93       	st	X, r24
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	08 95       	ret

000015a4 <H_LCD_Void_LCDInint>:
*/



void H_LCD_Void_LCDInint(void)
{
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	M_DIO_VOID_SetPinDirection(RS_PIN, Output);
    15ac:	8d e0       	ldi	r24, 0x0D	; 13
    15ae:	61 e0       	ldi	r22, 0x01	; 1
    15b0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_DIO_VOID_SetPinDirection>
	M_DIO_VOID_SetPinDirection(EN_PIN, Output);
    15b4:	8c e0       	ldi	r24, 0x0C	; 12
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_DIO_VOID_SetPinDirection>
	M_DIO_VOID_SetPinDirection(D4_PIN, Output);
    15bc:	84 e1       	ldi	r24, 0x14	; 20
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_DIO_VOID_SetPinDirection>
	M_DIO_VOID_SetPinDirection(D5_PIN, Output);
    15c4:	85 e1       	ldi	r24, 0x15	; 21
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_DIO_VOID_SetPinDirection>
	M_DIO_VOID_SetPinDirection(D6_PIN, Output);
    15cc:	86 e1       	ldi	r24, 0x16	; 22
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_DIO_VOID_SetPinDirection>
	M_DIO_VOID_SetPinDirection(D7_PIN, Output);
    15d4:	88 e1       	ldi	r24, 0x18	; 24
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_DIO_VOID_SetPinDirection>


	H_LCD_Void_LCDWriteCommand(ININT_COMMAND_1);
    15dc:	83 e3       	ldi	r24, 0x33	; 51
    15de:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(ININT_COMMAND_2);
    15e2:	82 e3       	ldi	r24, 0x32	; 50
    15e4:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(ININT_COMMAND_3);
    15e8:	88 e2       	ldi	r24, 0x28	; 40
    15ea:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(DISPLAY_ON_COMMAND);
    15ee:	8c e0       	ldi	r24, 0x0C	; 12
    15f0:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(CLEAR_COMMMAND);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(RETURN_HOME_COMMAND);
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <H_LCD_Void_LCDWriteCommand>:


void H_LCD_Void_LCDWriteCommand(u8 command)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	e9 97       	sbiw	r28, 0x39	; 57
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(RS_PIN, COMMAND);
    161c:	8d e0       	ldi	r24, 0x0D	; 13
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(D4_PIN, GET_BIT(command, 4) );
    1624:	89 ad       	ldd	r24, Y+57	; 0x39
    1626:	82 95       	swap	r24
    1628:	8f 70       	andi	r24, 0x0F	; 15
    162a:	98 2f       	mov	r25, r24
    162c:	91 70       	andi	r25, 0x01	; 1
    162e:	84 e1       	ldi	r24, 0x14	; 20
    1630:	69 2f       	mov	r22, r25
    1632:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D5_PIN, GET_BIT(command, 5) );
    1636:	89 ad       	ldd	r24, Y+57	; 0x39
    1638:	82 95       	swap	r24
    163a:	86 95       	lsr	r24
    163c:	87 70       	andi	r24, 0x07	; 7
    163e:	98 2f       	mov	r25, r24
    1640:	91 70       	andi	r25, 0x01	; 1
    1642:	85 e1       	ldi	r24, 0x15	; 21
    1644:	69 2f       	mov	r22, r25
    1646:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D6_PIN, GET_BIT(command, 6) );
    164a:	89 ad       	ldd	r24, Y+57	; 0x39
    164c:	82 95       	swap	r24
    164e:	86 95       	lsr	r24
    1650:	86 95       	lsr	r24
    1652:	83 70       	andi	r24, 0x03	; 3
    1654:	98 2f       	mov	r25, r24
    1656:	91 70       	andi	r25, 0x01	; 1
    1658:	86 e1       	ldi	r24, 0x16	; 22
    165a:	69 2f       	mov	r22, r25
    165c:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D7_PIN, GET_BIT(command, 7) );
    1660:	89 ad       	ldd	r24, Y+57	; 0x39
    1662:	98 2f       	mov	r25, r24
    1664:	99 1f       	adc	r25, r25
    1666:	99 27       	eor	r25, r25
    1668:	99 1f       	adc	r25, r25
    166a:	88 e1       	ldi	r24, 0x18	; 24
    166c:	69 2f       	mov	r22, r25
    166e:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(EN_PIN, High);
    1672:	8c e0       	ldi	r24, 0x0C	; 12
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a0 e8       	ldi	r26, 0x80	; 128
    1680:	bf e3       	ldi	r27, 0x3F	; 63
    1682:	8d ab       	std	Y+53, r24	; 0x35
    1684:	9e ab       	std	Y+54, r25	; 0x36
    1686:	af ab       	std	Y+55, r26	; 0x37
    1688:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168a:	6d a9       	ldd	r22, Y+53	; 0x35
    168c:	7e a9       	ldd	r23, Y+54	; 0x36
    168e:	8f a9       	ldd	r24, Y+55	; 0x37
    1690:	98 ad       	ldd	r25, Y+56	; 0x38
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a e7       	ldi	r20, 0x7A	; 122
    1698:	55 e4       	ldi	r21, 0x45	; 69
    169a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	89 ab       	std	Y+49, r24	; 0x31
    16a4:	9a ab       	std	Y+50, r25	; 0x32
    16a6:	ab ab       	std	Y+51, r26	; 0x33
    16a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16aa:	69 a9       	ldd	r22, Y+49	; 0x31
    16ac:	7a a9       	ldd	r23, Y+50	; 0x32
    16ae:	8b a9       	ldd	r24, Y+51	; 0x33
    16b0:	9c a9       	ldd	r25, Y+52	; 0x34
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	2c f4       	brge	.+10     	; 0x16cc <H_LCD_Void_LCDWriteCommand+0xc6>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	98 ab       	std	Y+48, r25	; 0x30
    16c8:	8f a7       	std	Y+47, r24	; 0x2f
    16ca:	3f c0       	rjmp	.+126    	; 0x174a <H_LCD_Void_LCDWriteCommand+0x144>
	else if (__tmp > 65535)
    16cc:	69 a9       	ldd	r22, Y+49	; 0x31
    16ce:	7a a9       	ldd	r23, Y+50	; 0x32
    16d0:	8b a9       	ldd	r24, Y+51	; 0x33
    16d2:	9c a9       	ldd	r25, Y+52	; 0x34
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	57 e4       	ldi	r21, 0x47	; 71
    16dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	4c f5       	brge	.+82     	; 0x1736 <H_LCD_Void_LCDWriteCommand+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	6d a9       	ldd	r22, Y+53	; 0x35
    16e6:	7e a9       	ldd	r23, Y+54	; 0x36
    16e8:	8f a9       	ldd	r24, Y+55	; 0x37
    16ea:	98 ad       	ldd	r25, Y+56	; 0x38
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	98 ab       	std	Y+48, r25	; 0x30
    170a:	8f a7       	std	Y+47, r24	; 0x2f
    170c:	0f c0       	rjmp	.+30     	; 0x172c <H_LCD_Void_LCDWriteCommand+0x126>
    170e:	80 e9       	ldi	r24, 0x90	; 144
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	9e a7       	std	Y+46, r25	; 0x2e
    1714:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1716:	8d a5       	ldd	r24, Y+45	; 0x2d
    1718:	9e a5       	ldd	r25, Y+46	; 0x2e
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <H_LCD_Void_LCDWriteCommand+0x114>
    171e:	9e a7       	std	Y+46, r25	; 0x2e
    1720:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1722:	8f a5       	ldd	r24, Y+47	; 0x2f
    1724:	98 a9       	ldd	r25, Y+48	; 0x30
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	98 ab       	std	Y+48, r25	; 0x30
    172a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	8f a5       	ldd	r24, Y+47	; 0x2f
    172e:	98 a9       	ldd	r25, Y+48	; 0x30
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	69 f7       	brne	.-38     	; 0x170e <H_LCD_Void_LCDWriteCommand+0x108>
    1734:	14 c0       	rjmp	.+40     	; 0x175e <H_LCD_Void_LCDWriteCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1736:	69 a9       	ldd	r22, Y+49	; 0x31
    1738:	7a a9       	ldd	r23, Y+50	; 0x32
    173a:	8b a9       	ldd	r24, Y+51	; 0x33
    173c:	9c a9       	ldd	r25, Y+52	; 0x34
    173e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	98 ab       	std	Y+48, r25	; 0x30
    1748:	8f a7       	std	Y+47, r24	; 0x2f
    174a:	8f a5       	ldd	r24, Y+47	; 0x2f
    174c:	98 a9       	ldd	r25, Y+48	; 0x30
    174e:	9c a7       	std	Y+44, r25	; 0x2c
    1750:	8b a7       	std	Y+43, r24	; 0x2b
    1752:	8b a5       	ldd	r24, Y+43	; 0x2b
    1754:	9c a5       	ldd	r25, Y+44	; 0x2c
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <H_LCD_Void_LCDWriteCommand+0x150>
    175a:	9c a7       	std	Y+44, r25	; 0x2c
    175c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(EN_PIN, Low);
    175e:	8c e0       	ldi	r24, 0x0C	; 12
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e8       	ldi	r26, 0x80	; 128
    176c:	bf e3       	ldi	r27, 0x3F	; 63
    176e:	8f a3       	std	Y+39, r24	; 0x27
    1770:	98 a7       	std	Y+40, r25	; 0x28
    1772:	a9 a7       	std	Y+41, r26	; 0x29
    1774:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	6f a1       	ldd	r22, Y+39	; 0x27
    1778:	78 a5       	ldd	r23, Y+40	; 0x28
    177a:	89 a5       	ldd	r24, Y+41	; 0x29
    177c:	9a a5       	ldd	r25, Y+42	; 0x2a
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a e7       	ldi	r20, 0x7A	; 122
    1784:	55 e4       	ldi	r21, 0x45	; 69
    1786:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8b a3       	std	Y+35, r24	; 0x23
    1790:	9c a3       	std	Y+36, r25	; 0x24
    1792:	ad a3       	std	Y+37, r26	; 0x25
    1794:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1796:	6b a1       	ldd	r22, Y+35	; 0x23
    1798:	7c a1       	ldd	r23, Y+36	; 0x24
    179a:	8d a1       	ldd	r24, Y+37	; 0x25
    179c:	9e a1       	ldd	r25, Y+38	; 0x26
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <H_LCD_Void_LCDWriteCommand+0x1b2>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9a a3       	std	Y+34, r25	; 0x22
    17b4:	89 a3       	std	Y+33, r24	; 0x21
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <H_LCD_Void_LCDWriteCommand+0x230>
	else if (__tmp > 65535)
    17b8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ba:	7c a1       	ldd	r23, Y+36	; 0x24
    17bc:	8d a1       	ldd	r24, Y+37	; 0x25
    17be:	9e a1       	ldd	r25, Y+38	; 0x26
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <H_LCD_Void_LCDWriteCommand+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	6f a1       	ldd	r22, Y+39	; 0x27
    17d2:	78 a5       	ldd	r23, Y+40	; 0x28
    17d4:	89 a5       	ldd	r24, Y+41	; 0x29
    17d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	51 e4       	ldi	r21, 0x41	; 65
    17e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9a a3       	std	Y+34, r25	; 0x22
    17f6:	89 a3       	std	Y+33, r24	; 0x21
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <H_LCD_Void_LCDWriteCommand+0x212>
    17fa:	80 e9       	ldi	r24, 0x90	; 144
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	98 a3       	std	Y+32, r25	; 0x20
    1800:	8f 8f       	std	Y+31, r24	; 0x1f
    1802:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1804:	98 a1       	ldd	r25, Y+32	; 0x20
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <H_LCD_Void_LCDWriteCommand+0x200>
    180a:	98 a3       	std	Y+32, r25	; 0x20
    180c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	89 a1       	ldd	r24, Y+33	; 0x21
    1810:	9a a1       	ldd	r25, Y+34	; 0x22
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	9a a3       	std	Y+34, r25	; 0x22
    1816:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	89 a1       	ldd	r24, Y+33	; 0x21
    181a:	9a a1       	ldd	r25, Y+34	; 0x22
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	69 f7       	brne	.-38     	; 0x17fa <H_LCD_Void_LCDWriteCommand+0x1f4>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <H_LCD_Void_LCDWriteCommand+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	6b a1       	ldd	r22, Y+35	; 0x23
    1824:	7c a1       	ldd	r23, Y+36	; 0x24
    1826:	8d a1       	ldd	r24, Y+37	; 0x25
    1828:	9e a1       	ldd	r25, Y+38	; 0x26
    182a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9a a3       	std	Y+34, r25	; 0x22
    1834:	89 a3       	std	Y+33, r24	; 0x21
    1836:	89 a1       	ldd	r24, Y+33	; 0x21
    1838:	9a a1       	ldd	r25, Y+34	; 0x22
    183a:	9e 8f       	std	Y+30, r25	; 0x1e
    183c:	8d 8f       	std	Y+29, r24	; 0x1d
    183e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1840:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <H_LCD_Void_LCDWriteCommand+0x23c>
    1846:	9e 8f       	std	Y+30, r25	; 0x1e
    1848:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	M_DIO_Void_SetPinValue(D4_PIN, GET_BIT(command, 0) );
    184a:	89 ad       	ldd	r24, Y+57	; 0x39
    184c:	98 2f       	mov	r25, r24
    184e:	91 70       	andi	r25, 0x01	; 1
    1850:	84 e1       	ldi	r24, 0x14	; 20
    1852:	69 2f       	mov	r22, r25
    1854:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D5_PIN, GET_BIT(command, 1) );
    1858:	89 ad       	ldd	r24, Y+57	; 0x39
    185a:	86 95       	lsr	r24
    185c:	98 2f       	mov	r25, r24
    185e:	91 70       	andi	r25, 0x01	; 1
    1860:	85 e1       	ldi	r24, 0x15	; 21
    1862:	69 2f       	mov	r22, r25
    1864:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D6_PIN, GET_BIT(command, 2) );
    1868:	89 ad       	ldd	r24, Y+57	; 0x39
    186a:	86 95       	lsr	r24
    186c:	86 95       	lsr	r24
    186e:	98 2f       	mov	r25, r24
    1870:	91 70       	andi	r25, 0x01	; 1
    1872:	86 e1       	ldi	r24, 0x16	; 22
    1874:	69 2f       	mov	r22, r25
    1876:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D7_PIN, GET_BIT(command, 3) );
    187a:	89 ad       	ldd	r24, Y+57	; 0x39
    187c:	86 95       	lsr	r24
    187e:	86 95       	lsr	r24
    1880:	86 95       	lsr	r24
    1882:	98 2f       	mov	r25, r24
    1884:	91 70       	andi	r25, 0x01	; 1
    1886:	88 e1       	ldi	r24, 0x18	; 24
    1888:	69 2f       	mov	r22, r25
    188a:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(EN_PIN, High);
    188e:	8c e0       	ldi	r24, 0x0C	; 12
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e8       	ldi	r26, 0x80	; 128
    189c:	bf e3       	ldi	r27, 0x3F	; 63
    189e:	89 8f       	std	Y+25, r24	; 0x19
    18a0:	9a 8f       	std	Y+26, r25	; 0x1a
    18a2:	ab 8f       	std	Y+27, r26	; 0x1b
    18a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a6:	69 8d       	ldd	r22, Y+25	; 0x19
    18a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	4a e7       	ldi	r20, 0x7A	; 122
    18b4:	55 e4       	ldi	r21, 0x45	; 69
    18b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8d 8b       	std	Y+21, r24	; 0x15
    18c0:	9e 8b       	std	Y+22, r25	; 0x16
    18c2:	af 8b       	std	Y+23, r26	; 0x17
    18c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c6:	6d 89       	ldd	r22, Y+21	; 0x15
    18c8:	7e 89       	ldd	r23, Y+22	; 0x16
    18ca:	8f 89       	ldd	r24, Y+23	; 0x17
    18cc:	98 8d       	ldd	r25, Y+24	; 0x18
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18da:	88 23       	and	r24, r24
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <H_LCD_Void_LCDWriteCommand+0x2e2>
		__ticks = 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	9c 8b       	std	Y+20, r25	; 0x14
    18e4:	8b 8b       	std	Y+19, r24	; 0x13
    18e6:	3f c0       	rjmp	.+126    	; 0x1966 <H_LCD_Void_LCDWriteCommand+0x360>
	else if (__tmp > 65535)
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	4c f5       	brge	.+82     	; 0x1952 <H_LCD_Void_LCDWriteCommand+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1900:	69 8d       	ldd	r22, Y+25	; 0x19
    1902:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	51 e4       	ldi	r21, 0x41	; 65
    1910:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	bc 01       	movw	r22, r24
    191a:	cd 01       	movw	r24, r26
    191c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9c 8b       	std	Y+20, r25	; 0x14
    1926:	8b 8b       	std	Y+19, r24	; 0x13
    1928:	0f c0       	rjmp	.+30     	; 0x1948 <H_LCD_Void_LCDWriteCommand+0x342>
    192a:	80 e9       	ldi	r24, 0x90	; 144
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	9a 8b       	std	Y+18, r25	; 0x12
    1930:	89 8b       	std	Y+17, r24	; 0x11
    1932:	89 89       	ldd	r24, Y+17	; 0x11
    1934:	9a 89       	ldd	r25, Y+18	; 0x12
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <H_LCD_Void_LCDWriteCommand+0x330>
    193a:	9a 8b       	std	Y+18, r25	; 0x12
    193c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193e:	8b 89       	ldd	r24, Y+19	; 0x13
    1940:	9c 89       	ldd	r25, Y+20	; 0x14
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1948:	8b 89       	ldd	r24, Y+19	; 0x13
    194a:	9c 89       	ldd	r25, Y+20	; 0x14
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	69 f7       	brne	.-38     	; 0x192a <H_LCD_Void_LCDWriteCommand+0x324>
    1950:	14 c0       	rjmp	.+40     	; 0x197a <H_LCD_Void_LCDWriteCommand+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9c 8b       	std	Y+20, r25	; 0x14
    1964:	8b 8b       	std	Y+19, r24	; 0x13
    1966:	8b 89       	ldd	r24, Y+19	; 0x13
    1968:	9c 89       	ldd	r25, Y+20	; 0x14
    196a:	98 8b       	std	Y+16, r25	; 0x10
    196c:	8f 87       	std	Y+15, r24	; 0x0f
    196e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1970:	98 89       	ldd	r25, Y+16	; 0x10
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	f1 f7       	brne	.-4      	; 0x1972 <H_LCD_Void_LCDWriteCommand+0x36c>
    1976:	98 8b       	std	Y+16, r25	; 0x10
    1978:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(EN_PIN, Low);
    197a:	8c e0       	ldi	r24, 0x0C	; 12
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 ea       	ldi	r26, 0xA0	; 160
    1988:	b0 e4       	ldi	r27, 0x40	; 64
    198a:	8b 87       	std	Y+11, r24	; 0x0b
    198c:	9c 87       	std	Y+12, r25	; 0x0c
    198e:	ad 87       	std	Y+13, r26	; 0x0d
    1990:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	6b 85       	ldd	r22, Y+11	; 0x0b
    1994:	7c 85       	ldd	r23, Y+12	; 0x0c
    1996:	8d 85       	ldd	r24, Y+13	; 0x0d
    1998:	9e 85       	ldd	r25, Y+14	; 0x0e
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a e7       	ldi	r20, 0x7A	; 122
    19a0:	55 e4       	ldi	r21, 0x45	; 69
    19a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8f 83       	std	Y+7, r24	; 0x07
    19ac:	98 87       	std	Y+8, r25	; 0x08
    19ae:	a9 87       	std	Y+9, r26	; 0x09
    19b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b2:	6f 81       	ldd	r22, Y+7	; 0x07
    19b4:	78 85       	ldd	r23, Y+8	; 0x08
    19b6:	89 85       	ldd	r24, Y+9	; 0x09
    19b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <H_LCD_Void_LCDWriteCommand+0x3ce>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9e 83       	std	Y+6, r25	; 0x06
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <H_LCD_Void_LCDWriteCommand+0x44c>
	else if (__tmp > 65535)
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <H_LCD_Void_LCDWriteCommand+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <H_LCD_Void_LCDWriteCommand+0x42e>
    1a16:	80 e9       	ldi	r24, 0x90	; 144
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	9c 83       	std	Y+4, r25	; 0x04
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <H_LCD_Void_LCDWriteCommand+0x41c>
    1a26:	9c 83       	std	Y+4, r25	; 0x04
    1a28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9e 83       	std	Y+6, r25	; 0x06
    1a32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <H_LCD_Void_LCDWriteCommand+0x410>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <H_LCD_Void_LCDWriteCommand+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <H_LCD_Void_LCDWriteCommand+0x458>
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1a66:	e9 96       	adiw	r28, 0x39	; 57
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <H_LCD_Void_LCDWriteCharacter>:

void H_LCD_Void_LCDWriteCharacter(u8 chararcter)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	e9 97       	sbiw	r28, 0x39	; 57
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(RS_PIN, DATA);
    1a8e:	8d e0       	ldi	r24, 0x0D	; 13
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	//chararcter = 'c';
	M_DIO_Void_SetPinValue(D4_PIN, GET_BIT(chararcter, 4) );
    1a96:	89 ad       	ldd	r24, Y+57	; 0x39
    1a98:	82 95       	swap	r24
    1a9a:	8f 70       	andi	r24, 0x0F	; 15
    1a9c:	98 2f       	mov	r25, r24
    1a9e:	91 70       	andi	r25, 0x01	; 1
    1aa0:	84 e1       	ldi	r24, 0x14	; 20
    1aa2:	69 2f       	mov	r22, r25
    1aa4:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D5_PIN, GET_BIT(chararcter, 5) );
    1aa8:	89 ad       	ldd	r24, Y+57	; 0x39
    1aaa:	82 95       	swap	r24
    1aac:	86 95       	lsr	r24
    1aae:	87 70       	andi	r24, 0x07	; 7
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	91 70       	andi	r25, 0x01	; 1
    1ab4:	85 e1       	ldi	r24, 0x15	; 21
    1ab6:	69 2f       	mov	r22, r25
    1ab8:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D6_PIN, GET_BIT(chararcter, 6) );
    1abc:	89 ad       	ldd	r24, Y+57	; 0x39
    1abe:	82 95       	swap	r24
    1ac0:	86 95       	lsr	r24
    1ac2:	86 95       	lsr	r24
    1ac4:	83 70       	andi	r24, 0x03	; 3
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	91 70       	andi	r25, 0x01	; 1
    1aca:	86 e1       	ldi	r24, 0x16	; 22
    1acc:	69 2f       	mov	r22, r25
    1ace:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D7_PIN, GET_BIT(chararcter, 7) );
    1ad2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ad4:	98 2f       	mov	r25, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	99 27       	eor	r25, r25
    1ada:	99 1f       	adc	r25, r25
    1adc:	88 e1       	ldi	r24, 0x18	; 24
    1ade:	69 2f       	mov	r22, r25
    1ae0:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(EN_PIN, High);
    1ae4:	8c e0       	ldi	r24, 0x0C	; 12
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e8       	ldi	r26, 0x80	; 128
    1af2:	bf e3       	ldi	r27, 0x3F	; 63
    1af4:	8d ab       	std	Y+53, r24	; 0x35
    1af6:	9e ab       	std	Y+54, r25	; 0x36
    1af8:	af ab       	std	Y+55, r26	; 0x37
    1afa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	6d a9       	ldd	r22, Y+53	; 0x35
    1afe:	7e a9       	ldd	r23, Y+54	; 0x36
    1b00:	8f a9       	ldd	r24, Y+55	; 0x37
    1b02:	98 ad       	ldd	r25, Y+56	; 0x38
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a e7       	ldi	r20, 0x7A	; 122
    1b0a:	55 e4       	ldi	r21, 0x45	; 69
    1b0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	89 ab       	std	Y+49, r24	; 0x31
    1b16:	9a ab       	std	Y+50, r25	; 0x32
    1b18:	ab ab       	std	Y+51, r26	; 0x33
    1b1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b20:	8b a9       	ldd	r24, Y+51	; 0x33
    1b22:	9c a9       	ldd	r25, Y+52	; 0x34
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <H_LCD_Void_LCDWriteCharacter+0xc6>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	98 ab       	std	Y+48, r25	; 0x30
    1b3a:	8f a7       	std	Y+47, r24	; 0x2f
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <H_LCD_Void_LCDWriteCharacter+0x144>
	else if (__tmp > 65535)
    1b3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b40:	7a a9       	ldd	r23, Y+50	; 0x32
    1b42:	8b a9       	ldd	r24, Y+51	; 0x33
    1b44:	9c a9       	ldd	r25, Y+52	; 0x34
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <H_LCD_Void_LCDWriteCharacter+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	6d a9       	ldd	r22, Y+53	; 0x35
    1b58:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	98 ab       	std	Y+48, r25	; 0x30
    1b7c:	8f a7       	std	Y+47, r24	; 0x2f
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <H_LCD_Void_LCDWriteCharacter+0x126>
    1b80:	80 e9       	ldi	r24, 0x90	; 144
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	9e a7       	std	Y+46, r25	; 0x2e
    1b86:	8d a7       	std	Y+45, r24	; 0x2d
    1b88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <H_LCD_Void_LCDWriteCharacter+0x114>
    1b90:	9e a7       	std	Y+46, r25	; 0x2e
    1b92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b96:	98 a9       	ldd	r25, Y+48	; 0x30
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	98 ab       	std	Y+48, r25	; 0x30
    1b9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <H_LCD_Void_LCDWriteCharacter+0x108>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <H_LCD_Void_LCDWriteCharacter+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	69 a9       	ldd	r22, Y+49	; 0x31
    1baa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bac:	8b a9       	ldd	r24, Y+51	; 0x33
    1bae:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	98 ab       	std	Y+48, r25	; 0x30
    1bba:	8f a7       	std	Y+47, r24	; 0x2f
    1bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc0:	9c a7       	std	Y+44, r25	; 0x2c
    1bc2:	8b a7       	std	Y+43, r24	; 0x2b
    1bc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <H_LCD_Void_LCDWriteCharacter+0x150>
    1bcc:	9c a7       	std	Y+44, r25	; 0x2c
    1bce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(EN_PIN, Low);
    1bd0:	8c e0       	ldi	r24, 0x0C	; 12
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e8       	ldi	r26, 0x80	; 128
    1bde:	bf e3       	ldi	r27, 0x3F	; 63
    1be0:	8f a3       	std	Y+39, r24	; 0x27
    1be2:	98 a7       	std	Y+40, r25	; 0x28
    1be4:	a9 a7       	std	Y+41, r26	; 0x29
    1be6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be8:	6f a1       	ldd	r22, Y+39	; 0x27
    1bea:	78 a5       	ldd	r23, Y+40	; 0x28
    1bec:	89 a5       	ldd	r24, Y+41	; 0x29
    1bee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	55 e4       	ldi	r21, 0x45	; 69
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8b a3       	std	Y+35, r24	; 0x23
    1c02:	9c a3       	std	Y+36, r25	; 0x24
    1c04:	ad a3       	std	Y+37, r26	; 0x25
    1c06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	2c f4       	brge	.+10     	; 0x1c2a <H_LCD_Void_LCDWriteCharacter+0x1b2>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9a a3       	std	Y+34, r25	; 0x22
    1c26:	89 a3       	std	Y+33, r24	; 0x21
    1c28:	3f c0       	rjmp	.+126    	; 0x1ca8 <H_LCD_Void_LCDWriteCharacter+0x230>
	else if (__tmp > 65535)
    1c2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c30:	9e a1       	ldd	r25, Y+38	; 0x26
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <H_LCD_Void_LCDWriteCharacter+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	6f a1       	ldd	r22, Y+39	; 0x27
    1c44:	78 a5       	ldd	r23, Y+40	; 0x28
    1c46:	89 a5       	ldd	r24, Y+41	; 0x29
    1c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e2       	ldi	r20, 0x20	; 32
    1c50:	51 e4       	ldi	r21, 0x41	; 65
    1c52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	bc 01       	movw	r22, r24
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	9a a3       	std	Y+34, r25	; 0x22
    1c68:	89 a3       	std	Y+33, r24	; 0x21
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <H_LCD_Void_LCDWriteCharacter+0x212>
    1c6c:	80 e9       	ldi	r24, 0x90	; 144
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	98 a3       	std	Y+32, r25	; 0x20
    1c72:	8f 8f       	std	Y+31, r24	; 0x1f
    1c74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c76:	98 a1       	ldd	r25, Y+32	; 0x20
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <H_LCD_Void_LCDWriteCharacter+0x200>
    1c7c:	98 a3       	std	Y+32, r25	; 0x20
    1c7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c80:	89 a1       	ldd	r24, Y+33	; 0x21
    1c82:	9a a1       	ldd	r25, Y+34	; 0x22
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	9a a3       	std	Y+34, r25	; 0x22
    1c88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <H_LCD_Void_LCDWriteCharacter+0x1f4>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <H_LCD_Void_LCDWriteCharacter+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c94:	6b a1       	ldd	r22, Y+35	; 0x23
    1c96:	7c a1       	ldd	r23, Y+36	; 0x24
    1c98:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	9a a3       	std	Y+34, r25	; 0x22
    1ca6:	89 a3       	std	Y+33, r24	; 0x21
    1ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    1caa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cac:	9e 8f       	std	Y+30, r25	; 0x1e
    1cae:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <H_LCD_Void_LCDWriteCharacter+0x23c>
    1cb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1cba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	M_DIO_Void_SetPinValue(D4_PIN, GET_BIT(chararcter, 0) );
    1cbc:	89 ad       	ldd	r24, Y+57	; 0x39
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	91 70       	andi	r25, 0x01	; 1
    1cc2:	84 e1       	ldi	r24, 0x14	; 20
    1cc4:	69 2f       	mov	r22, r25
    1cc6:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D5_PIN, GET_BIT(chararcter, 1) );
    1cca:	89 ad       	ldd	r24, Y+57	; 0x39
    1ccc:	86 95       	lsr	r24
    1cce:	98 2f       	mov	r25, r24
    1cd0:	91 70       	andi	r25, 0x01	; 1
    1cd2:	85 e1       	ldi	r24, 0x15	; 21
    1cd4:	69 2f       	mov	r22, r25
    1cd6:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D6_PIN, GET_BIT(chararcter, 2) );
    1cda:	89 ad       	ldd	r24, Y+57	; 0x39
    1cdc:	86 95       	lsr	r24
    1cde:	86 95       	lsr	r24
    1ce0:	98 2f       	mov	r25, r24
    1ce2:	91 70       	andi	r25, 0x01	; 1
    1ce4:	86 e1       	ldi	r24, 0x16	; 22
    1ce6:	69 2f       	mov	r22, r25
    1ce8:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(D7_PIN, GET_BIT(chararcter, 3) );
    1cec:	89 ad       	ldd	r24, Y+57	; 0x39
    1cee:	86 95       	lsr	r24
    1cf0:	86 95       	lsr	r24
    1cf2:	86 95       	lsr	r24
    1cf4:	98 2f       	mov	r25, r24
    1cf6:	91 70       	andi	r25, 0x01	; 1
    1cf8:	88 e1       	ldi	r24, 0x18	; 24
    1cfa:	69 2f       	mov	r22, r25
    1cfc:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(EN_PIN, High);
    1d00:	8c e0       	ldi	r24, 0x0C	; 12
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	a0 e8       	ldi	r26, 0x80	; 128
    1d0e:	bf e3       	ldi	r27, 0x3F	; 63
    1d10:	89 8f       	std	Y+25, r24	; 0x19
    1d12:	9a 8f       	std	Y+26, r25	; 0x1a
    1d14:	ab 8f       	std	Y+27, r26	; 0x1b
    1d16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d18:	69 8d       	ldd	r22, Y+25	; 0x19
    1d1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	4a e7       	ldi	r20, 0x7A	; 122
    1d26:	55 e4       	ldi	r21, 0x45	; 69
    1d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	8d 8b       	std	Y+21, r24	; 0x15
    1d32:	9e 8b       	std	Y+22, r25	; 0x16
    1d34:	af 8b       	std	Y+23, r26	; 0x17
    1d36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d38:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e8       	ldi	r20, 0x80	; 128
    1d46:	5f e3       	ldi	r21, 0x3F	; 63
    1d48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d4c:	88 23       	and	r24, r24
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <H_LCD_Void_LCDWriteCharacter+0x2e2>
		__ticks = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	9c 8b       	std	Y+20, r25	; 0x14
    1d56:	8b 8b       	std	Y+19, r24	; 0x13
    1d58:	3f c0       	rjmp	.+126    	; 0x1dd8 <H_LCD_Void_LCDWriteCharacter+0x360>
	else if (__tmp > 65535)
    1d5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d60:	98 8d       	ldd	r25, Y+24	; 0x18
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	3f ef       	ldi	r19, 0xFF	; 255
    1d66:	4f e7       	ldi	r20, 0x7F	; 127
    1d68:	57 e4       	ldi	r21, 0x47	; 71
    1d6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d6e:	18 16       	cp	r1, r24
    1d70:	4c f5       	brge	.+82     	; 0x1dc4 <H_LCD_Void_LCDWriteCharacter+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d72:	69 8d       	ldd	r22, Y+25	; 0x19
    1d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	51 e4       	ldi	r21, 0x41	; 65
    1d82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	cd 01       	movw	r24, r26
    1d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	0f c0       	rjmp	.+30     	; 0x1dba <H_LCD_Void_LCDWriteCharacter+0x342>
    1d9c:	80 e9       	ldi	r24, 0x90	; 144
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	9a 8b       	std	Y+18, r25	; 0x12
    1da2:	89 8b       	std	Y+17, r24	; 0x11
    1da4:	89 89       	ldd	r24, Y+17	; 0x11
    1da6:	9a 89       	ldd	r25, Y+18	; 0x12
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <H_LCD_Void_LCDWriteCharacter+0x330>
    1dac:	9a 8b       	std	Y+18, r25	; 0x12
    1dae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db0:	8b 89       	ldd	r24, Y+19	; 0x13
    1db2:	9c 89       	ldd	r25, Y+20	; 0x14
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	9c 8b       	std	Y+20, r25	; 0x14
    1db8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dba:	8b 89       	ldd	r24, Y+19	; 0x13
    1dbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	69 f7       	brne	.-38     	; 0x1d9c <H_LCD_Void_LCDWriteCharacter+0x324>
    1dc2:	14 c0       	rjmp	.+40     	; 0x1dec <H_LCD_Void_LCDWriteCharacter+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dca:	98 8d       	ldd	r25, Y+24	; 0x18
    1dcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9c 8b       	std	Y+20, r25	; 0x14
    1dd6:	8b 8b       	std	Y+19, r24	; 0x13
    1dd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dda:	9c 89       	ldd	r25, Y+20	; 0x14
    1ddc:	98 8b       	std	Y+16, r25	; 0x10
    1dde:	8f 87       	std	Y+15, r24	; 0x0f
    1de0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de2:	98 89       	ldd	r25, Y+16	; 0x10
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <H_LCD_Void_LCDWriteCharacter+0x36c>
    1de8:	98 8b       	std	Y+16, r25	; 0x10
    1dea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(EN_PIN, Low);
    1dec:	8c e0       	ldi	r24, 0x0C	; 12
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	0e 94 18 08 	call	0x1030	; 0x1030 <M_DIO_Void_SetPinValue>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 ea       	ldi	r26, 0xA0	; 160
    1dfa:	b0 e4       	ldi	r27, 0x40	; 64
    1dfc:	8b 87       	std	Y+11, r24	; 0x0b
    1dfe:	9c 87       	std	Y+12, r25	; 0x0c
    1e00:	ad 87       	std	Y+13, r26	; 0x0d
    1e02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a e7       	ldi	r20, 0x7A	; 122
    1e12:	55 e4       	ldi	r21, 0x45	; 69
    1e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8f 83       	std	Y+7, r24	; 0x07
    1e1e:	98 87       	std	Y+8, r25	; 0x08
    1e20:	a9 87       	std	Y+9, r26	; 0x09
    1e22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <H_LCD_Void_LCDWriteCharacter+0x3ce>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9e 83       	std	Y+6, r25	; 0x06
    1e42:	8d 83       	std	Y+5, r24	; 0x05
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <H_LCD_Void_LCDWriteCharacter+0x44c>
	else if (__tmp > 65535)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <H_LCD_Void_LCDWriteCharacter+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9e 83       	std	Y+6, r25	; 0x06
    1e84:	8d 83       	std	Y+5, r24	; 0x05
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <H_LCD_Void_LCDWriteCharacter+0x42e>
    1e88:	80 e9       	ldi	r24, 0x90	; 144
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <H_LCD_Void_LCDWriteCharacter+0x41c>
    1e98:	9c 83       	std	Y+4, r25	; 0x04
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <H_LCD_Void_LCDWriteCharacter+0x410>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <H_LCD_Void_LCDWriteCharacter+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <H_LCD_Void_LCDWriteCharacter+0x458>
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    1ed8:	e9 96       	adiw	r28, 0x39	; 57
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	cf 91       	pop	r28
    1ee6:	df 91       	pop	r29
    1ee8:	08 95       	ret

00001eea <H_LCD_Void_LCDWriteString>:

void H_LCD_Void_LCDWriteString(u8 *string)
{
    1eea:	df 93       	push	r29
    1eec:	cf 93       	push	r28
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <H_LCD_Void_LCDWriteString+0x6>
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <H_LCD_Void_LCDWriteString+0x8>
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0; string[i]!=NULL; i++)
    1efa:	1a 82       	std	Y+2, r1	; 0x02
    1efc:	19 82       	std	Y+1, r1	; 0x01
    1efe:	0f c0       	rjmp	.+30     	; 0x1f1e <H_LCD_Void_LCDWriteString+0x34>
	{
		H_LCD_Void_LCDWriteCharacter(string[i]);
    1f00:	29 81       	ldd	r18, Y+1	; 0x01
    1f02:	3a 81       	ldd	r19, Y+2	; 0x02
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	fc 01       	movw	r30, r24
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	80 81       	ld	r24, Z
    1f10:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <H_LCD_Void_LCDWriteCharacter>

}

void H_LCD_Void_LCDWriteString(u8 *string)
{
	for(int i=0; string[i]!=NULL; i++)
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	29 81       	ldd	r18, Y+1	; 0x01
    1f20:	3a 81       	ldd	r19, Y+2	; 0x02
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	9c 81       	ldd	r25, Y+4	; 0x04
    1f26:	fc 01       	movw	r30, r24
    1f28:	e2 0f       	add	r30, r18
    1f2a:	f3 1f       	adc	r31, r19
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 23       	and	r24, r24
    1f30:	39 f7       	brne	.-50     	; 0x1f00 <H_LCD_Void_LCDWriteString+0x16>
	{
		H_LCD_Void_LCDWriteCharacter(string[i]);
	}
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <H_LCD_Void_LCDWriteNumber>:

void H_LCD_Void_LCDWriteNumber(s32 number)
{
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	2f 97       	sbiw	r28, 0x0f	; 15
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	6c 87       	std	Y+12, r22	; 0x0c
    1f5a:	7d 87       	std	Y+13, r23	; 0x0d
    1f5c:	8e 87       	std	Y+14, r24	; 0x0e
    1f5e:	9f 87       	std	Y+15, r25	; 0x0f
	u8 Local_U8_Counter = 0;
    1f60:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_U8_Arr[10] = {0};
    1f62:	8a e0       	ldi	r24, 0x0A	; 10
    1f64:	fe 01       	movw	r30, r28
    1f66:	32 96       	adiw	r30, 0x02	; 2
    1f68:	df 01       	movw	r26, r30
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	1d 92       	st	X+, r1
    1f6e:	9a 95       	dec	r25
    1f70:	e9 f7       	brne	.-6      	; 0x1f6c <H_LCD_Void_LCDWriteNumber+0x2c>

	if(number < 0)
    1f72:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f74:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f76:	ae 85       	ldd	r26, Y+14	; 0x0e
    1f78:	bf 85       	ldd	r27, Y+15	; 0x0f
    1f7a:	bb 23       	and	r27, r27
    1f7c:	94 f4       	brge	.+36     	; 0x1fa2 <H_LCD_Void_LCDWriteNumber+0x62>
	{
		number *= -1;
    1f7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f80:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f82:	ae 85       	ldd	r26, Y+14	; 0x0e
    1f84:	bf 85       	ldd	r27, Y+15	; 0x0f
    1f86:	b0 95       	com	r27
    1f88:	a0 95       	com	r26
    1f8a:	90 95       	com	r25
    1f8c:	81 95       	neg	r24
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	af 4f       	sbci	r26, 0xFF	; 255
    1f92:	bf 4f       	sbci	r27, 0xFF	; 255
    1f94:	8c 87       	std	Y+12, r24	; 0x0c
    1f96:	9d 87       	std	Y+13, r25	; 0x0d
    1f98:	ae 87       	std	Y+14, r26	; 0x0e
    1f9a:	bf 87       	std	Y+15, r27	; 0x0f
		H_LCD_Void_LCDWriteCharacter('-');
    1f9c:	8d e2       	ldi	r24, 0x2D	; 45
    1f9e:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <H_LCD_Void_LCDWriteCharacter>
	}

	do
	{
		Local_U8_Arr[Local_U8_Counter++] = number%10;
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	08 2f       	mov	r16, r24
    1fa6:	10 e0       	ldi	r17, 0x00	; 0
    1fa8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1faa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fac:	ae 85       	ldd	r26, Y+14	; 0x0e
    1fae:	bf 85       	ldd	r27, Y+15	; 0x0f
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__divmodsi4>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	02 96       	adiw	r24, 0x02	; 2
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e0 0f       	add	r30, r16
    1fce:	f1 1f       	adc	r31, r17
    1fd0:	20 83       	st	Z, r18
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	8f 5f       	subi	r24, 0xFF	; 255
    1fd6:	89 83       	std	Y+1, r24	; 0x01
		number /= 10;
    1fd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fda:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fdc:	ae 85       	ldd	r26, Y+14	; 0x0e
    1fde:	bf 85       	ldd	r27, Y+15	; 0x0f
    1fe0:	2a e0       	ldi	r18, 0x0A	; 10
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__divmodsi4>
    1ff0:	da 01       	movw	r26, r20
    1ff2:	c9 01       	movw	r24, r18
    1ff4:	8c 87       	std	Y+12, r24	; 0x0c
    1ff6:	9d 87       	std	Y+13, r25	; 0x0d
    1ff8:	ae 87       	std	Y+14, r26	; 0x0e
    1ffa:	bf 87       	std	Y+15, r27	; 0x0f
	}while(number >0 );
    1ffc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ffe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2000:	ae 85       	ldd	r26, Y+14	; 0x0e
    2002:	bf 85       	ldd	r27, Y+15	; 0x0f
    2004:	18 16       	cp	r1, r24
    2006:	19 06       	cpc	r1, r25
    2008:	1a 06       	cpc	r1, r26
    200a:	1b 06       	cpc	r1, r27
    200c:	54 f2       	brlt	.-108    	; 0x1fa2 <H_LCD_Void_LCDWriteNumber+0x62>
    200e:	0f c0       	rjmp	.+30     	; 0x202e <H_LCD_Void_LCDWriteNumber+0xee>

	while(Local_U8_Counter > 0)
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[--Local_U8_Counter] +48);
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	81 50       	subi	r24, 0x01	; 1
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	ce 01       	movw	r24, r28
    201e:	02 96       	adiw	r24, 0x02	; 2
    2020:	fc 01       	movw	r30, r24
    2022:	e2 0f       	add	r30, r18
    2024:	f3 1f       	adc	r31, r19
    2026:	80 81       	ld	r24, Z
    2028:	80 5d       	subi	r24, 0xD0	; 208
    202a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <H_LCD_Void_LCDWriteCharacter>
	{
		Local_U8_Arr[Local_U8_Counter++] = number%10;
		number /= 10;
	}while(number >0 );

	while(Local_U8_Counter > 0)
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	88 23       	and	r24, r24
    2032:	71 f7       	brne	.-36     	; 0x2010 <H_LCD_Void_LCDWriteNumber+0xd0>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[--Local_U8_Counter] +48);
	}
}
    2034:	2f 96       	adiw	r28, 0x0f	; 15
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	08 95       	ret

0000204a <H_LCD_Void_LCDClear>:

void H_LCD_Void_LCDClear()
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(CLEAR_COMMMAND);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <H_LCD_Void_LCDGoTo>:

void H_LCD_Void_LCDGoTo()
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(RETURN_HOME_COMMAND);
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	0e 94 03 0b 	call	0x1606	; 0x1606 <H_LCD_Void_LCDWriteCommand>
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <ADC_Inint>:

#define VREF 5.0 // ADC reference voltage
#define R_REF 10000.0 // Reference resistor value

void ADC_Inint(void) //(u8 Voltage_Ref_Select, u8 Lift_Right_Ad, )
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	// disable ADC
	CLR_BIT(ADCSRA_REG, ADEN_BIT);
    207a:	a6 e2       	ldi	r26, 0x26	; 38
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e6 e2       	ldi	r30, 0x26	; 38
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	8f 77       	andi	r24, 0x7F	; 127
    2086:	8c 93       	st	X, r24

	//vcc as volatge
	CLR_BIT(ADMUX_REG, REFS1_BIT);
    2088:	a7 e2       	ldi	r26, 0x27	; 39
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e7 e2       	ldi	r30, 0x27	; 39
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	8f 77       	andi	r24, 0x7F	; 127
    2094:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG, REFS0_BIT);
    2096:	a7 e2       	ldi	r26, 0x27	; 39
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e7 e2       	ldi	r30, 0x27	; 39
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	80 64       	ori	r24, 0x40	; 64
    20a2:	8c 93       	st	X, r24

	//right adjustment
	CLR_BIT(ADMUX_REG, ADLAR_BIT);
    20a4:	a7 e2       	ldi	r26, 0x27	; 39
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e7 e2       	ldi	r30, 0x27	; 39
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	8f 7d       	andi	r24, 0xDF	; 223
    20b0:	8c 93       	st	X, r24

	//disable interrupt
	CLR_BIT(ADCSRA_REG, ADIE_BIT);
    20b2:	a6 e2       	ldi	r26, 0x26	; 38
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e6 e2       	ldi	r30, 0x26	; 38
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	87 7f       	andi	r24, 0xF7	; 247
    20be:	8c 93       	st	X, r24

	//prescaler selection of 128
	SET_BIT(ADCSRA_REG, ADPS0_BIT);
    20c0:	a6 e2       	ldi	r26, 0x26	; 38
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e6 e2       	ldi	r30, 0x26	; 38
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	81 60       	ori	r24, 0x01	; 1
    20cc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS1_BIT);
    20ce:	a6 e2       	ldi	r26, 0x26	; 38
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e6 e2       	ldi	r30, 0x26	; 38
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	82 60       	ori	r24, 0x02	; 2
    20da:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS2_BIT);
    20dc:	a6 e2       	ldi	r26, 0x26	; 38
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e6 e2       	ldi	r30, 0x26	; 38
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	84 60       	ori	r24, 0x04	; 4
    20e8:	8c 93       	st	X, r24

	//enable ADC
	SET_BIT(ADCSRA_REG, ADEN_BIT);
    20ea:	a6 e2       	ldi	r26, 0x26	; 38
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e6 e2       	ldi	r30, 0x26	; 38
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 68       	ori	r24, 0x80	; 128
    20f6:	8c 93       	st	X, r24
}
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <ADC_Read_Value>:



u16 ADC_Read_Value(void)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <ADC_Read_Value+0x6>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
	u16  readings;
	// Selecting Channel 0
	CLR_BIT(ADMUX_REG, MUX0_BIT);
    2108:	a7 e2       	ldi	r26, 0x27	; 39
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	e7 e2       	ldi	r30, 0x27	; 39
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	8e 7f       	andi	r24, 0xFE	; 254
    2114:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, MUX1_BIT);
    2116:	a7 e2       	ldi	r26, 0x27	; 39
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e7 e2       	ldi	r30, 0x27	; 39
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8d 7f       	andi	r24, 0xFD	; 253
    2122:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, MUX2_BIT);
    2124:	a7 e2       	ldi	r26, 0x27	; 39
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e7 e2       	ldi	r30, 0x27	; 39
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	8b 7f       	andi	r24, 0xFB	; 251
    2130:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, MUX3_BIT);
    2132:	a7 e2       	ldi	r26, 0x27	; 39
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e7 e2       	ldi	r30, 0x27	; 39
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	87 7f       	andi	r24, 0xF7	; 247
    213e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG, MUX4_BIT);
    2140:	a7 e2       	ldi	r26, 0x27	; 39
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e7 e2       	ldi	r30, 0x27	; 39
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8f 7e       	andi	r24, 0xEF	; 239
    214c:	8c 93       	st	X, r24
	 //calling start completion function
	ADC_Start_Conversion();
    214e:	0e 94 b6 10 	call	0x216c	; 0x216c <ADC_Start_Conversion>
	// getting the reading
	readings = ADC;
    2152:	e4 e2       	ldi	r30, 0x24	; 36
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
	return readings;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <ADC_Start_Conversion>:


void ADC_Start_Conversion(void)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	//start conversion
	SET_BIT(ADCSRA_REG, ADSC_BIT);
    2174:	a6 e2       	ldi	r26, 0x26	; 38
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e6 e2       	ldi	r30, 0x26	; 38
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 64       	ori	r24, 0x40	; 64
    2180:	8c 93       	st	X, r24
	// wait untill conversion complete
	while( GET_BIT(ADCSRA_REG, ADIF_BIT) == 0 );
    2182:	e6 e2       	ldi	r30, 0x26	; 38
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	82 95       	swap	r24
    218a:	8f 70       	andi	r24, 0x0F	; 15
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	81 70       	andi	r24, 0x01	; 1
    2192:	90 70       	andi	r25, 0x00	; 0
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	a9 f3       	breq	.-22     	; 0x2182 <ADC_Start_Conversion+0x16>
	// clear the completion flag
	//SET_BIT(ADCSRA_REG, ADIF_BIT);
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <calculate_resistance>:

f32 calculate_resistance(u16 ADC_Result)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	2a 97       	sbiw	r28, 0x0a	; 10
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	9a 87       	std	Y+10, r25	; 0x0a
    21b4:	89 87       	std	Y+9, r24	; 0x09
    f32 voltage = ADC_Result * VREF / 1024.0;; // Calculate voltage
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	cc 01       	movw	r24, r24
    21bc:	a0 e0       	ldi	r26, 0x00	; 0
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 ea       	ldi	r20, 0xA0	; 160
    21d6:	50 e4       	ldi	r21, 0x40	; 64
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8d 83       	std	Y+5, r24	; 0x05
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	af 83       	std	Y+7, r26	; 0x07
    21fa:	b8 87       	std	Y+8, r27	; 0x08
    float current = voltage / R_REF; // Calculate current
    21fc:	6d 81       	ldd	r22, Y+5	; 0x05
    21fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2200:	8f 81       	ldd	r24, Y+7	; 0x07
    2202:	98 85       	ldd	r25, Y+8	; 0x08
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e4       	ldi	r19, 0x40	; 64
    2208:	4c e1       	ldi	r20, 0x1C	; 28
    220a:	56 e4       	ldi	r21, 0x46	; 70
    220c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	ab 83       	std	Y+3, r26	; 0x03
    221a:	bc 83       	std	Y+4, r27	; 0x04
    return voltage/ current; // Calculate resistance
    221c:	6d 81       	ldd	r22, Y+5	; 0x05
    221e:	7e 81       	ldd	r23, Y+6	; 0x06
    2220:	8f 81       	ldd	r24, Y+7	; 0x07
    2222:	98 85       	ldd	r25, Y+8	; 0x08
    2224:	29 81       	ldd	r18, Y+1	; 0x01
    2226:	3a 81       	ldd	r19, Y+2	; 0x02
    2228:	4b 81       	ldd	r20, Y+3	; 0x03
    222a:	5c 81       	ldd	r21, Y+4	; 0x04
    222c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22

}
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	2a 96       	adiw	r28, 0x0a	; 10
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <main>:
#include <util/delay.h>



int main()
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	a8 97       	sbiw	r28, 0x28	; 40
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
	// SETTING THE DIRECTION OF THE AC0 PIN
	M_DIO_VOID_SetPinDirection(PA0_ID, Input);
    225e:	8a e0       	ldi	r24, 0x0A	; 10
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 0f 07 	call	0xe1e	; 0xe1e <M_DIO_VOID_SetPinDirection>
	// Initialize ADC
	ADC_Inint();
    2266:	0e 94 39 10 	call	0x2072	; 0x2072 <ADC_Inint>
	// Initialize LCD
	H_LCD_Void_LCDInint();
    226a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <H_LCD_Void_LCDInint>
	u8 string[] = "The Value is =";
    226e:	ce 01       	movw	r24, r28
    2270:	45 96       	adiw	r24, 0x15	; 21
    2272:	9d a3       	std	Y+37, r25	; 0x25
    2274:	8c a3       	std	Y+36, r24	; 0x24
    2276:	e0 e6       	ldi	r30, 0x60	; 96
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	ff a3       	std	Y+39, r31	; 0x27
    227c:	ee a3       	std	Y+38, r30	; 0x26
    227e:	ff e0       	ldi	r31, 0x0F	; 15
    2280:	f8 a7       	std	Y+40, r31	; 0x28
    2282:	ee a1       	ldd	r30, Y+38	; 0x26
    2284:	ff a1       	ldd	r31, Y+39	; 0x27
    2286:	00 80       	ld	r0, Z
    2288:	8e a1       	ldd	r24, Y+38	; 0x26
    228a:	9f a1       	ldd	r25, Y+39	; 0x27
    228c:	01 96       	adiw	r24, 0x01	; 1
    228e:	9f a3       	std	Y+39, r25	; 0x27
    2290:	8e a3       	std	Y+38, r24	; 0x26
    2292:	ec a1       	ldd	r30, Y+36	; 0x24
    2294:	fd a1       	ldd	r31, Y+37	; 0x25
    2296:	00 82       	st	Z, r0
    2298:	8c a1       	ldd	r24, Y+36	; 0x24
    229a:	9d a1       	ldd	r25, Y+37	; 0x25
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	9d a3       	std	Y+37, r25	; 0x25
    22a0:	8c a3       	std	Y+36, r24	; 0x24
    22a2:	98 a5       	ldd	r25, Y+40	; 0x28
    22a4:	91 50       	subi	r25, 0x01	; 1
    22a6:	98 a7       	std	Y+40, r25	; 0x28
    22a8:	e8 a5       	ldd	r30, Y+40	; 0x28
    22aa:	ee 23       	and	r30, r30
    22ac:	51 f7       	brne	.-44     	; 0x2282 <main+0x38>
	while(1)
	{
		// Read ADC result
		u16 adc_result = ADC_Read_Value();
    22ae:	0e 94 7f 10 	call	0x20fe	; 0x20fe <ADC_Read_Value>
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
		// Calculate resistance
		f32 resistor_value = calculate_resistance(adc_result);
    22b6:	8b 89       	ldd	r24, Y+19	; 0x13
    22b8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ba:	0e 94 cf 10 	call	0x219e	; 0x219e <calculate_resistance>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	8f 87       	std	Y+15, r24	; 0x0f
    22c4:	98 8b       	std	Y+16, r25	; 0x10
    22c6:	a9 8b       	std	Y+17, r26	; 0x11
    22c8:	ba 8b       	std	Y+18, r27	; 0x12
		// write the resistor value on the lcd
		 H_LCD_Void_LCDClear();
    22ca:	0e 94 25 10 	call	0x204a	; 0x204a <H_LCD_Void_LCDClear>
		 H_LCD_Void_LCDWriteString(string);
    22ce:	ce 01       	movw	r24, r28
    22d0:	45 96       	adiw	r24, 0x15	; 21
    22d2:	0e 94 75 0f 	call	0x1eea	; 0x1eea <H_LCD_Void_LCDWriteString>
		 H_LCD_Void_LCDWriteNumber(adc_result);
    22d6:	8b 89       	ldd	r24, Y+19	; 0x13
    22d8:	9c 89       	ldd	r25, Y+20	; 0x14
    22da:	cc 01       	movw	r24, r24
    22dc:	a0 e0       	ldi	r26, 0x00	; 0
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <H_LCD_Void_LCDWriteNumber>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	aa ef       	ldi	r26, 0xFA	; 250
    22ee:	b3 e4       	ldi	r27, 0x43	; 67
    22f0:	8b 87       	std	Y+11, r24	; 0x0b
    22f2:	9c 87       	std	Y+12, r25	; 0x0c
    22f4:	ad 87       	std	Y+13, r26	; 0x0d
    22f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	55 e4       	ldi	r21, 0x45	; 69
    2308:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8f 83       	std	Y+7, r24	; 0x07
    2312:	98 87       	std	Y+8, r25	; 0x08
    2314:	a9 87       	std	Y+9, r26	; 0x09
    2316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <main+0xf0>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <main+0x16e>
	else if (__tmp > 65535)
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6b 85       	ldd	r22, Y+11	; 0x0b
    2354:	7c 85       	ldd	r23, Y+12	; 0x0c
    2356:	8d 85       	ldd	r24, Y+13	; 0x0d
    2358:	9e 85       	ldd	r25, Y+14	; 0x0e
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
    237a:	0f c0       	rjmp	.+30     	; 0x239a <main+0x150>
    237c:	80 e9       	ldi	r24, 0x90	; 144
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <main+0x13e>
    238c:	9c 83       	std	Y+4, r25	; 0x04
    238e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <main+0x132>
    23a2:	85 cf       	rjmp	.-246    	; 0x22ae <main+0x64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9e 83       	std	Y+6, r25	; 0x06
    23b6:	8d 83       	std	Y+5, r24	; 0x05
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <main+0x17a>
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	70 cf       	rjmp	.-288    	; 0x22ae <main+0x64>

000023ce <__udivmodqi4>:
    23ce:	99 1b       	sub	r25, r25
    23d0:	79 e0       	ldi	r23, 0x09	; 9
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <__udivmodqi4_ep>

000023d4 <__udivmodqi4_loop>:
    23d4:	99 1f       	adc	r25, r25
    23d6:	96 17       	cp	r25, r22
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <__udivmodqi4_ep>
    23da:	96 1b       	sub	r25, r22

000023dc <__udivmodqi4_ep>:
    23dc:	88 1f       	adc	r24, r24
    23de:	7a 95       	dec	r23
    23e0:	c9 f7       	brne	.-14     	; 0x23d4 <__udivmodqi4_loop>
    23e2:	80 95       	com	r24
    23e4:	08 95       	ret

000023e6 <__divmodsi4>:
    23e6:	97 fb       	bst	r25, 7
    23e8:	09 2e       	mov	r0, r25
    23ea:	05 26       	eor	r0, r21
    23ec:	0e d0       	rcall	.+28     	; 0x240a <__divmodsi4_neg1>
    23ee:	57 fd       	sbrc	r21, 7
    23f0:	04 d0       	rcall	.+8      	; 0x23fa <__divmodsi4_neg2>
    23f2:	14 d0       	rcall	.+40     	; 0x241c <__udivmodsi4>
    23f4:	0a d0       	rcall	.+20     	; 0x240a <__divmodsi4_neg1>
    23f6:	00 1c       	adc	r0, r0
    23f8:	38 f4       	brcc	.+14     	; 0x2408 <__divmodsi4_exit>

000023fa <__divmodsi4_neg2>:
    23fa:	50 95       	com	r21
    23fc:	40 95       	com	r20
    23fe:	30 95       	com	r19
    2400:	21 95       	neg	r18
    2402:	3f 4f       	sbci	r19, 0xFF	; 255
    2404:	4f 4f       	sbci	r20, 0xFF	; 255
    2406:	5f 4f       	sbci	r21, 0xFF	; 255

00002408 <__divmodsi4_exit>:
    2408:	08 95       	ret

0000240a <__divmodsi4_neg1>:
    240a:	f6 f7       	brtc	.-4      	; 0x2408 <__divmodsi4_exit>
    240c:	90 95       	com	r25
    240e:	80 95       	com	r24
    2410:	70 95       	com	r23
    2412:	61 95       	neg	r22
    2414:	7f 4f       	sbci	r23, 0xFF	; 255
    2416:	8f 4f       	sbci	r24, 0xFF	; 255
    2418:	9f 4f       	sbci	r25, 0xFF	; 255
    241a:	08 95       	ret

0000241c <__udivmodsi4>:
    241c:	a1 e2       	ldi	r26, 0x21	; 33
    241e:	1a 2e       	mov	r1, r26
    2420:	aa 1b       	sub	r26, r26
    2422:	bb 1b       	sub	r27, r27
    2424:	fd 01       	movw	r30, r26
    2426:	0d c0       	rjmp	.+26     	; 0x2442 <__udivmodsi4_ep>

00002428 <__udivmodsi4_loop>:
    2428:	aa 1f       	adc	r26, r26
    242a:	bb 1f       	adc	r27, r27
    242c:	ee 1f       	adc	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	a2 17       	cp	r26, r18
    2432:	b3 07       	cpc	r27, r19
    2434:	e4 07       	cpc	r30, r20
    2436:	f5 07       	cpc	r31, r21
    2438:	20 f0       	brcs	.+8      	; 0x2442 <__udivmodsi4_ep>
    243a:	a2 1b       	sub	r26, r18
    243c:	b3 0b       	sbc	r27, r19
    243e:	e4 0b       	sbc	r30, r20
    2440:	f5 0b       	sbc	r31, r21

00002442 <__udivmodsi4_ep>:
    2442:	66 1f       	adc	r22, r22
    2444:	77 1f       	adc	r23, r23
    2446:	88 1f       	adc	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	1a 94       	dec	r1
    244c:	69 f7       	brne	.-38     	; 0x2428 <__udivmodsi4_loop>
    244e:	60 95       	com	r22
    2450:	70 95       	com	r23
    2452:	80 95       	com	r24
    2454:	90 95       	com	r25
    2456:	9b 01       	movw	r18, r22
    2458:	ac 01       	movw	r20, r24
    245a:	bd 01       	movw	r22, r26
    245c:	cf 01       	movw	r24, r30
    245e:	08 95       	ret

00002460 <__prologue_saves__>:
    2460:	2f 92       	push	r2
    2462:	3f 92       	push	r3
    2464:	4f 92       	push	r4
    2466:	5f 92       	push	r5
    2468:	6f 92       	push	r6
    246a:	7f 92       	push	r7
    246c:	8f 92       	push	r8
    246e:	9f 92       	push	r9
    2470:	af 92       	push	r10
    2472:	bf 92       	push	r11
    2474:	cf 92       	push	r12
    2476:	df 92       	push	r13
    2478:	ef 92       	push	r14
    247a:	ff 92       	push	r15
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	ca 1b       	sub	r28, r26
    248a:	db 0b       	sbc	r29, r27
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	09 94       	ijmp

00002498 <__epilogue_restores__>:
    2498:	2a 88       	ldd	r2, Y+18	; 0x12
    249a:	39 88       	ldd	r3, Y+17	; 0x11
    249c:	48 88       	ldd	r4, Y+16	; 0x10
    249e:	5f 84       	ldd	r5, Y+15	; 0x0f
    24a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    24a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    24a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    24a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    24aa:	b9 84       	ldd	r11, Y+9	; 0x09
    24ac:	c8 84       	ldd	r12, Y+8	; 0x08
    24ae:	df 80       	ldd	r13, Y+7	; 0x07
    24b0:	ee 80       	ldd	r14, Y+6	; 0x06
    24b2:	fd 80       	ldd	r15, Y+5	; 0x05
    24b4:	0c 81       	ldd	r16, Y+4	; 0x04
    24b6:	1b 81       	ldd	r17, Y+3	; 0x03
    24b8:	aa 81       	ldd	r26, Y+2	; 0x02
    24ba:	b9 81       	ldd	r27, Y+1	; 0x01
    24bc:	ce 0f       	add	r28, r30
    24be:	d1 1d       	adc	r29, r1
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	ed 01       	movw	r28, r26
    24cc:	08 95       	ret

000024ce <_exit>:
    24ce:	f8 94       	cli

000024d0 <__stop_program>:
    24d0:	ff cf       	rjmp	.-2      	; 0x24d0 <__stop_program>
